Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    PRIVATE
    PROTECTED
    PUBLIC
    REINTERPRET_CAST
    STATIC_CAST
    TEMPLATE
    THIS
    THROW
    TRY
    TYPEID
    TYPENAME
    USING

Grammar

Rule 0     S' -> start
Rule 1     start -> part
Rule 2     start -> empty
Rule 3     part -> part declorcom
Rule 4     part -> declorcom
Rule 5     declorcom -> comment
Rule 6     declorcom -> external_declaration
Rule 7     initializer -> assignable_expression
Rule 8     initializer -> { initializer_list_orempty }
Rule 9     initializer -> { initializer_list , }
Rule 10    initializer_list -> initializer
Rule 11    initializer_list -> initializer_list , initializer
Rule 12    variable_initable -> variable
Rule 13    variable_initable -> variable = initializer
Rule 14    variable_initable_list -> variable_initable
Rule 15    variable_initable_list -> variable_initable_list , variable_initable
Rule 16    empty -> <empty>
Rule 17    type -> type_specifier_can_unsigned
Rule 18    type -> type_specifier_cannot_unsigned
Rule 19    type -> uorus
Rule 20    type -> uorus type_specifier_can_unsigned
Rule 21    type_specifier -> type_specifier_cannot_unsigned
Rule 22    type_specifier -> type_specifier_can_unsigned
Rule 23    type_specifier -> uorus
Rule 24    type_specifier_cannot_unsigned -> VOID
Rule 25    type_specifier_cannot_unsigned -> FLOAT
Rule 26    type_specifier_cannot_unsigned -> DOUBLE
Rule 27    type_specifier_cannot_unsigned -> BOOL
Rule 28    type_specifier_cannot_unsigned -> struct_specifier
Rule 29    type_specifier_can_unsigned -> INT
Rule 30    type_specifier_can_unsigned -> SHORT
Rule 31    type_specifier_can_unsigned -> LONG
Rule 32    type_specifier_can_unsigned -> CHAR
Rule 33    uorus -> SIGNED
Rule 34    uorus -> UNSIGNED
Rule 35    declaration_list_orempty -> empty
Rule 36    declaration_list_orempty -> declaration_list
Rule 37    declaration -> type variable_initable_list_orempty ;
Rule 38    declaration_list -> declaration
Rule 39    declaration_list -> declaration_list declaration
Rule 40    identifier_list_orempty -> empty
Rule 41    identifier_list_orempty -> identifier_list
Rule 42    identifier_list -> identifier
Rule 43    identifier_list -> identifier_list , identifier
Rule 44    identifier -> ID
Rule 45    identifier -> inlinefunc
Rule 46    inlinefunc -> SIZEOF
Rule 47    back_statement -> BREAK ;
Rule 48    back_statement -> CONTINUE ;
Rule 49    back_statement -> RETURN ;
Rule 50    back_statement -> RETURN expression ;
Rule 51    variable_initable_list_orempty -> empty
Rule 52    variable_initable_list_orempty -> variable_initable_list
Rule 53    assignable_expression_orempty -> empty
Rule 54    assignable_expression_orempty -> assignable_expression
Rule 55    assign_operator -> =
Rule 56    assign_operator -> MUL_ASG
Rule 57    assign_operator -> DIV_ASG
Rule 58    assign_operator -> MOD_ASG
Rule 59    assign_operator -> ADD_ASG
Rule 60    assign_operator -> SUB_ASG
Rule 61    assign_operator -> LEFT_ASG
Rule 62    assign_operator -> RIGHT_ASG
Rule 63    assign_operator -> AND_ASG
Rule 64    assign_operator -> XOR_ASG
Rule 65    assign_operator -> OR_ASG
Rule 66    arg_value_exp_list -> assignable_expression
Rule 67    arg_value_exp_list -> arg_value_exp_list , assignable_expression
Rule 68    assignable_expression -> conditional_expression
Rule 69    assignable_expression -> unary_expression assign_operator assignable_expression
Rule 70    block_item_list_orempty -> empty
Rule 71    block_item_list_orempty -> block_item_list
Rule 72    constant_expression_orempty -> empty
Rule 73    constant_expression_orempty -> constant_expression
Rule 74    specifier_qualifier_list_orempty -> empty
Rule 75    specifier_qualifier_list_orempty -> specifier_qualifier_list
Rule 76    block_item -> declaration
Rule 77    block_item -> statement
Rule 78    block_item -> comment
Rule 79    block_item_list -> block_item
Rule 80    block_item_list -> block_item_list block_item
Rule 81    expression_orempty -> empty
Rule 82    expression_orempty -> expression
Rule 83    funcbody_statement -> { block_item_list_orempty }
Rule 84    conditional_expression -> binary_expression
Rule 85    conditional_expression -> ternary_expression
Rule 86    ternary_expression -> expression ? expression : expression
Rule 87    constant -> INTEGER_CONST
Rule 88    constant -> CHAR_CONST
Rule 89    constant -> FLOAT_CONST
Rule 90    constant -> BOOL_CONST
Rule 91    constant_expression -> conditional_expression
Rule 92    variable -> direct_variable
Rule 93    variable -> pointer direct_variable
Rule 94    specifier_qualifier_list -> type specifier_qualifier_list_orempty
Rule 95    direct_variable -> identifier
Rule 96    direct_variable -> direct_variable [ assignable_expression_orempty ]
Rule 97    direct_variable -> direct_variable ( parameter_list )
Rule 98    direct_variable -> direct_variable ( identifier_list_orempty )
Rule 99    external_declaration -> function_definition
Rule 100   external_declaration -> declaration
Rule 101   expression -> assignable_expression
Rule 102   expression -> expression , assignable_expression
Rule 103   expression_statement -> expression_orempty ;
Rule 104   function_definition -> type variable declaration_list_orempty funcbody_statement
Rule 105   parameter_list -> parameter_declaration
Rule 106   parameter_list -> parameter_list , parameter_declaration
Rule 107   parameter_declaration -> type variable
Rule 108   uscd_expression -> unit_expression
Rule 109   uscd_expression -> uscd_expression [ expression ]
Rule 110   uscd_expression -> uscd_expression ( arg_value_exp_list )
Rule 111   uscd_expression -> uscd_expression ( )
Rule 112   uscd_expression -> uscd_expression PTR_OP identifier
Rule 113   unit_expression -> identifier
Rule 114   unit_expression -> constant
Rule 115   unit_expression -> multiple_string
Rule 116   unit_expression -> ( expression )
Rule 117   branch_statement -> IF ( expression ) statement
Rule 118   branch_statement -> IF ( expression ) statement ELSE statement
Rule 119   loop_statement -> WHILE ( expression ) statement
Rule 120   loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement
Rule 121   loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement
Rule 122   loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement
Rule 123   loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement
Rule 124   statement -> funcbody_statement
Rule 125   statement -> branch_statement
Rule 126   statement -> expression_statement
Rule 127   statement -> loop_statement
Rule 128   statement -> back_statement
Rule 129   struct_specifier -> STRUCT identifier
Rule 130   struct_specifier -> STRUCT { struct_declaration_list }
Rule 131   initializer_list_orempty -> empty
Rule 132   initializer_list_orempty -> initializer_list
Rule 133   struct_specifier -> STRUCT identifier { struct_declaration_list }
Rule 134   struct_declaration_list -> struct_declaration
Rule 135   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 136   struct_declaration -> type struct_variable_list ;
Rule 137   struct_variable_list -> variable
Rule 138   struct_variable_list -> struct_variable_list , variable
Rule 139   pointer -> *
Rule 140   pointer -> * pointer
Rule 141   unary_operator -> &
Rule 142   unary_operator -> *
Rule 143   unary_operator -> +
Rule 144   unary_operator -> -
Rule 145   unary_operator -> ~
Rule 146   unary_operator -> !
Rule 147   self_incdec -> INC_OP
Rule 148   self_incdec -> DEC_OP
Rule 149   unary_expression -> uscd_expression
Rule 150   unary_expression -> unary_operator cast_expression
Rule 151   unary_expression -> self_incdec cast_expression
Rule 152   unary_expression -> cast_expression self_incdec
Rule 153   multiple_string -> STRING_CONST
Rule 154   multiple_string -> multiple_string STRING_CONST
Rule 155   binary_expression -> cast_expression
Rule 156   binary_expression -> binary_expression * binary_expression
Rule 157   binary_expression -> binary_expression / binary_expression
Rule 158   binary_expression -> binary_expression % binary_expression
Rule 159   binary_expression -> binary_expression + binary_expression
Rule 160   binary_expression -> binary_expression - binary_expression
Rule 161   binary_expression -> binary_expression RIGHT_OP binary_expression
Rule 162   binary_expression -> binary_expression LEFT_OP binary_expression
Rule 163   binary_expression -> binary_expression < binary_expression
Rule 164   binary_expression -> binary_expression LTE binary_expression
Rule 165   binary_expression -> binary_expression GTE binary_expression
Rule 166   binary_expression -> binary_expression > binary_expression
Rule 167   binary_expression -> binary_expression EQ_OP binary_expression
Rule 168   binary_expression -> binary_expression NEQ_OP binary_expression
Rule 169   binary_expression -> binary_expression & binary_expression
Rule 170   binary_expression -> binary_expression | binary_expression
Rule 171   binary_expression -> binary_expression ^ binary_expression
Rule 172   binary_expression -> binary_expression AND_OP binary_expression
Rule 173   binary_expression -> binary_expression OR_OP binary_expression
Rule 174   cast_expression -> unary_expression
Rule 175   comment -> COMMENT1
Rule 176   comment -> COMMENT2
Rule 177   cpp_advanced -> ASM
Rule 178   cpp_advanced -> BUILT_IN_FUNCTION
Rule 179   cpp_advanced -> CATCH
Rule 180   cpp_advanced -> CLASS
Rule 181   cpp_advanced -> COMMENT2
Rule 182   cpp_advanced -> CONST_CAST
Rule 183   cpp_advanced -> DELETE
Rule 184   cpp_advanced -> DYNAMIC_CAST
Rule 185   cpp_advanced -> EXPLICIT
Rule 186   cpp_advanced -> EXPORT
Rule 187   cpp_advanced -> FRIEND
Rule 188   cpp_advanced -> MUTABLE
Rule 189   cpp_advanced -> NAMESPACE
Rule 190   cpp_advanced -> NEW
Rule 191   cpp_advanced -> OPERATOR
Rule 192   cpp_advanced -> VIRTUAL
Rule 193   cpp_advanced -> AUTO
Rule 194   cpp_advanced -> CONST
Rule 195   cpp_advanced -> DO
Rule 196   cpp_advanced -> ENUM
Rule 197   cpp_advanced -> EXTERN
Rule 198   cpp_advanced -> FOR
Rule 199   cpp_advanced -> STATIC
Rule 200   cpp_advanced -> UNION
Rule 201   cpp_advanced -> VOLATILE
Rule 202   cpp_advanced -> RESTRICT
Rule 203   cpp_advanced -> REGISTER
Rule 204   cpp_advanced -> INLINE
Rule 205   cpp_advanced -> GOTO
Rule 206   cpp_advanced -> TYPEDEF
Rule 207   cpp_advanced -> SWITCH
Rule 208   cpp_advanced -> CASE
Rule 209   cpp_advanced -> INC_OP
Rule 210   cpp_advanced -> DEC_OP
Rule 211   cpp_advanced -> DEFAULT

Terminals, with rules where they appear

!                    : 146
%                    : 158
&                    : 141 169
(                    : 97 98 110 111 116 117 118 119 120 121 122 123
)                    : 97 98 110 111 116 117 118 119 120 121 122 123
*                    : 139 140 142 156
+                    : 143 159
,                    : 9 11 15 43 67 102 106 138
-                    : 144 160
/                    : 157
:                    : 86
;                    : 37 47 48 49 50 103 120 120 121 121 122 122 123 123 136
<                    : 163
=                    : 13 55 123
>                    : 166
?                    : 86
ADD_ASG              : 59
AND_ASG              : 63
AND_OP               : 172
ASM                  : 177
AUTO                 : 193
BOOL                 : 27
BOOL_CONST           : 90
BREAK                : 47
BUILT_IN_FUNCTION    : 178
CASE                 : 208
CATCH                : 179
CHAR                 : 32
CHAR_CONST           : 88
CLASS                : 180
COMMENT1             : 175
COMMENT2             : 176 181
CONST                : 194
CONST_CAST           : 182
CONTINUE             : 48
DEC_OP               : 148 210
DEFAULT              : 211
DELETE               : 183
DIV_ASG              : 57
DO                   : 195
DOUBLE               : 26
DYNAMIC_CAST         : 184
ELSE                 : 118
ENUM                 : 196
EQ_OP                : 167
EXPLICIT             : 185
EXPORT               : 186
EXTERN               : 197
FLOAT                : 25
FLOAT_CONST          : 89
FOR                  : 120 121 122 123 198
FRIEND               : 187
GOTO                 : 205
GTE                  : 165
ID                   : 44
IF                   : 117 118
INC_OP               : 147 209
INLINE               : 204
INT                  : 29
INTEGER_CONST        : 87
LEFT_ASG             : 61
LEFT_OP              : 162
LONG                 : 31
LTE                  : 164
MOD_ASG              : 58
MUL_ASG              : 56
MUTABLE              : 188
NAMESPACE            : 189
NEQ_OP               : 168
NEW                  : 190
OPERATOR             : 191
OR_ASG               : 65
OR_OP                : 173
PRIVATE              : 
PROTECTED            : 
PTR_OP               : 112
PUBLIC               : 
REGISTER             : 203
REINTERPRET_CAST     : 
RESTRICT             : 202
RETURN               : 49 50
RIGHT_ASG            : 62
RIGHT_OP             : 161
SHORT                : 30
SIGNED               : 33
SIZEOF               : 46
STATIC               : 199
STATIC_CAST          : 
STRING_CONST         : 153 154
STRUCT               : 129 130 133
SUB_ASG              : 60
SWITCH               : 207
TEMPLATE             : 
THIS                 : 
THROW                : 
TRY                  : 
TYPEDEF              : 206
TYPEID               : 
TYPENAME             : 
UNION                : 200
UNSIGNED             : 34
USING                : 
VIRTUAL              : 192
VOID                 : 24
VOLATILE             : 201
WHILE                : 119
XOR_ASG              : 64
[                    : 96 109
]                    : 96 109
^                    : 171
error                : 
{                    : 8 9 83 130 133
|                    : 170
}                    : 8 9 83 130 133
~                    : 145

Nonterminals, with rules where they appear

arg_value_exp_list   : 67 110
assign_operator      : 69
assignable_expression : 7 54 66 67 69 101 102
assignable_expression_orempty : 96
back_statement       : 128
binary_expression    : 84 156 156 157 157 158 158 159 159 160 160 161 161 162 162 163 163 164 164 165 165 166 166 167 167 168 168 169 169 170 170 171 171 172 172 173 173
block_item           : 79 80
block_item_list      : 71 80
block_item_list_orempty : 83
branch_statement     : 125
cast_expression      : 150 151 152 155
comment              : 5 78
conditional_expression : 68 91
constant             : 114
constant_expression  : 73
constant_expression_orempty : 
cpp_advanced         : 
declaration          : 38 39 76 100
declaration_list     : 36 39
declaration_list_orempty : 104
declorcom            : 3 4
direct_variable      : 92 93 96 97 98
empty                : 2 35 40 51 53 70 72 74 81 122 131
expression           : 50 82 86 86 86 102 109 116 117 118 119 121 123
expression_orempty   : 103 120 120 121 121 122 122 123 123
expression_statement : 126
external_declaration : 6
funcbody_statement   : 104 124
function_definition  : 99
identifier           : 42 43 95 112 113 129 133
identifier_list      : 41 43
identifier_list_orempty : 98
initializer          : 10 11 13
initializer_list     : 9 11 132
initializer_list_orempty : 8
inlinefunc           : 45
loop_statement       : 127
multiple_string      : 115 154
parameter_declaration : 105 106 120 123
parameter_list       : 97 106
part                 : 1 3
pointer              : 93 140
self_incdec          : 151 152
specifier_qualifier_list : 75
specifier_qualifier_list_orempty : 94
start                : 0
statement            : 77 117 118 118 119 120 121 122 123
struct_declaration   : 134 135
struct_declaration_list : 130 133 135
struct_specifier     : 28
struct_variable_list : 136 138
ternary_expression   : 85
type                 : 37 94 104 107 136
type_specifier       : 
type_specifier_can_unsigned : 17 20 22
type_specifier_cannot_unsigned : 18 21
unary_expression     : 69 174
unary_operator       : 150
unit_expression      : 108
uorus                : 19 20 23
uscd_expression      : 109 110 111 112 149
variable             : 12 13 104 107 137 138
variable_initable    : 14 15
variable_initable_list : 15 52
variable_initable_list_orempty : 37

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . part
    (2) start -> . empty
    (3) part -> . part declorcom
    (4) part -> . declorcom
    (16) empty -> .
    (5) declorcom -> . comment
    (6) declorcom -> . external_declaration
    (175) comment -> . COMMENT1
    (176) comment -> . COMMENT2
    (99) external_declaration -> . function_definition
    (100) external_declaration -> . declaration
    (104) function_definition -> . type variable declaration_list_orempty funcbody_statement
    (37) declaration -> . type variable_initable_list_orempty ;
    (17) type -> . type_specifier_can_unsigned
    (18) type -> . type_specifier_cannot_unsigned
    (19) type -> . uorus
    (20) type -> . uorus type_specifier_can_unsigned
    (29) type_specifier_can_unsigned -> . INT
    (30) type_specifier_can_unsigned -> . SHORT
    (31) type_specifier_can_unsigned -> . LONG
    (32) type_specifier_can_unsigned -> . CHAR
    (24) type_specifier_cannot_unsigned -> . VOID
    (25) type_specifier_cannot_unsigned -> . FLOAT
    (26) type_specifier_cannot_unsigned -> . DOUBLE
    (27) type_specifier_cannot_unsigned -> . BOOL
    (28) type_specifier_cannot_unsigned -> . struct_specifier
    (33) uorus -> . SIGNED
    (34) uorus -> . UNSIGNED
    (129) struct_specifier -> . STRUCT identifier
    (130) struct_specifier -> . STRUCT { struct_declaration_list }
    (133) struct_specifier -> . STRUCT identifier { struct_declaration_list }

    $end            reduce using rule 16 (empty -> .)
    COMMENT1        shift and go to state 7
    COMMENT2        shift and go to state 8
    INT             shift and go to state 15
    SHORT           shift and go to state 16
    LONG            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    BOOL            shift and go to state 22
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    STRUCT          shift and go to state 26

    start                          shift and go to state 1
    part                           shift and go to state 2
    empty                          shift and go to state 3
    declorcom                      shift and go to state 4
    comment                        shift and go to state 5
    external_declaration           shift and go to state 6
    function_definition            shift and go to state 9
    declaration                    shift and go to state 10
    type                           shift and go to state 11
    type_specifier_can_unsigned    shift and go to state 12
    type_specifier_cannot_unsigned shift and go to state 13
    uorus                          shift and go to state 14
    struct_specifier               shift and go to state 23

state 1

    (0) S' -> start .



state 2

    (1) start -> part .
    (3) part -> part . declorcom
    (5) declorcom -> . comment
    (6) declorcom -> . external_declaration
    (175) comment -> . COMMENT1
    (176) comment -> . COMMENT2
    (99) external_declaration -> . function_definition
    (100) external_declaration -> . declaration
    (104) function_definition -> . type variable declaration_list_orempty funcbody_statement
    (37) declaration -> . type variable_initable_list_orempty ;
    (17) type -> . type_specifier_can_unsigned
    (18) type -> . type_specifier_cannot_unsigned
    (19) type -> . uorus
    (20) type -> . uorus type_specifier_can_unsigned
    (29) type_specifier_can_unsigned -> . INT
    (30) type_specifier_can_unsigned -> . SHORT
    (31) type_specifier_can_unsigned -> . LONG
    (32) type_specifier_can_unsigned -> . CHAR
    (24) type_specifier_cannot_unsigned -> . VOID
    (25) type_specifier_cannot_unsigned -> . FLOAT
    (26) type_specifier_cannot_unsigned -> . DOUBLE
    (27) type_specifier_cannot_unsigned -> . BOOL
    (28) type_specifier_cannot_unsigned -> . struct_specifier
    (33) uorus -> . SIGNED
    (34) uorus -> . UNSIGNED
    (129) struct_specifier -> . STRUCT identifier
    (130) struct_specifier -> . STRUCT { struct_declaration_list }
    (133) struct_specifier -> . STRUCT identifier { struct_declaration_list }

    $end            reduce using rule 1 (start -> part .)
    COMMENT1        shift and go to state 7
    COMMENT2        shift and go to state 8
    INT             shift and go to state 15
    SHORT           shift and go to state 16
    LONG            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    BOOL            shift and go to state 22
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    STRUCT          shift and go to state 26

    declorcom                      shift and go to state 27
    comment                        shift and go to state 5
    external_declaration           shift and go to state 6
    function_definition            shift and go to state 9
    declaration                    shift and go to state 10
    type                           shift and go to state 11
    type_specifier_can_unsigned    shift and go to state 12
    type_specifier_cannot_unsigned shift and go to state 13
    uorus                          shift and go to state 14
    struct_specifier               shift and go to state 23

state 3

    (2) start -> empty .

    $end            reduce using rule 2 (start -> empty .)


state 4

    (4) part -> declorcom .

    COMMENT1        reduce using rule 4 (part -> declorcom .)
    COMMENT2        reduce using rule 4 (part -> declorcom .)
    INT             reduce using rule 4 (part -> declorcom .)
    SHORT           reduce using rule 4 (part -> declorcom .)
    LONG            reduce using rule 4 (part -> declorcom .)
    CHAR            reduce using rule 4 (part -> declorcom .)
    VOID            reduce using rule 4 (part -> declorcom .)
    FLOAT           reduce using rule 4 (part -> declorcom .)
    DOUBLE          reduce using rule 4 (part -> declorcom .)
    BOOL            reduce using rule 4 (part -> declorcom .)
    SIGNED          reduce using rule 4 (part -> declorcom .)
    UNSIGNED        reduce using rule 4 (part -> declorcom .)
    STRUCT          reduce using rule 4 (part -> declorcom .)
    $end            reduce using rule 4 (part -> declorcom .)


state 5

    (5) declorcom -> comment .

    COMMENT1        reduce using rule 5 (declorcom -> comment .)
    COMMENT2        reduce using rule 5 (declorcom -> comment .)
    INT             reduce using rule 5 (declorcom -> comment .)
    SHORT           reduce using rule 5 (declorcom -> comment .)
    LONG            reduce using rule 5 (declorcom -> comment .)
    CHAR            reduce using rule 5 (declorcom -> comment .)
    VOID            reduce using rule 5 (declorcom -> comment .)
    FLOAT           reduce using rule 5 (declorcom -> comment .)
    DOUBLE          reduce using rule 5 (declorcom -> comment .)
    BOOL            reduce using rule 5 (declorcom -> comment .)
    SIGNED          reduce using rule 5 (declorcom -> comment .)
    UNSIGNED        reduce using rule 5 (declorcom -> comment .)
    STRUCT          reduce using rule 5 (declorcom -> comment .)
    $end            reduce using rule 5 (declorcom -> comment .)


state 6

    (6) declorcom -> external_declaration .

    COMMENT1        reduce using rule 6 (declorcom -> external_declaration .)
    COMMENT2        reduce using rule 6 (declorcom -> external_declaration .)
    INT             reduce using rule 6 (declorcom -> external_declaration .)
    SHORT           reduce using rule 6 (declorcom -> external_declaration .)
    LONG            reduce using rule 6 (declorcom -> external_declaration .)
    CHAR            reduce using rule 6 (declorcom -> external_declaration .)
    VOID            reduce using rule 6 (declorcom -> external_declaration .)
    FLOAT           reduce using rule 6 (declorcom -> external_declaration .)
    DOUBLE          reduce using rule 6 (declorcom -> external_declaration .)
    BOOL            reduce using rule 6 (declorcom -> external_declaration .)
    SIGNED          reduce using rule 6 (declorcom -> external_declaration .)
    UNSIGNED        reduce using rule 6 (declorcom -> external_declaration .)
    STRUCT          reduce using rule 6 (declorcom -> external_declaration .)
    $end            reduce using rule 6 (declorcom -> external_declaration .)


state 7

    (175) comment -> COMMENT1 .

    COMMENT1        reduce using rule 175 (comment -> COMMENT1 .)
    COMMENT2        reduce using rule 175 (comment -> COMMENT1 .)
    INT             reduce using rule 175 (comment -> COMMENT1 .)
    SHORT           reduce using rule 175 (comment -> COMMENT1 .)
    LONG            reduce using rule 175 (comment -> COMMENT1 .)
    CHAR            reduce using rule 175 (comment -> COMMENT1 .)
    VOID            reduce using rule 175 (comment -> COMMENT1 .)
    FLOAT           reduce using rule 175 (comment -> COMMENT1 .)
    DOUBLE          reduce using rule 175 (comment -> COMMENT1 .)
    BOOL            reduce using rule 175 (comment -> COMMENT1 .)
    SIGNED          reduce using rule 175 (comment -> COMMENT1 .)
    UNSIGNED        reduce using rule 175 (comment -> COMMENT1 .)
    STRUCT          reduce using rule 175 (comment -> COMMENT1 .)
    $end            reduce using rule 175 (comment -> COMMENT1 .)
    {               reduce using rule 175 (comment -> COMMENT1 .)
    IF              reduce using rule 175 (comment -> COMMENT1 .)
    WHILE           reduce using rule 175 (comment -> COMMENT1 .)
    FOR             reduce using rule 175 (comment -> COMMENT1 .)
    BREAK           reduce using rule 175 (comment -> COMMENT1 .)
    CONTINUE        reduce using rule 175 (comment -> COMMENT1 .)
    RETURN          reduce using rule 175 (comment -> COMMENT1 .)
    &               reduce using rule 175 (comment -> COMMENT1 .)
    *               reduce using rule 175 (comment -> COMMENT1 .)
    +               reduce using rule 175 (comment -> COMMENT1 .)
    -               reduce using rule 175 (comment -> COMMENT1 .)
    ~               reduce using rule 175 (comment -> COMMENT1 .)
    !               reduce using rule 175 (comment -> COMMENT1 .)
    INC_OP          reduce using rule 175 (comment -> COMMENT1 .)
    DEC_OP          reduce using rule 175 (comment -> COMMENT1 .)
    (               reduce using rule 175 (comment -> COMMENT1 .)
    ID              reduce using rule 175 (comment -> COMMENT1 .)
    INTEGER_CONST   reduce using rule 175 (comment -> COMMENT1 .)
    CHAR_CONST      reduce using rule 175 (comment -> COMMENT1 .)
    FLOAT_CONST     reduce using rule 175 (comment -> COMMENT1 .)
    BOOL_CONST      reduce using rule 175 (comment -> COMMENT1 .)
    STRING_CONST    reduce using rule 175 (comment -> COMMENT1 .)
    SIZEOF          reduce using rule 175 (comment -> COMMENT1 .)
    ;               reduce using rule 175 (comment -> COMMENT1 .)
    }               reduce using rule 175 (comment -> COMMENT1 .)


state 8

    (176) comment -> COMMENT2 .

    COMMENT1        reduce using rule 176 (comment -> COMMENT2 .)
    COMMENT2        reduce using rule 176 (comment -> COMMENT2 .)
    INT             reduce using rule 176 (comment -> COMMENT2 .)
    SHORT           reduce using rule 176 (comment -> COMMENT2 .)
    LONG            reduce using rule 176 (comment -> COMMENT2 .)
    CHAR            reduce using rule 176 (comment -> COMMENT2 .)
    VOID            reduce using rule 176 (comment -> COMMENT2 .)
    FLOAT           reduce using rule 176 (comment -> COMMENT2 .)
    DOUBLE          reduce using rule 176 (comment -> COMMENT2 .)
    BOOL            reduce using rule 176 (comment -> COMMENT2 .)
    SIGNED          reduce using rule 176 (comment -> COMMENT2 .)
    UNSIGNED        reduce using rule 176 (comment -> COMMENT2 .)
    STRUCT          reduce using rule 176 (comment -> COMMENT2 .)
    $end            reduce using rule 176 (comment -> COMMENT2 .)
    {               reduce using rule 176 (comment -> COMMENT2 .)
    IF              reduce using rule 176 (comment -> COMMENT2 .)
    WHILE           reduce using rule 176 (comment -> COMMENT2 .)
    FOR             reduce using rule 176 (comment -> COMMENT2 .)
    BREAK           reduce using rule 176 (comment -> COMMENT2 .)
    CONTINUE        reduce using rule 176 (comment -> COMMENT2 .)
    RETURN          reduce using rule 176 (comment -> COMMENT2 .)
    &               reduce using rule 176 (comment -> COMMENT2 .)
    *               reduce using rule 176 (comment -> COMMENT2 .)
    +               reduce using rule 176 (comment -> COMMENT2 .)
    -               reduce using rule 176 (comment -> COMMENT2 .)
    ~               reduce using rule 176 (comment -> COMMENT2 .)
    !               reduce using rule 176 (comment -> COMMENT2 .)
    INC_OP          reduce using rule 176 (comment -> COMMENT2 .)
    DEC_OP          reduce using rule 176 (comment -> COMMENT2 .)
    (               reduce using rule 176 (comment -> COMMENT2 .)
    ID              reduce using rule 176 (comment -> COMMENT2 .)
    INTEGER_CONST   reduce using rule 176 (comment -> COMMENT2 .)
    CHAR_CONST      reduce using rule 176 (comment -> COMMENT2 .)
    FLOAT_CONST     reduce using rule 176 (comment -> COMMENT2 .)
    BOOL_CONST      reduce using rule 176 (comment -> COMMENT2 .)
    STRING_CONST    reduce using rule 176 (comment -> COMMENT2 .)
    SIZEOF          reduce using rule 176 (comment -> COMMENT2 .)
    ;               reduce using rule 176 (comment -> COMMENT2 .)
    }               reduce using rule 176 (comment -> COMMENT2 .)


state 9

    (99) external_declaration -> function_definition .

    COMMENT1        reduce using rule 99 (external_declaration -> function_definition .)
    COMMENT2        reduce using rule 99 (external_declaration -> function_definition .)
    INT             reduce using rule 99 (external_declaration -> function_definition .)
    SHORT           reduce using rule 99 (external_declaration -> function_definition .)
    LONG            reduce using rule 99 (external_declaration -> function_definition .)
    CHAR            reduce using rule 99 (external_declaration -> function_definition .)
    VOID            reduce using rule 99 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 99 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 99 (external_declaration -> function_definition .)
    BOOL            reduce using rule 99 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 99 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 99 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 99 (external_declaration -> function_definition .)
    $end            reduce using rule 99 (external_declaration -> function_definition .)


state 10

    (100) external_declaration -> declaration .

    COMMENT1        reduce using rule 100 (external_declaration -> declaration .)
    COMMENT2        reduce using rule 100 (external_declaration -> declaration .)
    INT             reduce using rule 100 (external_declaration -> declaration .)
    SHORT           reduce using rule 100 (external_declaration -> declaration .)
    LONG            reduce using rule 100 (external_declaration -> declaration .)
    CHAR            reduce using rule 100 (external_declaration -> declaration .)
    VOID            reduce using rule 100 (external_declaration -> declaration .)
    FLOAT           reduce using rule 100 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 100 (external_declaration -> declaration .)
    BOOL            reduce using rule 100 (external_declaration -> declaration .)
    SIGNED          reduce using rule 100 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 100 (external_declaration -> declaration .)
    STRUCT          reduce using rule 100 (external_declaration -> declaration .)
    $end            reduce using rule 100 (external_declaration -> declaration .)


state 11

    (104) function_definition -> type . variable declaration_list_orempty funcbody_statement
    (37) declaration -> type . variable_initable_list_orempty ;
    (92) variable -> . direct_variable
    (93) variable -> . pointer direct_variable
    (51) variable_initable_list_orempty -> . empty
    (52) variable_initable_list_orempty -> . variable_initable_list
    (95) direct_variable -> . identifier
    (96) direct_variable -> . direct_variable [ assignable_expression_orempty ]
    (97) direct_variable -> . direct_variable ( parameter_list )
    (98) direct_variable -> . direct_variable ( identifier_list_orempty )
    (139) pointer -> . *
    (140) pointer -> . * pointer
    (16) empty -> .
    (14) variable_initable_list -> . variable_initable
    (15) variable_initable_list -> . variable_initable_list , variable_initable
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (12) variable_initable -> . variable
    (13) variable_initable -> . variable = initializer
    (46) inlinefunc -> . SIZEOF

    *               shift and go to state 35
    ;               reduce using rule 16 (empty -> .)
    ID              shift and go to state 37
    SIZEOF          shift and go to state 39

    variable                       shift and go to state 28
    variable_initable_list_orempty shift and go to state 29
    direct_variable                shift and go to state 30
    pointer                        shift and go to state 31
    empty                          shift and go to state 32
    variable_initable_list         shift and go to state 33
    identifier                     shift and go to state 34
    variable_initable              shift and go to state 36
    inlinefunc                     shift and go to state 38

state 12

    (17) type -> type_specifier_can_unsigned .

    *               reduce using rule 17 (type -> type_specifier_can_unsigned .)
    ID              reduce using rule 17 (type -> type_specifier_can_unsigned .)
    SIZEOF          reduce using rule 17 (type -> type_specifier_can_unsigned .)
    ;               reduce using rule 17 (type -> type_specifier_can_unsigned .)


state 13

    (18) type -> type_specifier_cannot_unsigned .

    *               reduce using rule 18 (type -> type_specifier_cannot_unsigned .)
    ID              reduce using rule 18 (type -> type_specifier_cannot_unsigned .)
    SIZEOF          reduce using rule 18 (type -> type_specifier_cannot_unsigned .)
    ;               reduce using rule 18 (type -> type_specifier_cannot_unsigned .)


state 14

    (19) type -> uorus .
    (20) type -> uorus . type_specifier_can_unsigned
    (29) type_specifier_can_unsigned -> . INT
    (30) type_specifier_can_unsigned -> . SHORT
    (31) type_specifier_can_unsigned -> . LONG
    (32) type_specifier_can_unsigned -> . CHAR

    *               reduce using rule 19 (type -> uorus .)
    ID              reduce using rule 19 (type -> uorus .)
    SIZEOF          reduce using rule 19 (type -> uorus .)
    ;               reduce using rule 19 (type -> uorus .)
    INT             shift and go to state 15
    SHORT           shift and go to state 16
    LONG            shift and go to state 17
    CHAR            shift and go to state 18

    type_specifier_can_unsigned    shift and go to state 40

state 15

    (29) type_specifier_can_unsigned -> INT .

    *               reduce using rule 29 (type_specifier_can_unsigned -> INT .)
    ID              reduce using rule 29 (type_specifier_can_unsigned -> INT .)
    SIZEOF          reduce using rule 29 (type_specifier_can_unsigned -> INT .)
    ;               reduce using rule 29 (type_specifier_can_unsigned -> INT .)


state 16

    (30) type_specifier_can_unsigned -> SHORT .

    *               reduce using rule 30 (type_specifier_can_unsigned -> SHORT .)
    ID              reduce using rule 30 (type_specifier_can_unsigned -> SHORT .)
    SIZEOF          reduce using rule 30 (type_specifier_can_unsigned -> SHORT .)
    ;               reduce using rule 30 (type_specifier_can_unsigned -> SHORT .)


state 17

    (31) type_specifier_can_unsigned -> LONG .

    *               reduce using rule 31 (type_specifier_can_unsigned -> LONG .)
    ID              reduce using rule 31 (type_specifier_can_unsigned -> LONG .)
    SIZEOF          reduce using rule 31 (type_specifier_can_unsigned -> LONG .)
    ;               reduce using rule 31 (type_specifier_can_unsigned -> LONG .)


state 18

    (32) type_specifier_can_unsigned -> CHAR .

    *               reduce using rule 32 (type_specifier_can_unsigned -> CHAR .)
    ID              reduce using rule 32 (type_specifier_can_unsigned -> CHAR .)
    SIZEOF          reduce using rule 32 (type_specifier_can_unsigned -> CHAR .)
    ;               reduce using rule 32 (type_specifier_can_unsigned -> CHAR .)


state 19

    (24) type_specifier_cannot_unsigned -> VOID .

    *               reduce using rule 24 (type_specifier_cannot_unsigned -> VOID .)
    ID              reduce using rule 24 (type_specifier_cannot_unsigned -> VOID .)
    SIZEOF          reduce using rule 24 (type_specifier_cannot_unsigned -> VOID .)
    ;               reduce using rule 24 (type_specifier_cannot_unsigned -> VOID .)


state 20

    (25) type_specifier_cannot_unsigned -> FLOAT .

    *               reduce using rule 25 (type_specifier_cannot_unsigned -> FLOAT .)
    ID              reduce using rule 25 (type_specifier_cannot_unsigned -> FLOAT .)
    SIZEOF          reduce using rule 25 (type_specifier_cannot_unsigned -> FLOAT .)
    ;               reduce using rule 25 (type_specifier_cannot_unsigned -> FLOAT .)


state 21

    (26) type_specifier_cannot_unsigned -> DOUBLE .

    *               reduce using rule 26 (type_specifier_cannot_unsigned -> DOUBLE .)
    ID              reduce using rule 26 (type_specifier_cannot_unsigned -> DOUBLE .)
    SIZEOF          reduce using rule 26 (type_specifier_cannot_unsigned -> DOUBLE .)
    ;               reduce using rule 26 (type_specifier_cannot_unsigned -> DOUBLE .)


state 22

    (27) type_specifier_cannot_unsigned -> BOOL .

    *               reduce using rule 27 (type_specifier_cannot_unsigned -> BOOL .)
    ID              reduce using rule 27 (type_specifier_cannot_unsigned -> BOOL .)
    SIZEOF          reduce using rule 27 (type_specifier_cannot_unsigned -> BOOL .)
    ;               reduce using rule 27 (type_specifier_cannot_unsigned -> BOOL .)


state 23

    (28) type_specifier_cannot_unsigned -> struct_specifier .

    *               reduce using rule 28 (type_specifier_cannot_unsigned -> struct_specifier .)
    ID              reduce using rule 28 (type_specifier_cannot_unsigned -> struct_specifier .)
    SIZEOF          reduce using rule 28 (type_specifier_cannot_unsigned -> struct_specifier .)
    ;               reduce using rule 28 (type_specifier_cannot_unsigned -> struct_specifier .)


state 24

    (33) uorus -> SIGNED .

    INT             reduce using rule 33 (uorus -> SIGNED .)
    SHORT           reduce using rule 33 (uorus -> SIGNED .)
    LONG            reduce using rule 33 (uorus -> SIGNED .)
    CHAR            reduce using rule 33 (uorus -> SIGNED .)
    *               reduce using rule 33 (uorus -> SIGNED .)
    ID              reduce using rule 33 (uorus -> SIGNED .)
    SIZEOF          reduce using rule 33 (uorus -> SIGNED .)
    ;               reduce using rule 33 (uorus -> SIGNED .)


state 25

    (34) uorus -> UNSIGNED .

    INT             reduce using rule 34 (uorus -> UNSIGNED .)
    SHORT           reduce using rule 34 (uorus -> UNSIGNED .)
    LONG            reduce using rule 34 (uorus -> UNSIGNED .)
    CHAR            reduce using rule 34 (uorus -> UNSIGNED .)
    *               reduce using rule 34 (uorus -> UNSIGNED .)
    ID              reduce using rule 34 (uorus -> UNSIGNED .)
    SIZEOF          reduce using rule 34 (uorus -> UNSIGNED .)
    ;               reduce using rule 34 (uorus -> UNSIGNED .)


state 26

    (129) struct_specifier -> STRUCT . identifier
    (130) struct_specifier -> STRUCT . { struct_declaration_list }
    (133) struct_specifier -> STRUCT . identifier { struct_declaration_list }
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (46) inlinefunc -> . SIZEOF

    {               shift and go to state 42
    ID              shift and go to state 37
    SIZEOF          shift and go to state 39

    identifier                     shift and go to state 41
    inlinefunc                     shift and go to state 38

state 27

    (3) part -> part declorcom .

    COMMENT1        reduce using rule 3 (part -> part declorcom .)
    COMMENT2        reduce using rule 3 (part -> part declorcom .)
    INT             reduce using rule 3 (part -> part declorcom .)
    SHORT           reduce using rule 3 (part -> part declorcom .)
    LONG            reduce using rule 3 (part -> part declorcom .)
    CHAR            reduce using rule 3 (part -> part declorcom .)
    VOID            reduce using rule 3 (part -> part declorcom .)
    FLOAT           reduce using rule 3 (part -> part declorcom .)
    DOUBLE          reduce using rule 3 (part -> part declorcom .)
    BOOL            reduce using rule 3 (part -> part declorcom .)
    SIGNED          reduce using rule 3 (part -> part declorcom .)
    UNSIGNED        reduce using rule 3 (part -> part declorcom .)
    STRUCT          reduce using rule 3 (part -> part declorcom .)
    $end            reduce using rule 3 (part -> part declorcom .)


state 28

    (104) function_definition -> type variable . declaration_list_orempty funcbody_statement
    (12) variable_initable -> variable .
    (13) variable_initable -> variable . = initializer
    (35) declaration_list_orempty -> . empty
    (36) declaration_list_orempty -> . declaration_list
    (16) empty -> .
    (38) declaration_list -> . declaration
    (39) declaration_list -> . declaration_list declaration
    (37) declaration -> . type variable_initable_list_orempty ;
    (17) type -> . type_specifier_can_unsigned
    (18) type -> . type_specifier_cannot_unsigned
    (19) type -> . uorus
    (20) type -> . uorus type_specifier_can_unsigned
    (29) type_specifier_can_unsigned -> . INT
    (30) type_specifier_can_unsigned -> . SHORT
    (31) type_specifier_can_unsigned -> . LONG
    (32) type_specifier_can_unsigned -> . CHAR
    (24) type_specifier_cannot_unsigned -> . VOID
    (25) type_specifier_cannot_unsigned -> . FLOAT
    (26) type_specifier_cannot_unsigned -> . DOUBLE
    (27) type_specifier_cannot_unsigned -> . BOOL
    (28) type_specifier_cannot_unsigned -> . struct_specifier
    (33) uorus -> . SIGNED
    (34) uorus -> . UNSIGNED
    (129) struct_specifier -> . STRUCT identifier
    (130) struct_specifier -> . STRUCT { struct_declaration_list }
    (133) struct_specifier -> . STRUCT identifier { struct_declaration_list }

    ,               reduce using rule 12 (variable_initable -> variable .)
    ;               reduce using rule 12 (variable_initable -> variable .)
    =               shift and go to state 45
    {               reduce using rule 16 (empty -> .)
    INT             shift and go to state 15
    SHORT           shift and go to state 16
    LONG            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    BOOL            shift and go to state 22
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    STRUCT          shift and go to state 26

    type                           shift and go to state 43
    declaration_list_orempty       shift and go to state 44
    empty                          shift and go to state 46
    declaration_list               shift and go to state 47
    declaration                    shift and go to state 48
    type_specifier_can_unsigned    shift and go to state 12
    type_specifier_cannot_unsigned shift and go to state 13
    uorus                          shift and go to state 14
    struct_specifier               shift and go to state 23

state 29

    (37) declaration -> type variable_initable_list_orempty . ;

    ;               shift and go to state 49


state 30

    (92) variable -> direct_variable .
    (96) direct_variable -> direct_variable . [ assignable_expression_orempty ]
    (97) direct_variable -> direct_variable . ( parameter_list )
    (98) direct_variable -> direct_variable . ( identifier_list_orempty )

    =               reduce using rule 92 (variable -> direct_variable .)
    INT             reduce using rule 92 (variable -> direct_variable .)
    SHORT           reduce using rule 92 (variable -> direct_variable .)
    LONG            reduce using rule 92 (variable -> direct_variable .)
    CHAR            reduce using rule 92 (variable -> direct_variable .)
    VOID            reduce using rule 92 (variable -> direct_variable .)
    FLOAT           reduce using rule 92 (variable -> direct_variable .)
    DOUBLE          reduce using rule 92 (variable -> direct_variable .)
    BOOL            reduce using rule 92 (variable -> direct_variable .)
    SIGNED          reduce using rule 92 (variable -> direct_variable .)
    UNSIGNED        reduce using rule 92 (variable -> direct_variable .)
    STRUCT          reduce using rule 92 (variable -> direct_variable .)
    {               reduce using rule 92 (variable -> direct_variable .)
    ,               reduce using rule 92 (variable -> direct_variable .)
    ;               reduce using rule 92 (variable -> direct_variable .)
    )               reduce using rule 92 (variable -> direct_variable .)
    [               shift and go to state 50
    (               shift and go to state 51


state 31

    (93) variable -> pointer . direct_variable
    (95) direct_variable -> . identifier
    (96) direct_variable -> . direct_variable [ assignable_expression_orempty ]
    (97) direct_variable -> . direct_variable ( parameter_list )
    (98) direct_variable -> . direct_variable ( identifier_list_orempty )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (46) inlinefunc -> . SIZEOF

    ID              shift and go to state 37
    SIZEOF          shift and go to state 39

    direct_variable                shift and go to state 52
    identifier                     shift and go to state 34
    inlinefunc                     shift and go to state 38

state 32

    (51) variable_initable_list_orempty -> empty .

    ;               reduce using rule 51 (variable_initable_list_orempty -> empty .)


state 33

    (52) variable_initable_list_orempty -> variable_initable_list .
    (15) variable_initable_list -> variable_initable_list . , variable_initable

    ;               reduce using rule 52 (variable_initable_list_orempty -> variable_initable_list .)
    ,               shift and go to state 53


state 34

    (95) direct_variable -> identifier .

    [               reduce using rule 95 (direct_variable -> identifier .)
    (               reduce using rule 95 (direct_variable -> identifier .)
    =               reduce using rule 95 (direct_variable -> identifier .)
    INT             reduce using rule 95 (direct_variable -> identifier .)
    SHORT           reduce using rule 95 (direct_variable -> identifier .)
    LONG            reduce using rule 95 (direct_variable -> identifier .)
    CHAR            reduce using rule 95 (direct_variable -> identifier .)
    VOID            reduce using rule 95 (direct_variable -> identifier .)
    FLOAT           reduce using rule 95 (direct_variable -> identifier .)
    DOUBLE          reduce using rule 95 (direct_variable -> identifier .)
    BOOL            reduce using rule 95 (direct_variable -> identifier .)
    SIGNED          reduce using rule 95 (direct_variable -> identifier .)
    UNSIGNED        reduce using rule 95 (direct_variable -> identifier .)
    STRUCT          reduce using rule 95 (direct_variable -> identifier .)
    {               reduce using rule 95 (direct_variable -> identifier .)
    ,               reduce using rule 95 (direct_variable -> identifier .)
    ;               reduce using rule 95 (direct_variable -> identifier .)
    )               reduce using rule 95 (direct_variable -> identifier .)


state 35

    (139) pointer -> * .
    (140) pointer -> * . pointer
    (139) pointer -> . *
    (140) pointer -> . * pointer

    ID              reduce using rule 139 (pointer -> * .)
    SIZEOF          reduce using rule 139 (pointer -> * .)
    *               shift and go to state 35

    pointer                        shift and go to state 54

state 36

    (14) variable_initable_list -> variable_initable .

    ,               reduce using rule 14 (variable_initable_list -> variable_initable .)
    ;               reduce using rule 14 (variable_initable_list -> variable_initable .)


state 37

    (44) identifier -> ID .

    [               reduce using rule 44 (identifier -> ID .)
    (               reduce using rule 44 (identifier -> ID .)
    =               reduce using rule 44 (identifier -> ID .)
    INT             reduce using rule 44 (identifier -> ID .)
    SHORT           reduce using rule 44 (identifier -> ID .)
    LONG            reduce using rule 44 (identifier -> ID .)
    CHAR            reduce using rule 44 (identifier -> ID .)
    VOID            reduce using rule 44 (identifier -> ID .)
    FLOAT           reduce using rule 44 (identifier -> ID .)
    DOUBLE          reduce using rule 44 (identifier -> ID .)
    BOOL            reduce using rule 44 (identifier -> ID .)
    SIGNED          reduce using rule 44 (identifier -> ID .)
    UNSIGNED        reduce using rule 44 (identifier -> ID .)
    STRUCT          reduce using rule 44 (identifier -> ID .)
    {               reduce using rule 44 (identifier -> ID .)
    ,               reduce using rule 44 (identifier -> ID .)
    ;               reduce using rule 44 (identifier -> ID .)
    *               reduce using rule 44 (identifier -> ID .)
    ID              reduce using rule 44 (identifier -> ID .)
    SIZEOF          reduce using rule 44 (identifier -> ID .)
    )               reduce using rule 44 (identifier -> ID .)
    PTR_OP          reduce using rule 44 (identifier -> ID .)
    MUL_ASG         reduce using rule 44 (identifier -> ID .)
    DIV_ASG         reduce using rule 44 (identifier -> ID .)
    MOD_ASG         reduce using rule 44 (identifier -> ID .)
    ADD_ASG         reduce using rule 44 (identifier -> ID .)
    SUB_ASG         reduce using rule 44 (identifier -> ID .)
    LEFT_ASG        reduce using rule 44 (identifier -> ID .)
    RIGHT_ASG       reduce using rule 44 (identifier -> ID .)
    AND_ASG         reduce using rule 44 (identifier -> ID .)
    XOR_ASG         reduce using rule 44 (identifier -> ID .)
    OR_ASG          reduce using rule 44 (identifier -> ID .)
    INC_OP          reduce using rule 44 (identifier -> ID .)
    DEC_OP          reduce using rule 44 (identifier -> ID .)
    /               reduce using rule 44 (identifier -> ID .)
    %               reduce using rule 44 (identifier -> ID .)
    +               reduce using rule 44 (identifier -> ID .)
    -               reduce using rule 44 (identifier -> ID .)
    RIGHT_OP        reduce using rule 44 (identifier -> ID .)
    LEFT_OP         reduce using rule 44 (identifier -> ID .)
    <               reduce using rule 44 (identifier -> ID .)
    LTE             reduce using rule 44 (identifier -> ID .)
    GTE             reduce using rule 44 (identifier -> ID .)
    >               reduce using rule 44 (identifier -> ID .)
    EQ_OP           reduce using rule 44 (identifier -> ID .)
    NEQ_OP          reduce using rule 44 (identifier -> ID .)
    &               reduce using rule 44 (identifier -> ID .)
    |               reduce using rule 44 (identifier -> ID .)
    ^               reduce using rule 44 (identifier -> ID .)
    AND_OP          reduce using rule 44 (identifier -> ID .)
    OR_OP           reduce using rule 44 (identifier -> ID .)
    ?               reduce using rule 44 (identifier -> ID .)
    ]               reduce using rule 44 (identifier -> ID .)
    }               reduce using rule 44 (identifier -> ID .)
    :               reduce using rule 44 (identifier -> ID .)


state 38

    (45) identifier -> inlinefunc .

    [               reduce using rule 45 (identifier -> inlinefunc .)
    (               reduce using rule 45 (identifier -> inlinefunc .)
    =               reduce using rule 45 (identifier -> inlinefunc .)
    INT             reduce using rule 45 (identifier -> inlinefunc .)
    SHORT           reduce using rule 45 (identifier -> inlinefunc .)
    LONG            reduce using rule 45 (identifier -> inlinefunc .)
    CHAR            reduce using rule 45 (identifier -> inlinefunc .)
    VOID            reduce using rule 45 (identifier -> inlinefunc .)
    FLOAT           reduce using rule 45 (identifier -> inlinefunc .)
    DOUBLE          reduce using rule 45 (identifier -> inlinefunc .)
    BOOL            reduce using rule 45 (identifier -> inlinefunc .)
    SIGNED          reduce using rule 45 (identifier -> inlinefunc .)
    UNSIGNED        reduce using rule 45 (identifier -> inlinefunc .)
    STRUCT          reduce using rule 45 (identifier -> inlinefunc .)
    {               reduce using rule 45 (identifier -> inlinefunc .)
    ,               reduce using rule 45 (identifier -> inlinefunc .)
    ;               reduce using rule 45 (identifier -> inlinefunc .)
    *               reduce using rule 45 (identifier -> inlinefunc .)
    ID              reduce using rule 45 (identifier -> inlinefunc .)
    SIZEOF          reduce using rule 45 (identifier -> inlinefunc .)
    )               reduce using rule 45 (identifier -> inlinefunc .)
    PTR_OP          reduce using rule 45 (identifier -> inlinefunc .)
    MUL_ASG         reduce using rule 45 (identifier -> inlinefunc .)
    DIV_ASG         reduce using rule 45 (identifier -> inlinefunc .)
    MOD_ASG         reduce using rule 45 (identifier -> inlinefunc .)
    ADD_ASG         reduce using rule 45 (identifier -> inlinefunc .)
    SUB_ASG         reduce using rule 45 (identifier -> inlinefunc .)
    LEFT_ASG        reduce using rule 45 (identifier -> inlinefunc .)
    RIGHT_ASG       reduce using rule 45 (identifier -> inlinefunc .)
    AND_ASG         reduce using rule 45 (identifier -> inlinefunc .)
    XOR_ASG         reduce using rule 45 (identifier -> inlinefunc .)
    OR_ASG          reduce using rule 45 (identifier -> inlinefunc .)
    INC_OP          reduce using rule 45 (identifier -> inlinefunc .)
    DEC_OP          reduce using rule 45 (identifier -> inlinefunc .)
    /               reduce using rule 45 (identifier -> inlinefunc .)
    %               reduce using rule 45 (identifier -> inlinefunc .)
    +               reduce using rule 45 (identifier -> inlinefunc .)
    -               reduce using rule 45 (identifier -> inlinefunc .)
    RIGHT_OP        reduce using rule 45 (identifier -> inlinefunc .)
    LEFT_OP         reduce using rule 45 (identifier -> inlinefunc .)
    <               reduce using rule 45 (identifier -> inlinefunc .)
    LTE             reduce using rule 45 (identifier -> inlinefunc .)
    GTE             reduce using rule 45 (identifier -> inlinefunc .)
    >               reduce using rule 45 (identifier -> inlinefunc .)
    EQ_OP           reduce using rule 45 (identifier -> inlinefunc .)
    NEQ_OP          reduce using rule 45 (identifier -> inlinefunc .)
    &               reduce using rule 45 (identifier -> inlinefunc .)
    |               reduce using rule 45 (identifier -> inlinefunc .)
    ^               reduce using rule 45 (identifier -> inlinefunc .)
    AND_OP          reduce using rule 45 (identifier -> inlinefunc .)
    OR_OP           reduce using rule 45 (identifier -> inlinefunc .)
    ?               reduce using rule 45 (identifier -> inlinefunc .)
    ]               reduce using rule 45 (identifier -> inlinefunc .)
    }               reduce using rule 45 (identifier -> inlinefunc .)
    :               reduce using rule 45 (identifier -> inlinefunc .)


state 39

    (46) inlinefunc -> SIZEOF .

    [               reduce using rule 46 (inlinefunc -> SIZEOF .)
    (               reduce using rule 46 (inlinefunc -> SIZEOF .)
    =               reduce using rule 46 (inlinefunc -> SIZEOF .)
    INT             reduce using rule 46 (inlinefunc -> SIZEOF .)
    SHORT           reduce using rule 46 (inlinefunc -> SIZEOF .)
    LONG            reduce using rule 46 (inlinefunc -> SIZEOF .)
    CHAR            reduce using rule 46 (inlinefunc -> SIZEOF .)
    VOID            reduce using rule 46 (inlinefunc -> SIZEOF .)
    FLOAT           reduce using rule 46 (inlinefunc -> SIZEOF .)
    DOUBLE          reduce using rule 46 (inlinefunc -> SIZEOF .)
    BOOL            reduce using rule 46 (inlinefunc -> SIZEOF .)
    SIGNED          reduce using rule 46 (inlinefunc -> SIZEOF .)
    UNSIGNED        reduce using rule 46 (inlinefunc -> SIZEOF .)
    STRUCT          reduce using rule 46 (inlinefunc -> SIZEOF .)
    {               reduce using rule 46 (inlinefunc -> SIZEOF .)
    ,               reduce using rule 46 (inlinefunc -> SIZEOF .)
    ;               reduce using rule 46 (inlinefunc -> SIZEOF .)
    *               reduce using rule 46 (inlinefunc -> SIZEOF .)
    ID              reduce using rule 46 (inlinefunc -> SIZEOF .)
    SIZEOF          reduce using rule 46 (inlinefunc -> SIZEOF .)
    )               reduce using rule 46 (inlinefunc -> SIZEOF .)
    PTR_OP          reduce using rule 46 (inlinefunc -> SIZEOF .)
    MUL_ASG         reduce using rule 46 (inlinefunc -> SIZEOF .)
    DIV_ASG         reduce using rule 46 (inlinefunc -> SIZEOF .)
    MOD_ASG         reduce using rule 46 (inlinefunc -> SIZEOF .)
    ADD_ASG         reduce using rule 46 (inlinefunc -> SIZEOF .)
    SUB_ASG         reduce using rule 46 (inlinefunc -> SIZEOF .)
    LEFT_ASG        reduce using rule 46 (inlinefunc -> SIZEOF .)
    RIGHT_ASG       reduce using rule 46 (inlinefunc -> SIZEOF .)
    AND_ASG         reduce using rule 46 (inlinefunc -> SIZEOF .)
    XOR_ASG         reduce using rule 46 (inlinefunc -> SIZEOF .)
    OR_ASG          reduce using rule 46 (inlinefunc -> SIZEOF .)
    INC_OP          reduce using rule 46 (inlinefunc -> SIZEOF .)
    DEC_OP          reduce using rule 46 (inlinefunc -> SIZEOF .)
    /               reduce using rule 46 (inlinefunc -> SIZEOF .)
    %               reduce using rule 46 (inlinefunc -> SIZEOF .)
    +               reduce using rule 46 (inlinefunc -> SIZEOF .)
    -               reduce using rule 46 (inlinefunc -> SIZEOF .)
    RIGHT_OP        reduce using rule 46 (inlinefunc -> SIZEOF .)
    LEFT_OP         reduce using rule 46 (inlinefunc -> SIZEOF .)
    <               reduce using rule 46 (inlinefunc -> SIZEOF .)
    LTE             reduce using rule 46 (inlinefunc -> SIZEOF .)
    GTE             reduce using rule 46 (inlinefunc -> SIZEOF .)
    >               reduce using rule 46 (inlinefunc -> SIZEOF .)
    EQ_OP           reduce using rule 46 (inlinefunc -> SIZEOF .)
    NEQ_OP          reduce using rule 46 (inlinefunc -> SIZEOF .)
    &               reduce using rule 46 (inlinefunc -> SIZEOF .)
    |               reduce using rule 46 (inlinefunc -> SIZEOF .)
    ^               reduce using rule 46 (inlinefunc -> SIZEOF .)
    AND_OP          reduce using rule 46 (inlinefunc -> SIZEOF .)
    OR_OP           reduce using rule 46 (inlinefunc -> SIZEOF .)
    ?               reduce using rule 46 (inlinefunc -> SIZEOF .)
    ]               reduce using rule 46 (inlinefunc -> SIZEOF .)
    }               reduce using rule 46 (inlinefunc -> SIZEOF .)
    :               reduce using rule 46 (inlinefunc -> SIZEOF .)


state 40

    (20) type -> uorus type_specifier_can_unsigned .

    *               reduce using rule 20 (type -> uorus type_specifier_can_unsigned .)
    ID              reduce using rule 20 (type -> uorus type_specifier_can_unsigned .)
    SIZEOF          reduce using rule 20 (type -> uorus type_specifier_can_unsigned .)
    ;               reduce using rule 20 (type -> uorus type_specifier_can_unsigned .)


state 41

    (129) struct_specifier -> STRUCT identifier .
    (133) struct_specifier -> STRUCT identifier . { struct_declaration_list }

    *               reduce using rule 129 (struct_specifier -> STRUCT identifier .)
    ID              reduce using rule 129 (struct_specifier -> STRUCT identifier .)
    SIZEOF          reduce using rule 129 (struct_specifier -> STRUCT identifier .)
    ;               reduce using rule 129 (struct_specifier -> STRUCT identifier .)
    {               shift and go to state 55


state 42

    (130) struct_specifier -> STRUCT { . struct_declaration_list }
    (134) struct_declaration_list -> . struct_declaration
    (135) struct_declaration_list -> . struct_declaration_list struct_declaration
    (136) struct_declaration -> . type struct_variable_list ;
    (17) type -> . type_specifier_can_unsigned
    (18) type -> . type_specifier_cannot_unsigned
    (19) type -> . uorus
    (20) type -> . uorus type_specifier_can_unsigned
    (29) type_specifier_can_unsigned -> . INT
    (30) type_specifier_can_unsigned -> . SHORT
    (31) type_specifier_can_unsigned -> . LONG
    (32) type_specifier_can_unsigned -> . CHAR
    (24) type_specifier_cannot_unsigned -> . VOID
    (25) type_specifier_cannot_unsigned -> . FLOAT
    (26) type_specifier_cannot_unsigned -> . DOUBLE
    (27) type_specifier_cannot_unsigned -> . BOOL
    (28) type_specifier_cannot_unsigned -> . struct_specifier
    (33) uorus -> . SIGNED
    (34) uorus -> . UNSIGNED
    (129) struct_specifier -> . STRUCT identifier
    (130) struct_specifier -> . STRUCT { struct_declaration_list }
    (133) struct_specifier -> . STRUCT identifier { struct_declaration_list }

    INT             shift and go to state 15
    SHORT           shift and go to state 16
    LONG            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    BOOL            shift and go to state 22
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    STRUCT          shift and go to state 26

    struct_declaration_list        shift and go to state 56
    struct_declaration             shift and go to state 57
    type                           shift and go to state 58
    type_specifier_can_unsigned    shift and go to state 12
    type_specifier_cannot_unsigned shift and go to state 13
    uorus                          shift and go to state 14
    struct_specifier               shift and go to state 23

state 43

    (37) declaration -> type . variable_initable_list_orempty ;
    (51) variable_initable_list_orempty -> . empty
    (52) variable_initable_list_orempty -> . variable_initable_list
    (16) empty -> .
    (14) variable_initable_list -> . variable_initable
    (15) variable_initable_list -> . variable_initable_list , variable_initable
    (12) variable_initable -> . variable
    (13) variable_initable -> . variable = initializer
    (92) variable -> . direct_variable
    (93) variable -> . pointer direct_variable
    (95) direct_variable -> . identifier
    (96) direct_variable -> . direct_variable [ assignable_expression_orempty ]
    (97) direct_variable -> . direct_variable ( parameter_list )
    (98) direct_variable -> . direct_variable ( identifier_list_orempty )
    (139) pointer -> . *
    (140) pointer -> . * pointer
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (46) inlinefunc -> . SIZEOF

    ;               reduce using rule 16 (empty -> .)
    *               shift and go to state 35
    ID              shift and go to state 37
    SIZEOF          shift and go to state 39

    variable_initable_list_orempty shift and go to state 29
    empty                          shift and go to state 32
    variable_initable_list         shift and go to state 33
    variable_initable              shift and go to state 36
    variable                       shift and go to state 59
    direct_variable                shift and go to state 30
    pointer                        shift and go to state 31
    identifier                     shift and go to state 34
    inlinefunc                     shift and go to state 38

state 44

    (104) function_definition -> type variable declaration_list_orempty . funcbody_statement
    (83) funcbody_statement -> . { block_item_list_orempty }

    {               shift and go to state 61

    funcbody_statement             shift and go to state 60

state 45

    (13) variable_initable -> variable = . initializer
    (7) initializer -> . assignable_expression
    (8) initializer -> . { initializer_list_orempty }
    (9) initializer -> . { initializer_list , }
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    {               shift and go to state 64
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    initializer                    shift and go to state 62
    assignable_expression          shift and go to state 63
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    expression                     shift and go to state 77
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 46

    (35) declaration_list_orempty -> empty .

    {               reduce using rule 35 (declaration_list_orempty -> empty .)


state 47

    (36) declaration_list_orempty -> declaration_list .
    (39) declaration_list -> declaration_list . declaration
    (37) declaration -> . type variable_initable_list_orempty ;
    (17) type -> . type_specifier_can_unsigned
    (18) type -> . type_specifier_cannot_unsigned
    (19) type -> . uorus
    (20) type -> . uorus type_specifier_can_unsigned
    (29) type_specifier_can_unsigned -> . INT
    (30) type_specifier_can_unsigned -> . SHORT
    (31) type_specifier_can_unsigned -> . LONG
    (32) type_specifier_can_unsigned -> . CHAR
    (24) type_specifier_cannot_unsigned -> . VOID
    (25) type_specifier_cannot_unsigned -> . FLOAT
    (26) type_specifier_cannot_unsigned -> . DOUBLE
    (27) type_specifier_cannot_unsigned -> . BOOL
    (28) type_specifier_cannot_unsigned -> . struct_specifier
    (33) uorus -> . SIGNED
    (34) uorus -> . UNSIGNED
    (129) struct_specifier -> . STRUCT identifier
    (130) struct_specifier -> . STRUCT { struct_declaration_list }
    (133) struct_specifier -> . STRUCT identifier { struct_declaration_list }

    {               reduce using rule 36 (declaration_list_orempty -> declaration_list .)
    INT             shift and go to state 15
    SHORT           shift and go to state 16
    LONG            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    BOOL            shift and go to state 22
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    STRUCT          shift and go to state 26

    declaration                    shift and go to state 92
    type                           shift and go to state 43
    type_specifier_can_unsigned    shift and go to state 12
    type_specifier_cannot_unsigned shift and go to state 13
    uorus                          shift and go to state 14
    struct_specifier               shift and go to state 23

state 48

    (38) declaration_list -> declaration .

    INT             reduce using rule 38 (declaration_list -> declaration .)
    SHORT           reduce using rule 38 (declaration_list -> declaration .)
    LONG            reduce using rule 38 (declaration_list -> declaration .)
    CHAR            reduce using rule 38 (declaration_list -> declaration .)
    VOID            reduce using rule 38 (declaration_list -> declaration .)
    FLOAT           reduce using rule 38 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 38 (declaration_list -> declaration .)
    BOOL            reduce using rule 38 (declaration_list -> declaration .)
    SIGNED          reduce using rule 38 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 38 (declaration_list -> declaration .)
    STRUCT          reduce using rule 38 (declaration_list -> declaration .)
    {               reduce using rule 38 (declaration_list -> declaration .)


state 49

    (37) declaration -> type variable_initable_list_orempty ; .

    COMMENT1        reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    COMMENT2        reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    INT             reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    SHORT           reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    LONG            reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    CHAR            reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    VOID            reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    FLOAT           reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    DOUBLE          reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    BOOL            reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    SIGNED          reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    UNSIGNED        reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    STRUCT          reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    $end            reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    {               reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    IF              reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    WHILE           reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    FOR             reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    BREAK           reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    CONTINUE        reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    RETURN          reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    &               reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    *               reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    +               reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    -               reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    ~               reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    !               reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    INC_OP          reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    DEC_OP          reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    (               reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    ID              reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    INTEGER_CONST   reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    CHAR_CONST      reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    FLOAT_CONST     reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    BOOL_CONST      reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    STRING_CONST    reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    SIZEOF          reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    ;               reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)
    }               reduce using rule 37 (declaration -> type variable_initable_list_orempty ; .)


state 50

    (96) direct_variable -> direct_variable [ . assignable_expression_orempty ]
    (53) assignable_expression_orempty -> . empty
    (54) assignable_expression_orempty -> . assignable_expression
    (16) empty -> .
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    ]               reduce using rule 16 (empty -> .)
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    assignable_expression_orempty  shift and go to state 93
    empty                          shift and go to state 94
    assignable_expression          shift and go to state 95
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    expression                     shift and go to state 77
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 51

    (97) direct_variable -> direct_variable ( . parameter_list )
    (98) direct_variable -> direct_variable ( . identifier_list_orempty )
    (105) parameter_list -> . parameter_declaration
    (106) parameter_list -> . parameter_list , parameter_declaration
    (40) identifier_list_orempty -> . empty
    (41) identifier_list_orempty -> . identifier_list
    (107) parameter_declaration -> . type variable
    (16) empty -> .
    (42) identifier_list -> . identifier
    (43) identifier_list -> . identifier_list , identifier
    (17) type -> . type_specifier_can_unsigned
    (18) type -> . type_specifier_cannot_unsigned
    (19) type -> . uorus
    (20) type -> . uorus type_specifier_can_unsigned
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (29) type_specifier_can_unsigned -> . INT
    (30) type_specifier_can_unsigned -> . SHORT
    (31) type_specifier_can_unsigned -> . LONG
    (32) type_specifier_can_unsigned -> . CHAR
    (24) type_specifier_cannot_unsigned -> . VOID
    (25) type_specifier_cannot_unsigned -> . FLOAT
    (26) type_specifier_cannot_unsigned -> . DOUBLE
    (27) type_specifier_cannot_unsigned -> . BOOL
    (28) type_specifier_cannot_unsigned -> . struct_specifier
    (33) uorus -> . SIGNED
    (34) uorus -> . UNSIGNED
    (46) inlinefunc -> . SIZEOF
    (129) struct_specifier -> . STRUCT identifier
    (130) struct_specifier -> . STRUCT { struct_declaration_list }
    (133) struct_specifier -> . STRUCT identifier { struct_declaration_list }

    )               reduce using rule 16 (empty -> .)
    ID              shift and go to state 37
    INT             shift and go to state 15
    SHORT           shift and go to state 16
    LONG            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    BOOL            shift and go to state 22
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    SIZEOF          shift and go to state 39
    STRUCT          shift and go to state 26

    parameter_list                 shift and go to state 96
    identifier_list_orempty        shift and go to state 97
    parameter_declaration          shift and go to state 98
    empty                          shift and go to state 99
    identifier_list                shift and go to state 100
    type                           shift and go to state 101
    identifier                     shift and go to state 102
    type_specifier_can_unsigned    shift and go to state 12
    type_specifier_cannot_unsigned shift and go to state 13
    uorus                          shift and go to state 14
    inlinefunc                     shift and go to state 38
    struct_specifier               shift and go to state 23

state 52

    (93) variable -> pointer direct_variable .
    (96) direct_variable -> direct_variable . [ assignable_expression_orempty ]
    (97) direct_variable -> direct_variable . ( parameter_list )
    (98) direct_variable -> direct_variable . ( identifier_list_orempty )

    =               reduce using rule 93 (variable -> pointer direct_variable .)
    INT             reduce using rule 93 (variable -> pointer direct_variable .)
    SHORT           reduce using rule 93 (variable -> pointer direct_variable .)
    LONG            reduce using rule 93 (variable -> pointer direct_variable .)
    CHAR            reduce using rule 93 (variable -> pointer direct_variable .)
    VOID            reduce using rule 93 (variable -> pointer direct_variable .)
    FLOAT           reduce using rule 93 (variable -> pointer direct_variable .)
    DOUBLE          reduce using rule 93 (variable -> pointer direct_variable .)
    BOOL            reduce using rule 93 (variable -> pointer direct_variable .)
    SIGNED          reduce using rule 93 (variable -> pointer direct_variable .)
    UNSIGNED        reduce using rule 93 (variable -> pointer direct_variable .)
    STRUCT          reduce using rule 93 (variable -> pointer direct_variable .)
    {               reduce using rule 93 (variable -> pointer direct_variable .)
    ,               reduce using rule 93 (variable -> pointer direct_variable .)
    ;               reduce using rule 93 (variable -> pointer direct_variable .)
    )               reduce using rule 93 (variable -> pointer direct_variable .)
    [               shift and go to state 50
    (               shift and go to state 51


state 53

    (15) variable_initable_list -> variable_initable_list , . variable_initable
    (12) variable_initable -> . variable
    (13) variable_initable -> . variable = initializer
    (92) variable -> . direct_variable
    (93) variable -> . pointer direct_variable
    (95) direct_variable -> . identifier
    (96) direct_variable -> . direct_variable [ assignable_expression_orempty ]
    (97) direct_variable -> . direct_variable ( parameter_list )
    (98) direct_variable -> . direct_variable ( identifier_list_orempty )
    (139) pointer -> . *
    (140) pointer -> . * pointer
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (46) inlinefunc -> . SIZEOF

    *               shift and go to state 35
    ID              shift and go to state 37
    SIZEOF          shift and go to state 39

    variable_initable              shift and go to state 103
    variable                       shift and go to state 59
    direct_variable                shift and go to state 30
    pointer                        shift and go to state 31
    identifier                     shift and go to state 34
    inlinefunc                     shift and go to state 38

state 54

    (140) pointer -> * pointer .

    ID              reduce using rule 140 (pointer -> * pointer .)
    SIZEOF          reduce using rule 140 (pointer -> * pointer .)


state 55

    (133) struct_specifier -> STRUCT identifier { . struct_declaration_list }
    (134) struct_declaration_list -> . struct_declaration
    (135) struct_declaration_list -> . struct_declaration_list struct_declaration
    (136) struct_declaration -> . type struct_variable_list ;
    (17) type -> . type_specifier_can_unsigned
    (18) type -> . type_specifier_cannot_unsigned
    (19) type -> . uorus
    (20) type -> . uorus type_specifier_can_unsigned
    (29) type_specifier_can_unsigned -> . INT
    (30) type_specifier_can_unsigned -> . SHORT
    (31) type_specifier_can_unsigned -> . LONG
    (32) type_specifier_can_unsigned -> . CHAR
    (24) type_specifier_cannot_unsigned -> . VOID
    (25) type_specifier_cannot_unsigned -> . FLOAT
    (26) type_specifier_cannot_unsigned -> . DOUBLE
    (27) type_specifier_cannot_unsigned -> . BOOL
    (28) type_specifier_cannot_unsigned -> . struct_specifier
    (33) uorus -> . SIGNED
    (34) uorus -> . UNSIGNED
    (129) struct_specifier -> . STRUCT identifier
    (130) struct_specifier -> . STRUCT { struct_declaration_list }
    (133) struct_specifier -> . STRUCT identifier { struct_declaration_list }

    INT             shift and go to state 15
    SHORT           shift and go to state 16
    LONG            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    BOOL            shift and go to state 22
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    STRUCT          shift and go to state 26

    struct_declaration_list        shift and go to state 104
    struct_declaration             shift and go to state 57
    type                           shift and go to state 58
    type_specifier_can_unsigned    shift and go to state 12
    type_specifier_cannot_unsigned shift and go to state 13
    uorus                          shift and go to state 14
    struct_specifier               shift and go to state 23

state 56

    (130) struct_specifier -> STRUCT { struct_declaration_list . }
    (135) struct_declaration_list -> struct_declaration_list . struct_declaration
    (136) struct_declaration -> . type struct_variable_list ;
    (17) type -> . type_specifier_can_unsigned
    (18) type -> . type_specifier_cannot_unsigned
    (19) type -> . uorus
    (20) type -> . uorus type_specifier_can_unsigned
    (29) type_specifier_can_unsigned -> . INT
    (30) type_specifier_can_unsigned -> . SHORT
    (31) type_specifier_can_unsigned -> . LONG
    (32) type_specifier_can_unsigned -> . CHAR
    (24) type_specifier_cannot_unsigned -> . VOID
    (25) type_specifier_cannot_unsigned -> . FLOAT
    (26) type_specifier_cannot_unsigned -> . DOUBLE
    (27) type_specifier_cannot_unsigned -> . BOOL
    (28) type_specifier_cannot_unsigned -> . struct_specifier
    (33) uorus -> . SIGNED
    (34) uorus -> . UNSIGNED
    (129) struct_specifier -> . STRUCT identifier
    (130) struct_specifier -> . STRUCT { struct_declaration_list }
    (133) struct_specifier -> . STRUCT identifier { struct_declaration_list }

    }               shift and go to state 105
    INT             shift and go to state 15
    SHORT           shift and go to state 16
    LONG            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    BOOL            shift and go to state 22
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    STRUCT          shift and go to state 26

    struct_declaration             shift and go to state 106
    type                           shift and go to state 58
    type_specifier_can_unsigned    shift and go to state 12
    type_specifier_cannot_unsigned shift and go to state 13
    uorus                          shift and go to state 14
    struct_specifier               shift and go to state 23

state 57

    (134) struct_declaration_list -> struct_declaration .

    }               reduce using rule 134 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 134 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 134 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 134 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 134 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 134 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 134 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 134 (struct_declaration_list -> struct_declaration .)
    BOOL            reduce using rule 134 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 134 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 134 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 134 (struct_declaration_list -> struct_declaration .)


state 58

    (136) struct_declaration -> type . struct_variable_list ;
    (137) struct_variable_list -> . variable
    (138) struct_variable_list -> . struct_variable_list , variable
    (92) variable -> . direct_variable
    (93) variable -> . pointer direct_variable
    (95) direct_variable -> . identifier
    (96) direct_variable -> . direct_variable [ assignable_expression_orempty ]
    (97) direct_variable -> . direct_variable ( parameter_list )
    (98) direct_variable -> . direct_variable ( identifier_list_orempty )
    (139) pointer -> . *
    (140) pointer -> . * pointer
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (46) inlinefunc -> . SIZEOF

    *               shift and go to state 35
    ID              shift and go to state 37
    SIZEOF          shift and go to state 39

    struct_variable_list           shift and go to state 107
    variable                       shift and go to state 108
    direct_variable                shift and go to state 30
    pointer                        shift and go to state 31
    identifier                     shift and go to state 34
    inlinefunc                     shift and go to state 38

state 59

    (12) variable_initable -> variable .
    (13) variable_initable -> variable . = initializer

    ,               reduce using rule 12 (variable_initable -> variable .)
    ;               reduce using rule 12 (variable_initable -> variable .)
    =               shift and go to state 45


state 60

    (104) function_definition -> type variable declaration_list_orempty funcbody_statement .

    COMMENT1        reduce using rule 104 (function_definition -> type variable declaration_list_orempty funcbody_statement .)
    COMMENT2        reduce using rule 104 (function_definition -> type variable declaration_list_orempty funcbody_statement .)
    INT             reduce using rule 104 (function_definition -> type variable declaration_list_orempty funcbody_statement .)
    SHORT           reduce using rule 104 (function_definition -> type variable declaration_list_orempty funcbody_statement .)
    LONG            reduce using rule 104 (function_definition -> type variable declaration_list_orempty funcbody_statement .)
    CHAR            reduce using rule 104 (function_definition -> type variable declaration_list_orempty funcbody_statement .)
    VOID            reduce using rule 104 (function_definition -> type variable declaration_list_orempty funcbody_statement .)
    FLOAT           reduce using rule 104 (function_definition -> type variable declaration_list_orempty funcbody_statement .)
    DOUBLE          reduce using rule 104 (function_definition -> type variable declaration_list_orempty funcbody_statement .)
    BOOL            reduce using rule 104 (function_definition -> type variable declaration_list_orempty funcbody_statement .)
    SIGNED          reduce using rule 104 (function_definition -> type variable declaration_list_orempty funcbody_statement .)
    UNSIGNED        reduce using rule 104 (function_definition -> type variable declaration_list_orempty funcbody_statement .)
    STRUCT          reduce using rule 104 (function_definition -> type variable declaration_list_orempty funcbody_statement .)
    $end            reduce using rule 104 (function_definition -> type variable declaration_list_orempty funcbody_statement .)


state 61

    (83) funcbody_statement -> { . block_item_list_orempty }
    (70) block_item_list_orempty -> . empty
    (71) block_item_list_orempty -> . block_item_list
    (16) empty -> .
    (79) block_item_list -> . block_item
    (80) block_item_list -> . block_item_list block_item
    (76) block_item -> . declaration
    (77) block_item -> . statement
    (78) block_item -> . comment
    (37) declaration -> . type variable_initable_list_orempty ;
    (124) statement -> . funcbody_statement
    (125) statement -> . branch_statement
    (126) statement -> . expression_statement
    (127) statement -> . loop_statement
    (128) statement -> . back_statement
    (175) comment -> . COMMENT1
    (176) comment -> . COMMENT2
    (17) type -> . type_specifier_can_unsigned
    (18) type -> . type_specifier_cannot_unsigned
    (19) type -> . uorus
    (20) type -> . uorus type_specifier_can_unsigned
    (83) funcbody_statement -> . { block_item_list_orempty }
    (117) branch_statement -> . IF ( expression ) statement
    (118) branch_statement -> . IF ( expression ) statement ELSE statement
    (103) expression_statement -> . expression_orempty ;
    (119) loop_statement -> . WHILE ( expression ) statement
    (120) loop_statement -> . FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement
    (121) loop_statement -> . FOR ( expression ; expression_orempty ; expression_orempty ) statement
    (122) loop_statement -> . FOR ( empty ; expression_orempty ; expression_orempty ) statement
    (123) loop_statement -> . FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement
    (47) back_statement -> . BREAK ;
    (48) back_statement -> . CONTINUE ;
    (49) back_statement -> . RETURN ;
    (50) back_statement -> . RETURN expression ;
    (29) type_specifier_can_unsigned -> . INT
    (30) type_specifier_can_unsigned -> . SHORT
    (31) type_specifier_can_unsigned -> . LONG
    (32) type_specifier_can_unsigned -> . CHAR
    (24) type_specifier_cannot_unsigned -> . VOID
    (25) type_specifier_cannot_unsigned -> . FLOAT
    (26) type_specifier_cannot_unsigned -> . DOUBLE
    (27) type_specifier_cannot_unsigned -> . BOOL
    (28) type_specifier_cannot_unsigned -> . struct_specifier
    (33) uorus -> . SIGNED
    (34) uorus -> . UNSIGNED
    (81) expression_orempty -> . empty
    (82) expression_orempty -> . expression
    (129) struct_specifier -> . STRUCT identifier
    (130) struct_specifier -> . STRUCT { struct_declaration_list }
    (133) struct_specifier -> . STRUCT identifier { struct_declaration_list }
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    }               reduce using rule 16 (empty -> .)
    ;               reduce using rule 16 (empty -> .)
    COMMENT1        shift and go to state 7
    COMMENT2        shift and go to state 8
    {               shift and go to state 61
    IF              shift and go to state 121
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    CONTINUE        shift and go to state 127
    RETURN          shift and go to state 128
    INT             shift and go to state 15
    SHORT           shift and go to state 16
    LONG            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    BOOL            shift and go to state 22
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    STRUCT          shift and go to state 26
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    block_item_list_orempty        shift and go to state 109
    empty                          shift and go to state 110
    block_item_list                shift and go to state 111
    block_item                     shift and go to state 112
    declaration                    shift and go to state 113
    statement                      shift and go to state 114
    comment                        shift and go to state 115
    type                           shift and go to state 43
    funcbody_statement             shift and go to state 116
    branch_statement               shift and go to state 117
    expression_statement           shift and go to state 118
    loop_statement                 shift and go to state 119
    back_statement                 shift and go to state 120
    type_specifier_can_unsigned    shift and go to state 12
    type_specifier_cannot_unsigned shift and go to state 13
    uorus                          shift and go to state 14
    expression                     shift and go to state 122
    expression_orempty             shift and go to state 123
    struct_specifier               shift and go to state 23
    identifier                     shift and go to state 80
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 62

    (13) variable_initable -> variable = initializer .

    ,               reduce using rule 13 (variable_initable -> variable = initializer .)
    ;               reduce using rule 13 (variable_initable -> variable = initializer .)


state 63

    (7) initializer -> assignable_expression .
    (101) expression -> assignable_expression .

  ! reduce/reduce conflict for , resolved using rule 7 (initializer -> assignable_expression .)
    ,               reduce using rule 7 (initializer -> assignable_expression .)
    ;               reduce using rule 7 (initializer -> assignable_expression .)
    }               reduce using rule 7 (initializer -> assignable_expression .)
    ?               reduce using rule 101 (expression -> assignable_expression .)

  ! ,               [ reduce using rule 101 (expression -> assignable_expression .) ]


state 64

    (8) initializer -> { . initializer_list_orempty }
    (9) initializer -> { . initializer_list , }
    (131) initializer_list_orempty -> . empty
    (132) initializer_list_orempty -> . initializer_list
    (10) initializer_list -> . initializer
    (11) initializer_list -> . initializer_list , initializer
    (16) empty -> .
    (7) initializer -> . assignable_expression
    (8) initializer -> . { initializer_list_orempty }
    (9) initializer -> . { initializer_list , }
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    }               reduce using rule 16 (empty -> .)
    {               shift and go to state 64
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    initializer_list_orempty       shift and go to state 130
    initializer_list               shift and go to state 131
    empty                          shift and go to state 132
    initializer                    shift and go to state 133
    assignable_expression          shift and go to state 63
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    expression                     shift and go to state 77
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 65

    (68) assignable_expression -> conditional_expression .

    ,               reduce using rule 68 (assignable_expression -> conditional_expression .)
    ;               reduce using rule 68 (assignable_expression -> conditional_expression .)
    ?               reduce using rule 68 (assignable_expression -> conditional_expression .)
    ]               reduce using rule 68 (assignable_expression -> conditional_expression .)
    }               reduce using rule 68 (assignable_expression -> conditional_expression .)
    )               reduce using rule 68 (assignable_expression -> conditional_expression .)
    :               reduce using rule 68 (assignable_expression -> conditional_expression .)


state 66

    (69) assignable_expression -> unary_expression . assign_operator assignable_expression
    (174) cast_expression -> unary_expression .
    (55) assign_operator -> . =
    (56) assign_operator -> . MUL_ASG
    (57) assign_operator -> . DIV_ASG
    (58) assign_operator -> . MOD_ASG
    (59) assign_operator -> . ADD_ASG
    (60) assign_operator -> . SUB_ASG
    (61) assign_operator -> . LEFT_ASG
    (62) assign_operator -> . RIGHT_ASG
    (63) assign_operator -> . AND_ASG
    (64) assign_operator -> . XOR_ASG
    (65) assign_operator -> . OR_ASG

    INC_OP          reduce using rule 174 (cast_expression -> unary_expression .)
    DEC_OP          reduce using rule 174 (cast_expression -> unary_expression .)
    *               reduce using rule 174 (cast_expression -> unary_expression .)
    /               reduce using rule 174 (cast_expression -> unary_expression .)
    %               reduce using rule 174 (cast_expression -> unary_expression .)
    +               reduce using rule 174 (cast_expression -> unary_expression .)
    -               reduce using rule 174 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 174 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 174 (cast_expression -> unary_expression .)
    <               reduce using rule 174 (cast_expression -> unary_expression .)
    LTE             reduce using rule 174 (cast_expression -> unary_expression .)
    GTE             reduce using rule 174 (cast_expression -> unary_expression .)
    >               reduce using rule 174 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 174 (cast_expression -> unary_expression .)
    NEQ_OP          reduce using rule 174 (cast_expression -> unary_expression .)
    &               reduce using rule 174 (cast_expression -> unary_expression .)
    |               reduce using rule 174 (cast_expression -> unary_expression .)
    ^               reduce using rule 174 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 174 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 174 (cast_expression -> unary_expression .)
    ,               reduce using rule 174 (cast_expression -> unary_expression .)
    ;               reduce using rule 174 (cast_expression -> unary_expression .)
    ?               reduce using rule 174 (cast_expression -> unary_expression .)
    ]               reduce using rule 174 (cast_expression -> unary_expression .)
    }               reduce using rule 174 (cast_expression -> unary_expression .)
    )               reduce using rule 174 (cast_expression -> unary_expression .)
    :               reduce using rule 174 (cast_expression -> unary_expression .)
    =               shift and go to state 135
    MUL_ASG         shift and go to state 136
    DIV_ASG         shift and go to state 137
    MOD_ASG         shift and go to state 138
    ADD_ASG         shift and go to state 139
    SUB_ASG         shift and go to state 140
    LEFT_ASG        shift and go to state 141
    RIGHT_ASG       shift and go to state 142
    AND_ASG         shift and go to state 143
    XOR_ASG         shift and go to state 144
    OR_ASG          shift and go to state 145

    assign_operator                shift and go to state 134

state 67

    (84) conditional_expression -> binary_expression .
    (156) binary_expression -> binary_expression . * binary_expression
    (157) binary_expression -> binary_expression . / binary_expression
    (158) binary_expression -> binary_expression . % binary_expression
    (159) binary_expression -> binary_expression . + binary_expression
    (160) binary_expression -> binary_expression . - binary_expression
    (161) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (162) binary_expression -> binary_expression . LEFT_OP binary_expression
    (163) binary_expression -> binary_expression . < binary_expression
    (164) binary_expression -> binary_expression . LTE binary_expression
    (165) binary_expression -> binary_expression . GTE binary_expression
    (166) binary_expression -> binary_expression . > binary_expression
    (167) binary_expression -> binary_expression . EQ_OP binary_expression
    (168) binary_expression -> binary_expression . NEQ_OP binary_expression
    (169) binary_expression -> binary_expression . & binary_expression
    (170) binary_expression -> binary_expression . | binary_expression
    (171) binary_expression -> binary_expression . ^ binary_expression
    (172) binary_expression -> binary_expression . AND_OP binary_expression
    (173) binary_expression -> binary_expression . OR_OP binary_expression

    ,               reduce using rule 84 (conditional_expression -> binary_expression .)
    ;               reduce using rule 84 (conditional_expression -> binary_expression .)
    ?               reduce using rule 84 (conditional_expression -> binary_expression .)
    ]               reduce using rule 84 (conditional_expression -> binary_expression .)
    }               reduce using rule 84 (conditional_expression -> binary_expression .)
    )               reduce using rule 84 (conditional_expression -> binary_expression .)
    :               reduce using rule 84 (conditional_expression -> binary_expression .)
    *               shift and go to state 146
    /               shift and go to state 147
    %               shift and go to state 148
    +               shift and go to state 149
    -               shift and go to state 150
    RIGHT_OP        shift and go to state 151
    LEFT_OP         shift and go to state 152
    <               shift and go to state 153
    LTE             shift and go to state 154
    GTE             shift and go to state 155
    >               shift and go to state 156
    EQ_OP           shift and go to state 157
    NEQ_OP          shift and go to state 158
    &               shift and go to state 159
    |               shift and go to state 160
    ^               shift and go to state 161
    AND_OP          shift and go to state 162
    OR_OP           shift and go to state 163


state 68

    (85) conditional_expression -> ternary_expression .

    ,               reduce using rule 85 (conditional_expression -> ternary_expression .)
    ;               reduce using rule 85 (conditional_expression -> ternary_expression .)
    ?               reduce using rule 85 (conditional_expression -> ternary_expression .)
    ]               reduce using rule 85 (conditional_expression -> ternary_expression .)
    }               reduce using rule 85 (conditional_expression -> ternary_expression .)
    )               reduce using rule 85 (conditional_expression -> ternary_expression .)
    :               reduce using rule 85 (conditional_expression -> ternary_expression .)


state 69

    (149) unary_expression -> uscd_expression .
    (109) uscd_expression -> uscd_expression . [ expression ]
    (110) uscd_expression -> uscd_expression . ( arg_value_exp_list )
    (111) uscd_expression -> uscd_expression . ( )
    (112) uscd_expression -> uscd_expression . PTR_OP identifier

    =               reduce using rule 149 (unary_expression -> uscd_expression .)
    MUL_ASG         reduce using rule 149 (unary_expression -> uscd_expression .)
    DIV_ASG         reduce using rule 149 (unary_expression -> uscd_expression .)
    MOD_ASG         reduce using rule 149 (unary_expression -> uscd_expression .)
    ADD_ASG         reduce using rule 149 (unary_expression -> uscd_expression .)
    SUB_ASG         reduce using rule 149 (unary_expression -> uscd_expression .)
    LEFT_ASG        reduce using rule 149 (unary_expression -> uscd_expression .)
    RIGHT_ASG       reduce using rule 149 (unary_expression -> uscd_expression .)
    AND_ASG         reduce using rule 149 (unary_expression -> uscd_expression .)
    XOR_ASG         reduce using rule 149 (unary_expression -> uscd_expression .)
    OR_ASG          reduce using rule 149 (unary_expression -> uscd_expression .)
    INC_OP          reduce using rule 149 (unary_expression -> uscd_expression .)
    DEC_OP          reduce using rule 149 (unary_expression -> uscd_expression .)
    *               reduce using rule 149 (unary_expression -> uscd_expression .)
    /               reduce using rule 149 (unary_expression -> uscd_expression .)
    %               reduce using rule 149 (unary_expression -> uscd_expression .)
    +               reduce using rule 149 (unary_expression -> uscd_expression .)
    -               reduce using rule 149 (unary_expression -> uscd_expression .)
    RIGHT_OP        reduce using rule 149 (unary_expression -> uscd_expression .)
    LEFT_OP         reduce using rule 149 (unary_expression -> uscd_expression .)
    <               reduce using rule 149 (unary_expression -> uscd_expression .)
    LTE             reduce using rule 149 (unary_expression -> uscd_expression .)
    GTE             reduce using rule 149 (unary_expression -> uscd_expression .)
    >               reduce using rule 149 (unary_expression -> uscd_expression .)
    EQ_OP           reduce using rule 149 (unary_expression -> uscd_expression .)
    NEQ_OP          reduce using rule 149 (unary_expression -> uscd_expression .)
    &               reduce using rule 149 (unary_expression -> uscd_expression .)
    |               reduce using rule 149 (unary_expression -> uscd_expression .)
    ^               reduce using rule 149 (unary_expression -> uscd_expression .)
    AND_OP          reduce using rule 149 (unary_expression -> uscd_expression .)
    OR_OP           reduce using rule 149 (unary_expression -> uscd_expression .)
    ,               reduce using rule 149 (unary_expression -> uscd_expression .)
    ;               reduce using rule 149 (unary_expression -> uscd_expression .)
    ?               reduce using rule 149 (unary_expression -> uscd_expression .)
    ]               reduce using rule 149 (unary_expression -> uscd_expression .)
    }               reduce using rule 149 (unary_expression -> uscd_expression .)
    )               reduce using rule 149 (unary_expression -> uscd_expression .)
    :               reduce using rule 149 (unary_expression -> uscd_expression .)
    [               shift and go to state 164
    (               shift and go to state 165
    PTR_OP          shift and go to state 166


state 70

    (150) unary_expression -> unary_operator . cast_expression
    (174) cast_expression -> . unary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 167
    unary_expression               shift and go to state 168
    uscd_expression                shift and go to state 69
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 71

    (152) unary_expression -> cast_expression . self_incdec
    (155) binary_expression -> cast_expression .
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP

    *               reduce using rule 155 (binary_expression -> cast_expression .)
    /               reduce using rule 155 (binary_expression -> cast_expression .)
    %               reduce using rule 155 (binary_expression -> cast_expression .)
    +               reduce using rule 155 (binary_expression -> cast_expression .)
    -               reduce using rule 155 (binary_expression -> cast_expression .)
    RIGHT_OP        reduce using rule 155 (binary_expression -> cast_expression .)
    LEFT_OP         reduce using rule 155 (binary_expression -> cast_expression .)
    <               reduce using rule 155 (binary_expression -> cast_expression .)
    LTE             reduce using rule 155 (binary_expression -> cast_expression .)
    GTE             reduce using rule 155 (binary_expression -> cast_expression .)
    >               reduce using rule 155 (binary_expression -> cast_expression .)
    EQ_OP           reduce using rule 155 (binary_expression -> cast_expression .)
    NEQ_OP          reduce using rule 155 (binary_expression -> cast_expression .)
    &               reduce using rule 155 (binary_expression -> cast_expression .)
    |               reduce using rule 155 (binary_expression -> cast_expression .)
    ^               reduce using rule 155 (binary_expression -> cast_expression .)
    AND_OP          reduce using rule 155 (binary_expression -> cast_expression .)
    OR_OP           reduce using rule 155 (binary_expression -> cast_expression .)
    ,               reduce using rule 155 (binary_expression -> cast_expression .)
    ;               reduce using rule 155 (binary_expression -> cast_expression .)
    ?               reduce using rule 155 (binary_expression -> cast_expression .)
    ]               reduce using rule 155 (binary_expression -> cast_expression .)
    }               reduce using rule 155 (binary_expression -> cast_expression .)
    )               reduce using rule 155 (binary_expression -> cast_expression .)
    :               reduce using rule 155 (binary_expression -> cast_expression .)
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84

    self_incdec                    shift and go to state 169

state 72

    (151) unary_expression -> self_incdec . cast_expression
    (174) cast_expression -> . unary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    self_incdec                    shift and go to state 72
    cast_expression                shift and go to state 170
    unary_expression               shift and go to state 168
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 73

    (142) unary_operator -> * .

    &               reduce using rule 142 (unary_operator -> * .)
    *               reduce using rule 142 (unary_operator -> * .)
    +               reduce using rule 142 (unary_operator -> * .)
    -               reduce using rule 142 (unary_operator -> * .)
    ~               reduce using rule 142 (unary_operator -> * .)
    !               reduce using rule 142 (unary_operator -> * .)
    INC_OP          reduce using rule 142 (unary_operator -> * .)
    DEC_OP          reduce using rule 142 (unary_operator -> * .)
    (               reduce using rule 142 (unary_operator -> * .)
    ID              reduce using rule 142 (unary_operator -> * .)
    INTEGER_CONST   reduce using rule 142 (unary_operator -> * .)
    CHAR_CONST      reduce using rule 142 (unary_operator -> * .)
    FLOAT_CONST     reduce using rule 142 (unary_operator -> * .)
    BOOL_CONST      reduce using rule 142 (unary_operator -> * .)
    STRING_CONST    reduce using rule 142 (unary_operator -> * .)
    SIZEOF          reduce using rule 142 (unary_operator -> * .)


state 74

    (143) unary_operator -> + .

    &               reduce using rule 143 (unary_operator -> + .)
    *               reduce using rule 143 (unary_operator -> + .)
    +               reduce using rule 143 (unary_operator -> + .)
    -               reduce using rule 143 (unary_operator -> + .)
    ~               reduce using rule 143 (unary_operator -> + .)
    !               reduce using rule 143 (unary_operator -> + .)
    INC_OP          reduce using rule 143 (unary_operator -> + .)
    DEC_OP          reduce using rule 143 (unary_operator -> + .)
    (               reduce using rule 143 (unary_operator -> + .)
    ID              reduce using rule 143 (unary_operator -> + .)
    INTEGER_CONST   reduce using rule 143 (unary_operator -> + .)
    CHAR_CONST      reduce using rule 143 (unary_operator -> + .)
    FLOAT_CONST     reduce using rule 143 (unary_operator -> + .)
    BOOL_CONST      reduce using rule 143 (unary_operator -> + .)
    STRING_CONST    reduce using rule 143 (unary_operator -> + .)
    SIZEOF          reduce using rule 143 (unary_operator -> + .)


state 75

    (144) unary_operator -> - .

    &               reduce using rule 144 (unary_operator -> - .)
    *               reduce using rule 144 (unary_operator -> - .)
    +               reduce using rule 144 (unary_operator -> - .)
    -               reduce using rule 144 (unary_operator -> - .)
    ~               reduce using rule 144 (unary_operator -> - .)
    !               reduce using rule 144 (unary_operator -> - .)
    INC_OP          reduce using rule 144 (unary_operator -> - .)
    DEC_OP          reduce using rule 144 (unary_operator -> - .)
    (               reduce using rule 144 (unary_operator -> - .)
    ID              reduce using rule 144 (unary_operator -> - .)
    INTEGER_CONST   reduce using rule 144 (unary_operator -> - .)
    CHAR_CONST      reduce using rule 144 (unary_operator -> - .)
    FLOAT_CONST     reduce using rule 144 (unary_operator -> - .)
    BOOL_CONST      reduce using rule 144 (unary_operator -> - .)
    STRING_CONST    reduce using rule 144 (unary_operator -> - .)
    SIZEOF          reduce using rule 144 (unary_operator -> - .)


state 76

    (141) unary_operator -> & .

    &               reduce using rule 141 (unary_operator -> & .)
    *               reduce using rule 141 (unary_operator -> & .)
    +               reduce using rule 141 (unary_operator -> & .)
    -               reduce using rule 141 (unary_operator -> & .)
    ~               reduce using rule 141 (unary_operator -> & .)
    !               reduce using rule 141 (unary_operator -> & .)
    INC_OP          reduce using rule 141 (unary_operator -> & .)
    DEC_OP          reduce using rule 141 (unary_operator -> & .)
    (               reduce using rule 141 (unary_operator -> & .)
    ID              reduce using rule 141 (unary_operator -> & .)
    INTEGER_CONST   reduce using rule 141 (unary_operator -> & .)
    CHAR_CONST      reduce using rule 141 (unary_operator -> & .)
    FLOAT_CONST     reduce using rule 141 (unary_operator -> & .)
    BOOL_CONST      reduce using rule 141 (unary_operator -> & .)
    STRING_CONST    reduce using rule 141 (unary_operator -> & .)
    SIZEOF          reduce using rule 141 (unary_operator -> & .)


state 77

    (86) ternary_expression -> expression . ? expression : expression
    (102) expression -> expression . , assignable_expression

    ?               shift and go to state 171
    ,               shift and go to state 172


state 78

    (108) uscd_expression -> unit_expression .

    [               reduce using rule 108 (uscd_expression -> unit_expression .)
    (               reduce using rule 108 (uscd_expression -> unit_expression .)
    PTR_OP          reduce using rule 108 (uscd_expression -> unit_expression .)
    =               reduce using rule 108 (uscd_expression -> unit_expression .)
    MUL_ASG         reduce using rule 108 (uscd_expression -> unit_expression .)
    DIV_ASG         reduce using rule 108 (uscd_expression -> unit_expression .)
    MOD_ASG         reduce using rule 108 (uscd_expression -> unit_expression .)
    ADD_ASG         reduce using rule 108 (uscd_expression -> unit_expression .)
    SUB_ASG         reduce using rule 108 (uscd_expression -> unit_expression .)
    LEFT_ASG        reduce using rule 108 (uscd_expression -> unit_expression .)
    RIGHT_ASG       reduce using rule 108 (uscd_expression -> unit_expression .)
    AND_ASG         reduce using rule 108 (uscd_expression -> unit_expression .)
    XOR_ASG         reduce using rule 108 (uscd_expression -> unit_expression .)
    OR_ASG          reduce using rule 108 (uscd_expression -> unit_expression .)
    INC_OP          reduce using rule 108 (uscd_expression -> unit_expression .)
    DEC_OP          reduce using rule 108 (uscd_expression -> unit_expression .)
    *               reduce using rule 108 (uscd_expression -> unit_expression .)
    /               reduce using rule 108 (uscd_expression -> unit_expression .)
    %               reduce using rule 108 (uscd_expression -> unit_expression .)
    +               reduce using rule 108 (uscd_expression -> unit_expression .)
    -               reduce using rule 108 (uscd_expression -> unit_expression .)
    RIGHT_OP        reduce using rule 108 (uscd_expression -> unit_expression .)
    LEFT_OP         reduce using rule 108 (uscd_expression -> unit_expression .)
    <               reduce using rule 108 (uscd_expression -> unit_expression .)
    LTE             reduce using rule 108 (uscd_expression -> unit_expression .)
    GTE             reduce using rule 108 (uscd_expression -> unit_expression .)
    >               reduce using rule 108 (uscd_expression -> unit_expression .)
    EQ_OP           reduce using rule 108 (uscd_expression -> unit_expression .)
    NEQ_OP          reduce using rule 108 (uscd_expression -> unit_expression .)
    &               reduce using rule 108 (uscd_expression -> unit_expression .)
    |               reduce using rule 108 (uscd_expression -> unit_expression .)
    ^               reduce using rule 108 (uscd_expression -> unit_expression .)
    AND_OP          reduce using rule 108 (uscd_expression -> unit_expression .)
    OR_OP           reduce using rule 108 (uscd_expression -> unit_expression .)
    ,               reduce using rule 108 (uscd_expression -> unit_expression .)
    ;               reduce using rule 108 (uscd_expression -> unit_expression .)
    ?               reduce using rule 108 (uscd_expression -> unit_expression .)
    ]               reduce using rule 108 (uscd_expression -> unit_expression .)
    }               reduce using rule 108 (uscd_expression -> unit_expression .)
    )               reduce using rule 108 (uscd_expression -> unit_expression .)
    :               reduce using rule 108 (uscd_expression -> unit_expression .)


state 79

    (116) unit_expression -> ( . expression )
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    expression                     shift and go to state 173
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 80

    (113) unit_expression -> identifier .

    [               reduce using rule 113 (unit_expression -> identifier .)
    (               reduce using rule 113 (unit_expression -> identifier .)
    PTR_OP          reduce using rule 113 (unit_expression -> identifier .)
    =               reduce using rule 113 (unit_expression -> identifier .)
    MUL_ASG         reduce using rule 113 (unit_expression -> identifier .)
    DIV_ASG         reduce using rule 113 (unit_expression -> identifier .)
    MOD_ASG         reduce using rule 113 (unit_expression -> identifier .)
    ADD_ASG         reduce using rule 113 (unit_expression -> identifier .)
    SUB_ASG         reduce using rule 113 (unit_expression -> identifier .)
    LEFT_ASG        reduce using rule 113 (unit_expression -> identifier .)
    RIGHT_ASG       reduce using rule 113 (unit_expression -> identifier .)
    AND_ASG         reduce using rule 113 (unit_expression -> identifier .)
    XOR_ASG         reduce using rule 113 (unit_expression -> identifier .)
    OR_ASG          reduce using rule 113 (unit_expression -> identifier .)
    INC_OP          reduce using rule 113 (unit_expression -> identifier .)
    DEC_OP          reduce using rule 113 (unit_expression -> identifier .)
    *               reduce using rule 113 (unit_expression -> identifier .)
    /               reduce using rule 113 (unit_expression -> identifier .)
    %               reduce using rule 113 (unit_expression -> identifier .)
    +               reduce using rule 113 (unit_expression -> identifier .)
    -               reduce using rule 113 (unit_expression -> identifier .)
    RIGHT_OP        reduce using rule 113 (unit_expression -> identifier .)
    LEFT_OP         reduce using rule 113 (unit_expression -> identifier .)
    <               reduce using rule 113 (unit_expression -> identifier .)
    LTE             reduce using rule 113 (unit_expression -> identifier .)
    GTE             reduce using rule 113 (unit_expression -> identifier .)
    >               reduce using rule 113 (unit_expression -> identifier .)
    EQ_OP           reduce using rule 113 (unit_expression -> identifier .)
    NEQ_OP          reduce using rule 113 (unit_expression -> identifier .)
    &               reduce using rule 113 (unit_expression -> identifier .)
    |               reduce using rule 113 (unit_expression -> identifier .)
    ^               reduce using rule 113 (unit_expression -> identifier .)
    AND_OP          reduce using rule 113 (unit_expression -> identifier .)
    OR_OP           reduce using rule 113 (unit_expression -> identifier .)
    ,               reduce using rule 113 (unit_expression -> identifier .)
    ;               reduce using rule 113 (unit_expression -> identifier .)
    ?               reduce using rule 113 (unit_expression -> identifier .)
    ]               reduce using rule 113 (unit_expression -> identifier .)
    }               reduce using rule 113 (unit_expression -> identifier .)
    )               reduce using rule 113 (unit_expression -> identifier .)
    :               reduce using rule 113 (unit_expression -> identifier .)


state 81

    (145) unary_operator -> ~ .

    &               reduce using rule 145 (unary_operator -> ~ .)
    *               reduce using rule 145 (unary_operator -> ~ .)
    +               reduce using rule 145 (unary_operator -> ~ .)
    -               reduce using rule 145 (unary_operator -> ~ .)
    ~               reduce using rule 145 (unary_operator -> ~ .)
    !               reduce using rule 145 (unary_operator -> ~ .)
    INC_OP          reduce using rule 145 (unary_operator -> ~ .)
    DEC_OP          reduce using rule 145 (unary_operator -> ~ .)
    (               reduce using rule 145 (unary_operator -> ~ .)
    ID              reduce using rule 145 (unary_operator -> ~ .)
    INTEGER_CONST   reduce using rule 145 (unary_operator -> ~ .)
    CHAR_CONST      reduce using rule 145 (unary_operator -> ~ .)
    FLOAT_CONST     reduce using rule 145 (unary_operator -> ~ .)
    BOOL_CONST      reduce using rule 145 (unary_operator -> ~ .)
    STRING_CONST    reduce using rule 145 (unary_operator -> ~ .)
    SIZEOF          reduce using rule 145 (unary_operator -> ~ .)


state 82

    (146) unary_operator -> ! .

    &               reduce using rule 146 (unary_operator -> ! .)
    *               reduce using rule 146 (unary_operator -> ! .)
    +               reduce using rule 146 (unary_operator -> ! .)
    -               reduce using rule 146 (unary_operator -> ! .)
    ~               reduce using rule 146 (unary_operator -> ! .)
    !               reduce using rule 146 (unary_operator -> ! .)
    INC_OP          reduce using rule 146 (unary_operator -> ! .)
    DEC_OP          reduce using rule 146 (unary_operator -> ! .)
    (               reduce using rule 146 (unary_operator -> ! .)
    ID              reduce using rule 146 (unary_operator -> ! .)
    INTEGER_CONST   reduce using rule 146 (unary_operator -> ! .)
    CHAR_CONST      reduce using rule 146 (unary_operator -> ! .)
    FLOAT_CONST     reduce using rule 146 (unary_operator -> ! .)
    BOOL_CONST      reduce using rule 146 (unary_operator -> ! .)
    STRING_CONST    reduce using rule 146 (unary_operator -> ! .)
    SIZEOF          reduce using rule 146 (unary_operator -> ! .)


state 83

    (147) self_incdec -> INC_OP .

    &               reduce using rule 147 (self_incdec -> INC_OP .)
    *               reduce using rule 147 (self_incdec -> INC_OP .)
    +               reduce using rule 147 (self_incdec -> INC_OP .)
    -               reduce using rule 147 (self_incdec -> INC_OP .)
    ~               reduce using rule 147 (self_incdec -> INC_OP .)
    !               reduce using rule 147 (self_incdec -> INC_OP .)
    INC_OP          reduce using rule 147 (self_incdec -> INC_OP .)
    DEC_OP          reduce using rule 147 (self_incdec -> INC_OP .)
    (               reduce using rule 147 (self_incdec -> INC_OP .)
    ID              reduce using rule 147 (self_incdec -> INC_OP .)
    INTEGER_CONST   reduce using rule 147 (self_incdec -> INC_OP .)
    CHAR_CONST      reduce using rule 147 (self_incdec -> INC_OP .)
    FLOAT_CONST     reduce using rule 147 (self_incdec -> INC_OP .)
    BOOL_CONST      reduce using rule 147 (self_incdec -> INC_OP .)
    STRING_CONST    reduce using rule 147 (self_incdec -> INC_OP .)
    SIZEOF          reduce using rule 147 (self_incdec -> INC_OP .)
    =               reduce using rule 147 (self_incdec -> INC_OP .)
    MUL_ASG         reduce using rule 147 (self_incdec -> INC_OP .)
    DIV_ASG         reduce using rule 147 (self_incdec -> INC_OP .)
    MOD_ASG         reduce using rule 147 (self_incdec -> INC_OP .)
    ADD_ASG         reduce using rule 147 (self_incdec -> INC_OP .)
    SUB_ASG         reduce using rule 147 (self_incdec -> INC_OP .)
    LEFT_ASG        reduce using rule 147 (self_incdec -> INC_OP .)
    RIGHT_ASG       reduce using rule 147 (self_incdec -> INC_OP .)
    AND_ASG         reduce using rule 147 (self_incdec -> INC_OP .)
    XOR_ASG         reduce using rule 147 (self_incdec -> INC_OP .)
    OR_ASG          reduce using rule 147 (self_incdec -> INC_OP .)
    /               reduce using rule 147 (self_incdec -> INC_OP .)
    %               reduce using rule 147 (self_incdec -> INC_OP .)
    RIGHT_OP        reduce using rule 147 (self_incdec -> INC_OP .)
    LEFT_OP         reduce using rule 147 (self_incdec -> INC_OP .)
    <               reduce using rule 147 (self_incdec -> INC_OP .)
    LTE             reduce using rule 147 (self_incdec -> INC_OP .)
    GTE             reduce using rule 147 (self_incdec -> INC_OP .)
    >               reduce using rule 147 (self_incdec -> INC_OP .)
    EQ_OP           reduce using rule 147 (self_incdec -> INC_OP .)
    NEQ_OP          reduce using rule 147 (self_incdec -> INC_OP .)
    |               reduce using rule 147 (self_incdec -> INC_OP .)
    ^               reduce using rule 147 (self_incdec -> INC_OP .)
    AND_OP          reduce using rule 147 (self_incdec -> INC_OP .)
    OR_OP           reduce using rule 147 (self_incdec -> INC_OP .)
    ,               reduce using rule 147 (self_incdec -> INC_OP .)
    ;               reduce using rule 147 (self_incdec -> INC_OP .)
    ?               reduce using rule 147 (self_incdec -> INC_OP .)
    ]               reduce using rule 147 (self_incdec -> INC_OP .)
    }               reduce using rule 147 (self_incdec -> INC_OP .)
    )               reduce using rule 147 (self_incdec -> INC_OP .)
    :               reduce using rule 147 (self_incdec -> INC_OP .)


state 84

    (148) self_incdec -> DEC_OP .

    &               reduce using rule 148 (self_incdec -> DEC_OP .)
    *               reduce using rule 148 (self_incdec -> DEC_OP .)
    +               reduce using rule 148 (self_incdec -> DEC_OP .)
    -               reduce using rule 148 (self_incdec -> DEC_OP .)
    ~               reduce using rule 148 (self_incdec -> DEC_OP .)
    !               reduce using rule 148 (self_incdec -> DEC_OP .)
    INC_OP          reduce using rule 148 (self_incdec -> DEC_OP .)
    DEC_OP          reduce using rule 148 (self_incdec -> DEC_OP .)
    (               reduce using rule 148 (self_incdec -> DEC_OP .)
    ID              reduce using rule 148 (self_incdec -> DEC_OP .)
    INTEGER_CONST   reduce using rule 148 (self_incdec -> DEC_OP .)
    CHAR_CONST      reduce using rule 148 (self_incdec -> DEC_OP .)
    FLOAT_CONST     reduce using rule 148 (self_incdec -> DEC_OP .)
    BOOL_CONST      reduce using rule 148 (self_incdec -> DEC_OP .)
    STRING_CONST    reduce using rule 148 (self_incdec -> DEC_OP .)
    SIZEOF          reduce using rule 148 (self_incdec -> DEC_OP .)
    =               reduce using rule 148 (self_incdec -> DEC_OP .)
    MUL_ASG         reduce using rule 148 (self_incdec -> DEC_OP .)
    DIV_ASG         reduce using rule 148 (self_incdec -> DEC_OP .)
    MOD_ASG         reduce using rule 148 (self_incdec -> DEC_OP .)
    ADD_ASG         reduce using rule 148 (self_incdec -> DEC_OP .)
    SUB_ASG         reduce using rule 148 (self_incdec -> DEC_OP .)
    LEFT_ASG        reduce using rule 148 (self_incdec -> DEC_OP .)
    RIGHT_ASG       reduce using rule 148 (self_incdec -> DEC_OP .)
    AND_ASG         reduce using rule 148 (self_incdec -> DEC_OP .)
    XOR_ASG         reduce using rule 148 (self_incdec -> DEC_OP .)
    OR_ASG          reduce using rule 148 (self_incdec -> DEC_OP .)
    /               reduce using rule 148 (self_incdec -> DEC_OP .)
    %               reduce using rule 148 (self_incdec -> DEC_OP .)
    RIGHT_OP        reduce using rule 148 (self_incdec -> DEC_OP .)
    LEFT_OP         reduce using rule 148 (self_incdec -> DEC_OP .)
    <               reduce using rule 148 (self_incdec -> DEC_OP .)
    LTE             reduce using rule 148 (self_incdec -> DEC_OP .)
    GTE             reduce using rule 148 (self_incdec -> DEC_OP .)
    >               reduce using rule 148 (self_incdec -> DEC_OP .)
    EQ_OP           reduce using rule 148 (self_incdec -> DEC_OP .)
    NEQ_OP          reduce using rule 148 (self_incdec -> DEC_OP .)
    |               reduce using rule 148 (self_incdec -> DEC_OP .)
    ^               reduce using rule 148 (self_incdec -> DEC_OP .)
    AND_OP          reduce using rule 148 (self_incdec -> DEC_OP .)
    OR_OP           reduce using rule 148 (self_incdec -> DEC_OP .)
    ,               reduce using rule 148 (self_incdec -> DEC_OP .)
    ;               reduce using rule 148 (self_incdec -> DEC_OP .)
    ?               reduce using rule 148 (self_incdec -> DEC_OP .)
    ]               reduce using rule 148 (self_incdec -> DEC_OP .)
    }               reduce using rule 148 (self_incdec -> DEC_OP .)
    )               reduce using rule 148 (self_incdec -> DEC_OP .)
    :               reduce using rule 148 (self_incdec -> DEC_OP .)


state 85

    (114) unit_expression -> constant .

    [               reduce using rule 114 (unit_expression -> constant .)
    (               reduce using rule 114 (unit_expression -> constant .)
    PTR_OP          reduce using rule 114 (unit_expression -> constant .)
    =               reduce using rule 114 (unit_expression -> constant .)
    MUL_ASG         reduce using rule 114 (unit_expression -> constant .)
    DIV_ASG         reduce using rule 114 (unit_expression -> constant .)
    MOD_ASG         reduce using rule 114 (unit_expression -> constant .)
    ADD_ASG         reduce using rule 114 (unit_expression -> constant .)
    SUB_ASG         reduce using rule 114 (unit_expression -> constant .)
    LEFT_ASG        reduce using rule 114 (unit_expression -> constant .)
    RIGHT_ASG       reduce using rule 114 (unit_expression -> constant .)
    AND_ASG         reduce using rule 114 (unit_expression -> constant .)
    XOR_ASG         reduce using rule 114 (unit_expression -> constant .)
    OR_ASG          reduce using rule 114 (unit_expression -> constant .)
    INC_OP          reduce using rule 114 (unit_expression -> constant .)
    DEC_OP          reduce using rule 114 (unit_expression -> constant .)
    *               reduce using rule 114 (unit_expression -> constant .)
    /               reduce using rule 114 (unit_expression -> constant .)
    %               reduce using rule 114 (unit_expression -> constant .)
    +               reduce using rule 114 (unit_expression -> constant .)
    -               reduce using rule 114 (unit_expression -> constant .)
    RIGHT_OP        reduce using rule 114 (unit_expression -> constant .)
    LEFT_OP         reduce using rule 114 (unit_expression -> constant .)
    <               reduce using rule 114 (unit_expression -> constant .)
    LTE             reduce using rule 114 (unit_expression -> constant .)
    GTE             reduce using rule 114 (unit_expression -> constant .)
    >               reduce using rule 114 (unit_expression -> constant .)
    EQ_OP           reduce using rule 114 (unit_expression -> constant .)
    NEQ_OP          reduce using rule 114 (unit_expression -> constant .)
    &               reduce using rule 114 (unit_expression -> constant .)
    |               reduce using rule 114 (unit_expression -> constant .)
    ^               reduce using rule 114 (unit_expression -> constant .)
    AND_OP          reduce using rule 114 (unit_expression -> constant .)
    OR_OP           reduce using rule 114 (unit_expression -> constant .)
    ,               reduce using rule 114 (unit_expression -> constant .)
    ;               reduce using rule 114 (unit_expression -> constant .)
    ?               reduce using rule 114 (unit_expression -> constant .)
    ]               reduce using rule 114 (unit_expression -> constant .)
    }               reduce using rule 114 (unit_expression -> constant .)
    )               reduce using rule 114 (unit_expression -> constant .)
    :               reduce using rule 114 (unit_expression -> constant .)


state 86

    (115) unit_expression -> multiple_string .
    (154) multiple_string -> multiple_string . STRING_CONST

    [               reduce using rule 115 (unit_expression -> multiple_string .)
    (               reduce using rule 115 (unit_expression -> multiple_string .)
    PTR_OP          reduce using rule 115 (unit_expression -> multiple_string .)
    =               reduce using rule 115 (unit_expression -> multiple_string .)
    MUL_ASG         reduce using rule 115 (unit_expression -> multiple_string .)
    DIV_ASG         reduce using rule 115 (unit_expression -> multiple_string .)
    MOD_ASG         reduce using rule 115 (unit_expression -> multiple_string .)
    ADD_ASG         reduce using rule 115 (unit_expression -> multiple_string .)
    SUB_ASG         reduce using rule 115 (unit_expression -> multiple_string .)
    LEFT_ASG        reduce using rule 115 (unit_expression -> multiple_string .)
    RIGHT_ASG       reduce using rule 115 (unit_expression -> multiple_string .)
    AND_ASG         reduce using rule 115 (unit_expression -> multiple_string .)
    XOR_ASG         reduce using rule 115 (unit_expression -> multiple_string .)
    OR_ASG          reduce using rule 115 (unit_expression -> multiple_string .)
    INC_OP          reduce using rule 115 (unit_expression -> multiple_string .)
    DEC_OP          reduce using rule 115 (unit_expression -> multiple_string .)
    *               reduce using rule 115 (unit_expression -> multiple_string .)
    /               reduce using rule 115 (unit_expression -> multiple_string .)
    %               reduce using rule 115 (unit_expression -> multiple_string .)
    +               reduce using rule 115 (unit_expression -> multiple_string .)
    -               reduce using rule 115 (unit_expression -> multiple_string .)
    RIGHT_OP        reduce using rule 115 (unit_expression -> multiple_string .)
    LEFT_OP         reduce using rule 115 (unit_expression -> multiple_string .)
    <               reduce using rule 115 (unit_expression -> multiple_string .)
    LTE             reduce using rule 115 (unit_expression -> multiple_string .)
    GTE             reduce using rule 115 (unit_expression -> multiple_string .)
    >               reduce using rule 115 (unit_expression -> multiple_string .)
    EQ_OP           reduce using rule 115 (unit_expression -> multiple_string .)
    NEQ_OP          reduce using rule 115 (unit_expression -> multiple_string .)
    &               reduce using rule 115 (unit_expression -> multiple_string .)
    |               reduce using rule 115 (unit_expression -> multiple_string .)
    ^               reduce using rule 115 (unit_expression -> multiple_string .)
    AND_OP          reduce using rule 115 (unit_expression -> multiple_string .)
    OR_OP           reduce using rule 115 (unit_expression -> multiple_string .)
    ,               reduce using rule 115 (unit_expression -> multiple_string .)
    ;               reduce using rule 115 (unit_expression -> multiple_string .)
    ?               reduce using rule 115 (unit_expression -> multiple_string .)
    ]               reduce using rule 115 (unit_expression -> multiple_string .)
    }               reduce using rule 115 (unit_expression -> multiple_string .)
    )               reduce using rule 115 (unit_expression -> multiple_string .)
    :               reduce using rule 115 (unit_expression -> multiple_string .)
    STRING_CONST    shift and go to state 174


state 87

    (87) constant -> INTEGER_CONST .

    [               reduce using rule 87 (constant -> INTEGER_CONST .)
    (               reduce using rule 87 (constant -> INTEGER_CONST .)
    PTR_OP          reduce using rule 87 (constant -> INTEGER_CONST .)
    =               reduce using rule 87 (constant -> INTEGER_CONST .)
    MUL_ASG         reduce using rule 87 (constant -> INTEGER_CONST .)
    DIV_ASG         reduce using rule 87 (constant -> INTEGER_CONST .)
    MOD_ASG         reduce using rule 87 (constant -> INTEGER_CONST .)
    ADD_ASG         reduce using rule 87 (constant -> INTEGER_CONST .)
    SUB_ASG         reduce using rule 87 (constant -> INTEGER_CONST .)
    LEFT_ASG        reduce using rule 87 (constant -> INTEGER_CONST .)
    RIGHT_ASG       reduce using rule 87 (constant -> INTEGER_CONST .)
    AND_ASG         reduce using rule 87 (constant -> INTEGER_CONST .)
    XOR_ASG         reduce using rule 87 (constant -> INTEGER_CONST .)
    OR_ASG          reduce using rule 87 (constant -> INTEGER_CONST .)
    INC_OP          reduce using rule 87 (constant -> INTEGER_CONST .)
    DEC_OP          reduce using rule 87 (constant -> INTEGER_CONST .)
    *               reduce using rule 87 (constant -> INTEGER_CONST .)
    /               reduce using rule 87 (constant -> INTEGER_CONST .)
    %               reduce using rule 87 (constant -> INTEGER_CONST .)
    +               reduce using rule 87 (constant -> INTEGER_CONST .)
    -               reduce using rule 87 (constant -> INTEGER_CONST .)
    RIGHT_OP        reduce using rule 87 (constant -> INTEGER_CONST .)
    LEFT_OP         reduce using rule 87 (constant -> INTEGER_CONST .)
    <               reduce using rule 87 (constant -> INTEGER_CONST .)
    LTE             reduce using rule 87 (constant -> INTEGER_CONST .)
    GTE             reduce using rule 87 (constant -> INTEGER_CONST .)
    >               reduce using rule 87 (constant -> INTEGER_CONST .)
    EQ_OP           reduce using rule 87 (constant -> INTEGER_CONST .)
    NEQ_OP          reduce using rule 87 (constant -> INTEGER_CONST .)
    &               reduce using rule 87 (constant -> INTEGER_CONST .)
    |               reduce using rule 87 (constant -> INTEGER_CONST .)
    ^               reduce using rule 87 (constant -> INTEGER_CONST .)
    AND_OP          reduce using rule 87 (constant -> INTEGER_CONST .)
    OR_OP           reduce using rule 87 (constant -> INTEGER_CONST .)
    ,               reduce using rule 87 (constant -> INTEGER_CONST .)
    ;               reduce using rule 87 (constant -> INTEGER_CONST .)
    ?               reduce using rule 87 (constant -> INTEGER_CONST .)
    ]               reduce using rule 87 (constant -> INTEGER_CONST .)
    }               reduce using rule 87 (constant -> INTEGER_CONST .)
    )               reduce using rule 87 (constant -> INTEGER_CONST .)
    :               reduce using rule 87 (constant -> INTEGER_CONST .)


state 88

    (88) constant -> CHAR_CONST .

    [               reduce using rule 88 (constant -> CHAR_CONST .)
    (               reduce using rule 88 (constant -> CHAR_CONST .)
    PTR_OP          reduce using rule 88 (constant -> CHAR_CONST .)
    =               reduce using rule 88 (constant -> CHAR_CONST .)
    MUL_ASG         reduce using rule 88 (constant -> CHAR_CONST .)
    DIV_ASG         reduce using rule 88 (constant -> CHAR_CONST .)
    MOD_ASG         reduce using rule 88 (constant -> CHAR_CONST .)
    ADD_ASG         reduce using rule 88 (constant -> CHAR_CONST .)
    SUB_ASG         reduce using rule 88 (constant -> CHAR_CONST .)
    LEFT_ASG        reduce using rule 88 (constant -> CHAR_CONST .)
    RIGHT_ASG       reduce using rule 88 (constant -> CHAR_CONST .)
    AND_ASG         reduce using rule 88 (constant -> CHAR_CONST .)
    XOR_ASG         reduce using rule 88 (constant -> CHAR_CONST .)
    OR_ASG          reduce using rule 88 (constant -> CHAR_CONST .)
    INC_OP          reduce using rule 88 (constant -> CHAR_CONST .)
    DEC_OP          reduce using rule 88 (constant -> CHAR_CONST .)
    *               reduce using rule 88 (constant -> CHAR_CONST .)
    /               reduce using rule 88 (constant -> CHAR_CONST .)
    %               reduce using rule 88 (constant -> CHAR_CONST .)
    +               reduce using rule 88 (constant -> CHAR_CONST .)
    -               reduce using rule 88 (constant -> CHAR_CONST .)
    RIGHT_OP        reduce using rule 88 (constant -> CHAR_CONST .)
    LEFT_OP         reduce using rule 88 (constant -> CHAR_CONST .)
    <               reduce using rule 88 (constant -> CHAR_CONST .)
    LTE             reduce using rule 88 (constant -> CHAR_CONST .)
    GTE             reduce using rule 88 (constant -> CHAR_CONST .)
    >               reduce using rule 88 (constant -> CHAR_CONST .)
    EQ_OP           reduce using rule 88 (constant -> CHAR_CONST .)
    NEQ_OP          reduce using rule 88 (constant -> CHAR_CONST .)
    &               reduce using rule 88 (constant -> CHAR_CONST .)
    |               reduce using rule 88 (constant -> CHAR_CONST .)
    ^               reduce using rule 88 (constant -> CHAR_CONST .)
    AND_OP          reduce using rule 88 (constant -> CHAR_CONST .)
    OR_OP           reduce using rule 88 (constant -> CHAR_CONST .)
    ,               reduce using rule 88 (constant -> CHAR_CONST .)
    ;               reduce using rule 88 (constant -> CHAR_CONST .)
    ?               reduce using rule 88 (constant -> CHAR_CONST .)
    ]               reduce using rule 88 (constant -> CHAR_CONST .)
    }               reduce using rule 88 (constant -> CHAR_CONST .)
    )               reduce using rule 88 (constant -> CHAR_CONST .)
    :               reduce using rule 88 (constant -> CHAR_CONST .)


state 89

    (89) constant -> FLOAT_CONST .

    [               reduce using rule 89 (constant -> FLOAT_CONST .)
    (               reduce using rule 89 (constant -> FLOAT_CONST .)
    PTR_OP          reduce using rule 89 (constant -> FLOAT_CONST .)
    =               reduce using rule 89 (constant -> FLOAT_CONST .)
    MUL_ASG         reduce using rule 89 (constant -> FLOAT_CONST .)
    DIV_ASG         reduce using rule 89 (constant -> FLOAT_CONST .)
    MOD_ASG         reduce using rule 89 (constant -> FLOAT_CONST .)
    ADD_ASG         reduce using rule 89 (constant -> FLOAT_CONST .)
    SUB_ASG         reduce using rule 89 (constant -> FLOAT_CONST .)
    LEFT_ASG        reduce using rule 89 (constant -> FLOAT_CONST .)
    RIGHT_ASG       reduce using rule 89 (constant -> FLOAT_CONST .)
    AND_ASG         reduce using rule 89 (constant -> FLOAT_CONST .)
    XOR_ASG         reduce using rule 89 (constant -> FLOAT_CONST .)
    OR_ASG          reduce using rule 89 (constant -> FLOAT_CONST .)
    INC_OP          reduce using rule 89 (constant -> FLOAT_CONST .)
    DEC_OP          reduce using rule 89 (constant -> FLOAT_CONST .)
    *               reduce using rule 89 (constant -> FLOAT_CONST .)
    /               reduce using rule 89 (constant -> FLOAT_CONST .)
    %               reduce using rule 89 (constant -> FLOAT_CONST .)
    +               reduce using rule 89 (constant -> FLOAT_CONST .)
    -               reduce using rule 89 (constant -> FLOAT_CONST .)
    RIGHT_OP        reduce using rule 89 (constant -> FLOAT_CONST .)
    LEFT_OP         reduce using rule 89 (constant -> FLOAT_CONST .)
    <               reduce using rule 89 (constant -> FLOAT_CONST .)
    LTE             reduce using rule 89 (constant -> FLOAT_CONST .)
    GTE             reduce using rule 89 (constant -> FLOAT_CONST .)
    >               reduce using rule 89 (constant -> FLOAT_CONST .)
    EQ_OP           reduce using rule 89 (constant -> FLOAT_CONST .)
    NEQ_OP          reduce using rule 89 (constant -> FLOAT_CONST .)
    &               reduce using rule 89 (constant -> FLOAT_CONST .)
    |               reduce using rule 89 (constant -> FLOAT_CONST .)
    ^               reduce using rule 89 (constant -> FLOAT_CONST .)
    AND_OP          reduce using rule 89 (constant -> FLOAT_CONST .)
    OR_OP           reduce using rule 89 (constant -> FLOAT_CONST .)
    ,               reduce using rule 89 (constant -> FLOAT_CONST .)
    ;               reduce using rule 89 (constant -> FLOAT_CONST .)
    ?               reduce using rule 89 (constant -> FLOAT_CONST .)
    ]               reduce using rule 89 (constant -> FLOAT_CONST .)
    }               reduce using rule 89 (constant -> FLOAT_CONST .)
    )               reduce using rule 89 (constant -> FLOAT_CONST .)
    :               reduce using rule 89 (constant -> FLOAT_CONST .)


state 90

    (90) constant -> BOOL_CONST .

    [               reduce using rule 90 (constant -> BOOL_CONST .)
    (               reduce using rule 90 (constant -> BOOL_CONST .)
    PTR_OP          reduce using rule 90 (constant -> BOOL_CONST .)
    =               reduce using rule 90 (constant -> BOOL_CONST .)
    MUL_ASG         reduce using rule 90 (constant -> BOOL_CONST .)
    DIV_ASG         reduce using rule 90 (constant -> BOOL_CONST .)
    MOD_ASG         reduce using rule 90 (constant -> BOOL_CONST .)
    ADD_ASG         reduce using rule 90 (constant -> BOOL_CONST .)
    SUB_ASG         reduce using rule 90 (constant -> BOOL_CONST .)
    LEFT_ASG        reduce using rule 90 (constant -> BOOL_CONST .)
    RIGHT_ASG       reduce using rule 90 (constant -> BOOL_CONST .)
    AND_ASG         reduce using rule 90 (constant -> BOOL_CONST .)
    XOR_ASG         reduce using rule 90 (constant -> BOOL_CONST .)
    OR_ASG          reduce using rule 90 (constant -> BOOL_CONST .)
    INC_OP          reduce using rule 90 (constant -> BOOL_CONST .)
    DEC_OP          reduce using rule 90 (constant -> BOOL_CONST .)
    *               reduce using rule 90 (constant -> BOOL_CONST .)
    /               reduce using rule 90 (constant -> BOOL_CONST .)
    %               reduce using rule 90 (constant -> BOOL_CONST .)
    +               reduce using rule 90 (constant -> BOOL_CONST .)
    -               reduce using rule 90 (constant -> BOOL_CONST .)
    RIGHT_OP        reduce using rule 90 (constant -> BOOL_CONST .)
    LEFT_OP         reduce using rule 90 (constant -> BOOL_CONST .)
    <               reduce using rule 90 (constant -> BOOL_CONST .)
    LTE             reduce using rule 90 (constant -> BOOL_CONST .)
    GTE             reduce using rule 90 (constant -> BOOL_CONST .)
    >               reduce using rule 90 (constant -> BOOL_CONST .)
    EQ_OP           reduce using rule 90 (constant -> BOOL_CONST .)
    NEQ_OP          reduce using rule 90 (constant -> BOOL_CONST .)
    &               reduce using rule 90 (constant -> BOOL_CONST .)
    |               reduce using rule 90 (constant -> BOOL_CONST .)
    ^               reduce using rule 90 (constant -> BOOL_CONST .)
    AND_OP          reduce using rule 90 (constant -> BOOL_CONST .)
    OR_OP           reduce using rule 90 (constant -> BOOL_CONST .)
    ,               reduce using rule 90 (constant -> BOOL_CONST .)
    ;               reduce using rule 90 (constant -> BOOL_CONST .)
    ?               reduce using rule 90 (constant -> BOOL_CONST .)
    ]               reduce using rule 90 (constant -> BOOL_CONST .)
    }               reduce using rule 90 (constant -> BOOL_CONST .)
    )               reduce using rule 90 (constant -> BOOL_CONST .)
    :               reduce using rule 90 (constant -> BOOL_CONST .)


state 91

    (153) multiple_string -> STRING_CONST .

    STRING_CONST    reduce using rule 153 (multiple_string -> STRING_CONST .)
    [               reduce using rule 153 (multiple_string -> STRING_CONST .)
    (               reduce using rule 153 (multiple_string -> STRING_CONST .)
    PTR_OP          reduce using rule 153 (multiple_string -> STRING_CONST .)
    =               reduce using rule 153 (multiple_string -> STRING_CONST .)
    MUL_ASG         reduce using rule 153 (multiple_string -> STRING_CONST .)
    DIV_ASG         reduce using rule 153 (multiple_string -> STRING_CONST .)
    MOD_ASG         reduce using rule 153 (multiple_string -> STRING_CONST .)
    ADD_ASG         reduce using rule 153 (multiple_string -> STRING_CONST .)
    SUB_ASG         reduce using rule 153 (multiple_string -> STRING_CONST .)
    LEFT_ASG        reduce using rule 153 (multiple_string -> STRING_CONST .)
    RIGHT_ASG       reduce using rule 153 (multiple_string -> STRING_CONST .)
    AND_ASG         reduce using rule 153 (multiple_string -> STRING_CONST .)
    XOR_ASG         reduce using rule 153 (multiple_string -> STRING_CONST .)
    OR_ASG          reduce using rule 153 (multiple_string -> STRING_CONST .)
    INC_OP          reduce using rule 153 (multiple_string -> STRING_CONST .)
    DEC_OP          reduce using rule 153 (multiple_string -> STRING_CONST .)
    *               reduce using rule 153 (multiple_string -> STRING_CONST .)
    /               reduce using rule 153 (multiple_string -> STRING_CONST .)
    %               reduce using rule 153 (multiple_string -> STRING_CONST .)
    +               reduce using rule 153 (multiple_string -> STRING_CONST .)
    -               reduce using rule 153 (multiple_string -> STRING_CONST .)
    RIGHT_OP        reduce using rule 153 (multiple_string -> STRING_CONST .)
    LEFT_OP         reduce using rule 153 (multiple_string -> STRING_CONST .)
    <               reduce using rule 153 (multiple_string -> STRING_CONST .)
    LTE             reduce using rule 153 (multiple_string -> STRING_CONST .)
    GTE             reduce using rule 153 (multiple_string -> STRING_CONST .)
    >               reduce using rule 153 (multiple_string -> STRING_CONST .)
    EQ_OP           reduce using rule 153 (multiple_string -> STRING_CONST .)
    NEQ_OP          reduce using rule 153 (multiple_string -> STRING_CONST .)
    &               reduce using rule 153 (multiple_string -> STRING_CONST .)
    |               reduce using rule 153 (multiple_string -> STRING_CONST .)
    ^               reduce using rule 153 (multiple_string -> STRING_CONST .)
    AND_OP          reduce using rule 153 (multiple_string -> STRING_CONST .)
    OR_OP           reduce using rule 153 (multiple_string -> STRING_CONST .)
    ,               reduce using rule 153 (multiple_string -> STRING_CONST .)
    ;               reduce using rule 153 (multiple_string -> STRING_CONST .)
    ?               reduce using rule 153 (multiple_string -> STRING_CONST .)
    ]               reduce using rule 153 (multiple_string -> STRING_CONST .)
    }               reduce using rule 153 (multiple_string -> STRING_CONST .)
    )               reduce using rule 153 (multiple_string -> STRING_CONST .)
    :               reduce using rule 153 (multiple_string -> STRING_CONST .)


state 92

    (39) declaration_list -> declaration_list declaration .

    INT             reduce using rule 39 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 39 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 39 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 39 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 39 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 39 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 39 (declaration_list -> declaration_list declaration .)
    BOOL            reduce using rule 39 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 39 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 39 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 39 (declaration_list -> declaration_list declaration .)
    {               reduce using rule 39 (declaration_list -> declaration_list declaration .)


state 93

    (96) direct_variable -> direct_variable [ assignable_expression_orempty . ]

    ]               shift and go to state 175


state 94

    (53) assignable_expression_orempty -> empty .

    ]               reduce using rule 53 (assignable_expression_orempty -> empty .)


state 95

    (54) assignable_expression_orempty -> assignable_expression .
    (101) expression -> assignable_expression .

    ]               reduce using rule 54 (assignable_expression_orempty -> assignable_expression .)
    ?               reduce using rule 101 (expression -> assignable_expression .)
    ,               reduce using rule 101 (expression -> assignable_expression .)


state 96

    (97) direct_variable -> direct_variable ( parameter_list . )
    (106) parameter_list -> parameter_list . , parameter_declaration

    )               shift and go to state 176
    ,               shift and go to state 177


state 97

    (98) direct_variable -> direct_variable ( identifier_list_orempty . )

    )               shift and go to state 178


state 98

    (105) parameter_list -> parameter_declaration .

    )               reduce using rule 105 (parameter_list -> parameter_declaration .)
    ,               reduce using rule 105 (parameter_list -> parameter_declaration .)


state 99

    (40) identifier_list_orempty -> empty .

    )               reduce using rule 40 (identifier_list_orempty -> empty .)


state 100

    (41) identifier_list_orempty -> identifier_list .
    (43) identifier_list -> identifier_list . , identifier

    )               reduce using rule 41 (identifier_list_orempty -> identifier_list .)
    ,               shift and go to state 179


state 101

    (107) parameter_declaration -> type . variable
    (92) variable -> . direct_variable
    (93) variable -> . pointer direct_variable
    (95) direct_variable -> . identifier
    (96) direct_variable -> . direct_variable [ assignable_expression_orempty ]
    (97) direct_variable -> . direct_variable ( parameter_list )
    (98) direct_variable -> . direct_variable ( identifier_list_orempty )
    (139) pointer -> . *
    (140) pointer -> . * pointer
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (46) inlinefunc -> . SIZEOF

    *               shift and go to state 35
    ID              shift and go to state 37
    SIZEOF          shift and go to state 39

    variable                       shift and go to state 180
    direct_variable                shift and go to state 30
    pointer                        shift and go to state 31
    identifier                     shift and go to state 34
    inlinefunc                     shift and go to state 38

state 102

    (42) identifier_list -> identifier .

    ,               reduce using rule 42 (identifier_list -> identifier .)
    )               reduce using rule 42 (identifier_list -> identifier .)


state 103

    (15) variable_initable_list -> variable_initable_list , variable_initable .

    ,               reduce using rule 15 (variable_initable_list -> variable_initable_list , variable_initable .)
    ;               reduce using rule 15 (variable_initable_list -> variable_initable_list , variable_initable .)


state 104

    (133) struct_specifier -> STRUCT identifier { struct_declaration_list . }
    (135) struct_declaration_list -> struct_declaration_list . struct_declaration
    (136) struct_declaration -> . type struct_variable_list ;
    (17) type -> . type_specifier_can_unsigned
    (18) type -> . type_specifier_cannot_unsigned
    (19) type -> . uorus
    (20) type -> . uorus type_specifier_can_unsigned
    (29) type_specifier_can_unsigned -> . INT
    (30) type_specifier_can_unsigned -> . SHORT
    (31) type_specifier_can_unsigned -> . LONG
    (32) type_specifier_can_unsigned -> . CHAR
    (24) type_specifier_cannot_unsigned -> . VOID
    (25) type_specifier_cannot_unsigned -> . FLOAT
    (26) type_specifier_cannot_unsigned -> . DOUBLE
    (27) type_specifier_cannot_unsigned -> . BOOL
    (28) type_specifier_cannot_unsigned -> . struct_specifier
    (33) uorus -> . SIGNED
    (34) uorus -> . UNSIGNED
    (129) struct_specifier -> . STRUCT identifier
    (130) struct_specifier -> . STRUCT { struct_declaration_list }
    (133) struct_specifier -> . STRUCT identifier { struct_declaration_list }

    }               shift and go to state 181
    INT             shift and go to state 15
    SHORT           shift and go to state 16
    LONG            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    BOOL            shift and go to state 22
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    STRUCT          shift and go to state 26

    struct_declaration             shift and go to state 106
    type                           shift and go to state 58
    type_specifier_can_unsigned    shift and go to state 12
    type_specifier_cannot_unsigned shift and go to state 13
    uorus                          shift and go to state 14
    struct_specifier               shift and go to state 23

state 105

    (130) struct_specifier -> STRUCT { struct_declaration_list } .

    *               reduce using rule 130 (struct_specifier -> STRUCT { struct_declaration_list } .)
    ID              reduce using rule 130 (struct_specifier -> STRUCT { struct_declaration_list } .)
    SIZEOF          reduce using rule 130 (struct_specifier -> STRUCT { struct_declaration_list } .)
    ;               reduce using rule 130 (struct_specifier -> STRUCT { struct_declaration_list } .)


state 106

    (135) struct_declaration_list -> struct_declaration_list struct_declaration .

    }               reduce using rule 135 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 135 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 135 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 135 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 135 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 135 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 135 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 135 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    BOOL            reduce using rule 135 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 135 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 135 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 135 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 107

    (136) struct_declaration -> type struct_variable_list . ;
    (138) struct_variable_list -> struct_variable_list . , variable

    ;               shift and go to state 182
    ,               shift and go to state 183


state 108

    (137) struct_variable_list -> variable .

    ;               reduce using rule 137 (struct_variable_list -> variable .)
    ,               reduce using rule 137 (struct_variable_list -> variable .)


state 109

    (83) funcbody_statement -> { block_item_list_orempty . }

    }               shift and go to state 184


state 110

    (70) block_item_list_orempty -> empty .
    (81) expression_orempty -> empty .

    }               reduce using rule 70 (block_item_list_orempty -> empty .)
    ;               reduce using rule 81 (expression_orempty -> empty .)


state 111

    (71) block_item_list_orempty -> block_item_list .
    (80) block_item_list -> block_item_list . block_item
    (76) block_item -> . declaration
    (77) block_item -> . statement
    (78) block_item -> . comment
    (37) declaration -> . type variable_initable_list_orempty ;
    (124) statement -> . funcbody_statement
    (125) statement -> . branch_statement
    (126) statement -> . expression_statement
    (127) statement -> . loop_statement
    (128) statement -> . back_statement
    (175) comment -> . COMMENT1
    (176) comment -> . COMMENT2
    (17) type -> . type_specifier_can_unsigned
    (18) type -> . type_specifier_cannot_unsigned
    (19) type -> . uorus
    (20) type -> . uorus type_specifier_can_unsigned
    (83) funcbody_statement -> . { block_item_list_orempty }
    (117) branch_statement -> . IF ( expression ) statement
    (118) branch_statement -> . IF ( expression ) statement ELSE statement
    (103) expression_statement -> . expression_orempty ;
    (119) loop_statement -> . WHILE ( expression ) statement
    (120) loop_statement -> . FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement
    (121) loop_statement -> . FOR ( expression ; expression_orempty ; expression_orempty ) statement
    (122) loop_statement -> . FOR ( empty ; expression_orempty ; expression_orempty ) statement
    (123) loop_statement -> . FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement
    (47) back_statement -> . BREAK ;
    (48) back_statement -> . CONTINUE ;
    (49) back_statement -> . RETURN ;
    (50) back_statement -> . RETURN expression ;
    (29) type_specifier_can_unsigned -> . INT
    (30) type_specifier_can_unsigned -> . SHORT
    (31) type_specifier_can_unsigned -> . LONG
    (32) type_specifier_can_unsigned -> . CHAR
    (24) type_specifier_cannot_unsigned -> . VOID
    (25) type_specifier_cannot_unsigned -> . FLOAT
    (26) type_specifier_cannot_unsigned -> . DOUBLE
    (27) type_specifier_cannot_unsigned -> . BOOL
    (28) type_specifier_cannot_unsigned -> . struct_specifier
    (33) uorus -> . SIGNED
    (34) uorus -> . UNSIGNED
    (81) expression_orempty -> . empty
    (82) expression_orempty -> . expression
    (129) struct_specifier -> . STRUCT identifier
    (130) struct_specifier -> . STRUCT { struct_declaration_list }
    (133) struct_specifier -> . STRUCT identifier { struct_declaration_list }
    (16) empty -> .
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    }               reduce using rule 71 (block_item_list_orempty -> block_item_list .)
    COMMENT1        shift and go to state 7
    COMMENT2        shift and go to state 8
    {               shift and go to state 61
    IF              shift and go to state 121
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    CONTINUE        shift and go to state 127
    RETURN          shift and go to state 128
    INT             shift and go to state 15
    SHORT           shift and go to state 16
    LONG            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    BOOL            shift and go to state 22
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    STRUCT          shift and go to state 26
    ;               reduce using rule 16 (empty -> .)
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    block_item                     shift and go to state 185
    declaration                    shift and go to state 113
    statement                      shift and go to state 114
    comment                        shift and go to state 115
    type                           shift and go to state 43
    funcbody_statement             shift and go to state 116
    branch_statement               shift and go to state 117
    expression_statement           shift and go to state 118
    loop_statement                 shift and go to state 119
    back_statement                 shift and go to state 120
    type_specifier_can_unsigned    shift and go to state 12
    type_specifier_cannot_unsigned shift and go to state 13
    uorus                          shift and go to state 14
    expression                     shift and go to state 122
    expression_orempty             shift and go to state 123
    empty                          shift and go to state 186
    struct_specifier               shift and go to state 23
    identifier                     shift and go to state 80
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 112

    (79) block_item_list -> block_item .

    COMMENT1        reduce using rule 79 (block_item_list -> block_item .)
    COMMENT2        reduce using rule 79 (block_item_list -> block_item .)
    {               reduce using rule 79 (block_item_list -> block_item .)
    IF              reduce using rule 79 (block_item_list -> block_item .)
    WHILE           reduce using rule 79 (block_item_list -> block_item .)
    FOR             reduce using rule 79 (block_item_list -> block_item .)
    BREAK           reduce using rule 79 (block_item_list -> block_item .)
    CONTINUE        reduce using rule 79 (block_item_list -> block_item .)
    RETURN          reduce using rule 79 (block_item_list -> block_item .)
    INT             reduce using rule 79 (block_item_list -> block_item .)
    SHORT           reduce using rule 79 (block_item_list -> block_item .)
    LONG            reduce using rule 79 (block_item_list -> block_item .)
    CHAR            reduce using rule 79 (block_item_list -> block_item .)
    VOID            reduce using rule 79 (block_item_list -> block_item .)
    FLOAT           reduce using rule 79 (block_item_list -> block_item .)
    DOUBLE          reduce using rule 79 (block_item_list -> block_item .)
    BOOL            reduce using rule 79 (block_item_list -> block_item .)
    SIGNED          reduce using rule 79 (block_item_list -> block_item .)
    UNSIGNED        reduce using rule 79 (block_item_list -> block_item .)
    STRUCT          reduce using rule 79 (block_item_list -> block_item .)
    &               reduce using rule 79 (block_item_list -> block_item .)
    *               reduce using rule 79 (block_item_list -> block_item .)
    +               reduce using rule 79 (block_item_list -> block_item .)
    -               reduce using rule 79 (block_item_list -> block_item .)
    ~               reduce using rule 79 (block_item_list -> block_item .)
    !               reduce using rule 79 (block_item_list -> block_item .)
    INC_OP          reduce using rule 79 (block_item_list -> block_item .)
    DEC_OP          reduce using rule 79 (block_item_list -> block_item .)
    (               reduce using rule 79 (block_item_list -> block_item .)
    ID              reduce using rule 79 (block_item_list -> block_item .)
    INTEGER_CONST   reduce using rule 79 (block_item_list -> block_item .)
    CHAR_CONST      reduce using rule 79 (block_item_list -> block_item .)
    FLOAT_CONST     reduce using rule 79 (block_item_list -> block_item .)
    BOOL_CONST      reduce using rule 79 (block_item_list -> block_item .)
    STRING_CONST    reduce using rule 79 (block_item_list -> block_item .)
    SIZEOF          reduce using rule 79 (block_item_list -> block_item .)
    ;               reduce using rule 79 (block_item_list -> block_item .)
    }               reduce using rule 79 (block_item_list -> block_item .)


state 113

    (76) block_item -> declaration .

    COMMENT1        reduce using rule 76 (block_item -> declaration .)
    COMMENT2        reduce using rule 76 (block_item -> declaration .)
    {               reduce using rule 76 (block_item -> declaration .)
    IF              reduce using rule 76 (block_item -> declaration .)
    WHILE           reduce using rule 76 (block_item -> declaration .)
    FOR             reduce using rule 76 (block_item -> declaration .)
    BREAK           reduce using rule 76 (block_item -> declaration .)
    CONTINUE        reduce using rule 76 (block_item -> declaration .)
    RETURN          reduce using rule 76 (block_item -> declaration .)
    INT             reduce using rule 76 (block_item -> declaration .)
    SHORT           reduce using rule 76 (block_item -> declaration .)
    LONG            reduce using rule 76 (block_item -> declaration .)
    CHAR            reduce using rule 76 (block_item -> declaration .)
    VOID            reduce using rule 76 (block_item -> declaration .)
    FLOAT           reduce using rule 76 (block_item -> declaration .)
    DOUBLE          reduce using rule 76 (block_item -> declaration .)
    BOOL            reduce using rule 76 (block_item -> declaration .)
    SIGNED          reduce using rule 76 (block_item -> declaration .)
    UNSIGNED        reduce using rule 76 (block_item -> declaration .)
    STRUCT          reduce using rule 76 (block_item -> declaration .)
    &               reduce using rule 76 (block_item -> declaration .)
    *               reduce using rule 76 (block_item -> declaration .)
    +               reduce using rule 76 (block_item -> declaration .)
    -               reduce using rule 76 (block_item -> declaration .)
    ~               reduce using rule 76 (block_item -> declaration .)
    !               reduce using rule 76 (block_item -> declaration .)
    INC_OP          reduce using rule 76 (block_item -> declaration .)
    DEC_OP          reduce using rule 76 (block_item -> declaration .)
    (               reduce using rule 76 (block_item -> declaration .)
    ID              reduce using rule 76 (block_item -> declaration .)
    INTEGER_CONST   reduce using rule 76 (block_item -> declaration .)
    CHAR_CONST      reduce using rule 76 (block_item -> declaration .)
    FLOAT_CONST     reduce using rule 76 (block_item -> declaration .)
    BOOL_CONST      reduce using rule 76 (block_item -> declaration .)
    STRING_CONST    reduce using rule 76 (block_item -> declaration .)
    SIZEOF          reduce using rule 76 (block_item -> declaration .)
    ;               reduce using rule 76 (block_item -> declaration .)
    }               reduce using rule 76 (block_item -> declaration .)


state 114

    (77) block_item -> statement .

    COMMENT1        reduce using rule 77 (block_item -> statement .)
    COMMENT2        reduce using rule 77 (block_item -> statement .)
    {               reduce using rule 77 (block_item -> statement .)
    IF              reduce using rule 77 (block_item -> statement .)
    WHILE           reduce using rule 77 (block_item -> statement .)
    FOR             reduce using rule 77 (block_item -> statement .)
    BREAK           reduce using rule 77 (block_item -> statement .)
    CONTINUE        reduce using rule 77 (block_item -> statement .)
    RETURN          reduce using rule 77 (block_item -> statement .)
    INT             reduce using rule 77 (block_item -> statement .)
    SHORT           reduce using rule 77 (block_item -> statement .)
    LONG            reduce using rule 77 (block_item -> statement .)
    CHAR            reduce using rule 77 (block_item -> statement .)
    VOID            reduce using rule 77 (block_item -> statement .)
    FLOAT           reduce using rule 77 (block_item -> statement .)
    DOUBLE          reduce using rule 77 (block_item -> statement .)
    BOOL            reduce using rule 77 (block_item -> statement .)
    SIGNED          reduce using rule 77 (block_item -> statement .)
    UNSIGNED        reduce using rule 77 (block_item -> statement .)
    STRUCT          reduce using rule 77 (block_item -> statement .)
    &               reduce using rule 77 (block_item -> statement .)
    *               reduce using rule 77 (block_item -> statement .)
    +               reduce using rule 77 (block_item -> statement .)
    -               reduce using rule 77 (block_item -> statement .)
    ~               reduce using rule 77 (block_item -> statement .)
    !               reduce using rule 77 (block_item -> statement .)
    INC_OP          reduce using rule 77 (block_item -> statement .)
    DEC_OP          reduce using rule 77 (block_item -> statement .)
    (               reduce using rule 77 (block_item -> statement .)
    ID              reduce using rule 77 (block_item -> statement .)
    INTEGER_CONST   reduce using rule 77 (block_item -> statement .)
    CHAR_CONST      reduce using rule 77 (block_item -> statement .)
    FLOAT_CONST     reduce using rule 77 (block_item -> statement .)
    BOOL_CONST      reduce using rule 77 (block_item -> statement .)
    STRING_CONST    reduce using rule 77 (block_item -> statement .)
    SIZEOF          reduce using rule 77 (block_item -> statement .)
    ;               reduce using rule 77 (block_item -> statement .)
    }               reduce using rule 77 (block_item -> statement .)


state 115

    (78) block_item -> comment .

    COMMENT1        reduce using rule 78 (block_item -> comment .)
    COMMENT2        reduce using rule 78 (block_item -> comment .)
    {               reduce using rule 78 (block_item -> comment .)
    IF              reduce using rule 78 (block_item -> comment .)
    WHILE           reduce using rule 78 (block_item -> comment .)
    FOR             reduce using rule 78 (block_item -> comment .)
    BREAK           reduce using rule 78 (block_item -> comment .)
    CONTINUE        reduce using rule 78 (block_item -> comment .)
    RETURN          reduce using rule 78 (block_item -> comment .)
    INT             reduce using rule 78 (block_item -> comment .)
    SHORT           reduce using rule 78 (block_item -> comment .)
    LONG            reduce using rule 78 (block_item -> comment .)
    CHAR            reduce using rule 78 (block_item -> comment .)
    VOID            reduce using rule 78 (block_item -> comment .)
    FLOAT           reduce using rule 78 (block_item -> comment .)
    DOUBLE          reduce using rule 78 (block_item -> comment .)
    BOOL            reduce using rule 78 (block_item -> comment .)
    SIGNED          reduce using rule 78 (block_item -> comment .)
    UNSIGNED        reduce using rule 78 (block_item -> comment .)
    STRUCT          reduce using rule 78 (block_item -> comment .)
    &               reduce using rule 78 (block_item -> comment .)
    *               reduce using rule 78 (block_item -> comment .)
    +               reduce using rule 78 (block_item -> comment .)
    -               reduce using rule 78 (block_item -> comment .)
    ~               reduce using rule 78 (block_item -> comment .)
    !               reduce using rule 78 (block_item -> comment .)
    INC_OP          reduce using rule 78 (block_item -> comment .)
    DEC_OP          reduce using rule 78 (block_item -> comment .)
    (               reduce using rule 78 (block_item -> comment .)
    ID              reduce using rule 78 (block_item -> comment .)
    INTEGER_CONST   reduce using rule 78 (block_item -> comment .)
    CHAR_CONST      reduce using rule 78 (block_item -> comment .)
    FLOAT_CONST     reduce using rule 78 (block_item -> comment .)
    BOOL_CONST      reduce using rule 78 (block_item -> comment .)
    STRING_CONST    reduce using rule 78 (block_item -> comment .)
    SIZEOF          reduce using rule 78 (block_item -> comment .)
    ;               reduce using rule 78 (block_item -> comment .)
    }               reduce using rule 78 (block_item -> comment .)


state 116

    (124) statement -> funcbody_statement .

    COMMENT1        reduce using rule 124 (statement -> funcbody_statement .)
    COMMENT2        reduce using rule 124 (statement -> funcbody_statement .)
    {               reduce using rule 124 (statement -> funcbody_statement .)
    IF              reduce using rule 124 (statement -> funcbody_statement .)
    WHILE           reduce using rule 124 (statement -> funcbody_statement .)
    FOR             reduce using rule 124 (statement -> funcbody_statement .)
    BREAK           reduce using rule 124 (statement -> funcbody_statement .)
    CONTINUE        reduce using rule 124 (statement -> funcbody_statement .)
    RETURN          reduce using rule 124 (statement -> funcbody_statement .)
    INT             reduce using rule 124 (statement -> funcbody_statement .)
    SHORT           reduce using rule 124 (statement -> funcbody_statement .)
    LONG            reduce using rule 124 (statement -> funcbody_statement .)
    CHAR            reduce using rule 124 (statement -> funcbody_statement .)
    VOID            reduce using rule 124 (statement -> funcbody_statement .)
    FLOAT           reduce using rule 124 (statement -> funcbody_statement .)
    DOUBLE          reduce using rule 124 (statement -> funcbody_statement .)
    BOOL            reduce using rule 124 (statement -> funcbody_statement .)
    SIGNED          reduce using rule 124 (statement -> funcbody_statement .)
    UNSIGNED        reduce using rule 124 (statement -> funcbody_statement .)
    STRUCT          reduce using rule 124 (statement -> funcbody_statement .)
    &               reduce using rule 124 (statement -> funcbody_statement .)
    *               reduce using rule 124 (statement -> funcbody_statement .)
    +               reduce using rule 124 (statement -> funcbody_statement .)
    -               reduce using rule 124 (statement -> funcbody_statement .)
    ~               reduce using rule 124 (statement -> funcbody_statement .)
    !               reduce using rule 124 (statement -> funcbody_statement .)
    INC_OP          reduce using rule 124 (statement -> funcbody_statement .)
    DEC_OP          reduce using rule 124 (statement -> funcbody_statement .)
    (               reduce using rule 124 (statement -> funcbody_statement .)
    ID              reduce using rule 124 (statement -> funcbody_statement .)
    INTEGER_CONST   reduce using rule 124 (statement -> funcbody_statement .)
    CHAR_CONST      reduce using rule 124 (statement -> funcbody_statement .)
    FLOAT_CONST     reduce using rule 124 (statement -> funcbody_statement .)
    BOOL_CONST      reduce using rule 124 (statement -> funcbody_statement .)
    STRING_CONST    reduce using rule 124 (statement -> funcbody_statement .)
    SIZEOF          reduce using rule 124 (statement -> funcbody_statement .)
    ;               reduce using rule 124 (statement -> funcbody_statement .)
    }               reduce using rule 124 (statement -> funcbody_statement .)
    ELSE            reduce using rule 124 (statement -> funcbody_statement .)


state 117

    (125) statement -> branch_statement .

    COMMENT1        reduce using rule 125 (statement -> branch_statement .)
    COMMENT2        reduce using rule 125 (statement -> branch_statement .)
    {               reduce using rule 125 (statement -> branch_statement .)
    IF              reduce using rule 125 (statement -> branch_statement .)
    WHILE           reduce using rule 125 (statement -> branch_statement .)
    FOR             reduce using rule 125 (statement -> branch_statement .)
    BREAK           reduce using rule 125 (statement -> branch_statement .)
    CONTINUE        reduce using rule 125 (statement -> branch_statement .)
    RETURN          reduce using rule 125 (statement -> branch_statement .)
    INT             reduce using rule 125 (statement -> branch_statement .)
    SHORT           reduce using rule 125 (statement -> branch_statement .)
    LONG            reduce using rule 125 (statement -> branch_statement .)
    CHAR            reduce using rule 125 (statement -> branch_statement .)
    VOID            reduce using rule 125 (statement -> branch_statement .)
    FLOAT           reduce using rule 125 (statement -> branch_statement .)
    DOUBLE          reduce using rule 125 (statement -> branch_statement .)
    BOOL            reduce using rule 125 (statement -> branch_statement .)
    SIGNED          reduce using rule 125 (statement -> branch_statement .)
    UNSIGNED        reduce using rule 125 (statement -> branch_statement .)
    STRUCT          reduce using rule 125 (statement -> branch_statement .)
    &               reduce using rule 125 (statement -> branch_statement .)
    *               reduce using rule 125 (statement -> branch_statement .)
    +               reduce using rule 125 (statement -> branch_statement .)
    -               reduce using rule 125 (statement -> branch_statement .)
    ~               reduce using rule 125 (statement -> branch_statement .)
    !               reduce using rule 125 (statement -> branch_statement .)
    INC_OP          reduce using rule 125 (statement -> branch_statement .)
    DEC_OP          reduce using rule 125 (statement -> branch_statement .)
    (               reduce using rule 125 (statement -> branch_statement .)
    ID              reduce using rule 125 (statement -> branch_statement .)
    INTEGER_CONST   reduce using rule 125 (statement -> branch_statement .)
    CHAR_CONST      reduce using rule 125 (statement -> branch_statement .)
    FLOAT_CONST     reduce using rule 125 (statement -> branch_statement .)
    BOOL_CONST      reduce using rule 125 (statement -> branch_statement .)
    STRING_CONST    reduce using rule 125 (statement -> branch_statement .)
    SIZEOF          reduce using rule 125 (statement -> branch_statement .)
    ;               reduce using rule 125 (statement -> branch_statement .)
    }               reduce using rule 125 (statement -> branch_statement .)
    ELSE            reduce using rule 125 (statement -> branch_statement .)


state 118

    (126) statement -> expression_statement .

    COMMENT1        reduce using rule 126 (statement -> expression_statement .)
    COMMENT2        reduce using rule 126 (statement -> expression_statement .)
    {               reduce using rule 126 (statement -> expression_statement .)
    IF              reduce using rule 126 (statement -> expression_statement .)
    WHILE           reduce using rule 126 (statement -> expression_statement .)
    FOR             reduce using rule 126 (statement -> expression_statement .)
    BREAK           reduce using rule 126 (statement -> expression_statement .)
    CONTINUE        reduce using rule 126 (statement -> expression_statement .)
    RETURN          reduce using rule 126 (statement -> expression_statement .)
    INT             reduce using rule 126 (statement -> expression_statement .)
    SHORT           reduce using rule 126 (statement -> expression_statement .)
    LONG            reduce using rule 126 (statement -> expression_statement .)
    CHAR            reduce using rule 126 (statement -> expression_statement .)
    VOID            reduce using rule 126 (statement -> expression_statement .)
    FLOAT           reduce using rule 126 (statement -> expression_statement .)
    DOUBLE          reduce using rule 126 (statement -> expression_statement .)
    BOOL            reduce using rule 126 (statement -> expression_statement .)
    SIGNED          reduce using rule 126 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 126 (statement -> expression_statement .)
    STRUCT          reduce using rule 126 (statement -> expression_statement .)
    &               reduce using rule 126 (statement -> expression_statement .)
    *               reduce using rule 126 (statement -> expression_statement .)
    +               reduce using rule 126 (statement -> expression_statement .)
    -               reduce using rule 126 (statement -> expression_statement .)
    ~               reduce using rule 126 (statement -> expression_statement .)
    !               reduce using rule 126 (statement -> expression_statement .)
    INC_OP          reduce using rule 126 (statement -> expression_statement .)
    DEC_OP          reduce using rule 126 (statement -> expression_statement .)
    (               reduce using rule 126 (statement -> expression_statement .)
    ID              reduce using rule 126 (statement -> expression_statement .)
    INTEGER_CONST   reduce using rule 126 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 126 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 126 (statement -> expression_statement .)
    BOOL_CONST      reduce using rule 126 (statement -> expression_statement .)
    STRING_CONST    reduce using rule 126 (statement -> expression_statement .)
    SIZEOF          reduce using rule 126 (statement -> expression_statement .)
    ;               reduce using rule 126 (statement -> expression_statement .)
    }               reduce using rule 126 (statement -> expression_statement .)
    ELSE            reduce using rule 126 (statement -> expression_statement .)


state 119

    (127) statement -> loop_statement .

    COMMENT1        reduce using rule 127 (statement -> loop_statement .)
    COMMENT2        reduce using rule 127 (statement -> loop_statement .)
    {               reduce using rule 127 (statement -> loop_statement .)
    IF              reduce using rule 127 (statement -> loop_statement .)
    WHILE           reduce using rule 127 (statement -> loop_statement .)
    FOR             reduce using rule 127 (statement -> loop_statement .)
    BREAK           reduce using rule 127 (statement -> loop_statement .)
    CONTINUE        reduce using rule 127 (statement -> loop_statement .)
    RETURN          reduce using rule 127 (statement -> loop_statement .)
    INT             reduce using rule 127 (statement -> loop_statement .)
    SHORT           reduce using rule 127 (statement -> loop_statement .)
    LONG            reduce using rule 127 (statement -> loop_statement .)
    CHAR            reduce using rule 127 (statement -> loop_statement .)
    VOID            reduce using rule 127 (statement -> loop_statement .)
    FLOAT           reduce using rule 127 (statement -> loop_statement .)
    DOUBLE          reduce using rule 127 (statement -> loop_statement .)
    BOOL            reduce using rule 127 (statement -> loop_statement .)
    SIGNED          reduce using rule 127 (statement -> loop_statement .)
    UNSIGNED        reduce using rule 127 (statement -> loop_statement .)
    STRUCT          reduce using rule 127 (statement -> loop_statement .)
    &               reduce using rule 127 (statement -> loop_statement .)
    *               reduce using rule 127 (statement -> loop_statement .)
    +               reduce using rule 127 (statement -> loop_statement .)
    -               reduce using rule 127 (statement -> loop_statement .)
    ~               reduce using rule 127 (statement -> loop_statement .)
    !               reduce using rule 127 (statement -> loop_statement .)
    INC_OP          reduce using rule 127 (statement -> loop_statement .)
    DEC_OP          reduce using rule 127 (statement -> loop_statement .)
    (               reduce using rule 127 (statement -> loop_statement .)
    ID              reduce using rule 127 (statement -> loop_statement .)
    INTEGER_CONST   reduce using rule 127 (statement -> loop_statement .)
    CHAR_CONST      reduce using rule 127 (statement -> loop_statement .)
    FLOAT_CONST     reduce using rule 127 (statement -> loop_statement .)
    BOOL_CONST      reduce using rule 127 (statement -> loop_statement .)
    STRING_CONST    reduce using rule 127 (statement -> loop_statement .)
    SIZEOF          reduce using rule 127 (statement -> loop_statement .)
    ;               reduce using rule 127 (statement -> loop_statement .)
    }               reduce using rule 127 (statement -> loop_statement .)
    ELSE            reduce using rule 127 (statement -> loop_statement .)


state 120

    (128) statement -> back_statement .

    COMMENT1        reduce using rule 128 (statement -> back_statement .)
    COMMENT2        reduce using rule 128 (statement -> back_statement .)
    {               reduce using rule 128 (statement -> back_statement .)
    IF              reduce using rule 128 (statement -> back_statement .)
    WHILE           reduce using rule 128 (statement -> back_statement .)
    FOR             reduce using rule 128 (statement -> back_statement .)
    BREAK           reduce using rule 128 (statement -> back_statement .)
    CONTINUE        reduce using rule 128 (statement -> back_statement .)
    RETURN          reduce using rule 128 (statement -> back_statement .)
    INT             reduce using rule 128 (statement -> back_statement .)
    SHORT           reduce using rule 128 (statement -> back_statement .)
    LONG            reduce using rule 128 (statement -> back_statement .)
    CHAR            reduce using rule 128 (statement -> back_statement .)
    VOID            reduce using rule 128 (statement -> back_statement .)
    FLOAT           reduce using rule 128 (statement -> back_statement .)
    DOUBLE          reduce using rule 128 (statement -> back_statement .)
    BOOL            reduce using rule 128 (statement -> back_statement .)
    SIGNED          reduce using rule 128 (statement -> back_statement .)
    UNSIGNED        reduce using rule 128 (statement -> back_statement .)
    STRUCT          reduce using rule 128 (statement -> back_statement .)
    &               reduce using rule 128 (statement -> back_statement .)
    *               reduce using rule 128 (statement -> back_statement .)
    +               reduce using rule 128 (statement -> back_statement .)
    -               reduce using rule 128 (statement -> back_statement .)
    ~               reduce using rule 128 (statement -> back_statement .)
    !               reduce using rule 128 (statement -> back_statement .)
    INC_OP          reduce using rule 128 (statement -> back_statement .)
    DEC_OP          reduce using rule 128 (statement -> back_statement .)
    (               reduce using rule 128 (statement -> back_statement .)
    ID              reduce using rule 128 (statement -> back_statement .)
    INTEGER_CONST   reduce using rule 128 (statement -> back_statement .)
    CHAR_CONST      reduce using rule 128 (statement -> back_statement .)
    FLOAT_CONST     reduce using rule 128 (statement -> back_statement .)
    BOOL_CONST      reduce using rule 128 (statement -> back_statement .)
    STRING_CONST    reduce using rule 128 (statement -> back_statement .)
    SIZEOF          reduce using rule 128 (statement -> back_statement .)
    ;               reduce using rule 128 (statement -> back_statement .)
    }               reduce using rule 128 (statement -> back_statement .)
    ELSE            reduce using rule 128 (statement -> back_statement .)


state 121

    (117) branch_statement -> IF . ( expression ) statement
    (118) branch_statement -> IF . ( expression ) statement ELSE statement

    (               shift and go to state 187


state 122

    (82) expression_orempty -> expression .
    (102) expression -> expression . , assignable_expression
    (86) ternary_expression -> expression . ? expression : expression

    ;               reduce using rule 82 (expression_orempty -> expression .)
    )               reduce using rule 82 (expression_orempty -> expression .)
    ,               shift and go to state 172
    ?               shift and go to state 171


state 123

    (103) expression_statement -> expression_orempty . ;

    ;               shift and go to state 188


state 124

    (119) loop_statement -> WHILE . ( expression ) statement

    (               shift and go to state 189


state 125

    (120) loop_statement -> FOR . ( parameter_declaration ; expression_orempty ; expression_orempty ) statement
    (121) loop_statement -> FOR . ( expression ; expression_orempty ; expression_orempty ) statement
    (122) loop_statement -> FOR . ( empty ; expression_orempty ; expression_orempty ) statement
    (123) loop_statement -> FOR . ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement

    (               shift and go to state 190


state 126

    (47) back_statement -> BREAK . ;

    ;               shift and go to state 191


state 127

    (48) back_statement -> CONTINUE . ;

    ;               shift and go to state 192


state 128

    (49) back_statement -> RETURN . ;
    (50) back_statement -> RETURN . expression ;
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    ;               shift and go to state 193
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    expression                     shift and go to state 194
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 129

    (101) expression -> assignable_expression .

    ,               reduce using rule 101 (expression -> assignable_expression .)
    ?               reduce using rule 101 (expression -> assignable_expression .)
    ;               reduce using rule 101 (expression -> assignable_expression .)
    )               reduce using rule 101 (expression -> assignable_expression .)
    ]               reduce using rule 101 (expression -> assignable_expression .)
    :               reduce using rule 101 (expression -> assignable_expression .)
    }               reduce using rule 101 (expression -> assignable_expression .)


state 130

    (8) initializer -> { initializer_list_orempty . }

    }               shift and go to state 195


state 131

    (9) initializer -> { initializer_list . , }
    (132) initializer_list_orempty -> initializer_list .
    (11) initializer_list -> initializer_list . , initializer

    ,               shift and go to state 196
    }               reduce using rule 132 (initializer_list_orempty -> initializer_list .)


state 132

    (131) initializer_list_orempty -> empty .

    }               reduce using rule 131 (initializer_list_orempty -> empty .)


state 133

    (10) initializer_list -> initializer .

    ,               reduce using rule 10 (initializer_list -> initializer .)
    }               reduce using rule 10 (initializer_list -> initializer .)


state 134

    (69) assignable_expression -> unary_expression assign_operator . assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    unary_expression               shift and go to state 66
    assignable_expression          shift and go to state 197
    conditional_expression         shift and go to state 65
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    expression                     shift and go to state 77
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 135

    (55) assign_operator -> = .

    &               reduce using rule 55 (assign_operator -> = .)
    *               reduce using rule 55 (assign_operator -> = .)
    +               reduce using rule 55 (assign_operator -> = .)
    -               reduce using rule 55 (assign_operator -> = .)
    ~               reduce using rule 55 (assign_operator -> = .)
    !               reduce using rule 55 (assign_operator -> = .)
    INC_OP          reduce using rule 55 (assign_operator -> = .)
    DEC_OP          reduce using rule 55 (assign_operator -> = .)
    (               reduce using rule 55 (assign_operator -> = .)
    ID              reduce using rule 55 (assign_operator -> = .)
    INTEGER_CONST   reduce using rule 55 (assign_operator -> = .)
    CHAR_CONST      reduce using rule 55 (assign_operator -> = .)
    FLOAT_CONST     reduce using rule 55 (assign_operator -> = .)
    BOOL_CONST      reduce using rule 55 (assign_operator -> = .)
    STRING_CONST    reduce using rule 55 (assign_operator -> = .)
    SIZEOF          reduce using rule 55 (assign_operator -> = .)


state 136

    (56) assign_operator -> MUL_ASG .

    &               reduce using rule 56 (assign_operator -> MUL_ASG .)
    *               reduce using rule 56 (assign_operator -> MUL_ASG .)
    +               reduce using rule 56 (assign_operator -> MUL_ASG .)
    -               reduce using rule 56 (assign_operator -> MUL_ASG .)
    ~               reduce using rule 56 (assign_operator -> MUL_ASG .)
    !               reduce using rule 56 (assign_operator -> MUL_ASG .)
    INC_OP          reduce using rule 56 (assign_operator -> MUL_ASG .)
    DEC_OP          reduce using rule 56 (assign_operator -> MUL_ASG .)
    (               reduce using rule 56 (assign_operator -> MUL_ASG .)
    ID              reduce using rule 56 (assign_operator -> MUL_ASG .)
    INTEGER_CONST   reduce using rule 56 (assign_operator -> MUL_ASG .)
    CHAR_CONST      reduce using rule 56 (assign_operator -> MUL_ASG .)
    FLOAT_CONST     reduce using rule 56 (assign_operator -> MUL_ASG .)
    BOOL_CONST      reduce using rule 56 (assign_operator -> MUL_ASG .)
    STRING_CONST    reduce using rule 56 (assign_operator -> MUL_ASG .)
    SIZEOF          reduce using rule 56 (assign_operator -> MUL_ASG .)


state 137

    (57) assign_operator -> DIV_ASG .

    &               reduce using rule 57 (assign_operator -> DIV_ASG .)
    *               reduce using rule 57 (assign_operator -> DIV_ASG .)
    +               reduce using rule 57 (assign_operator -> DIV_ASG .)
    -               reduce using rule 57 (assign_operator -> DIV_ASG .)
    ~               reduce using rule 57 (assign_operator -> DIV_ASG .)
    !               reduce using rule 57 (assign_operator -> DIV_ASG .)
    INC_OP          reduce using rule 57 (assign_operator -> DIV_ASG .)
    DEC_OP          reduce using rule 57 (assign_operator -> DIV_ASG .)
    (               reduce using rule 57 (assign_operator -> DIV_ASG .)
    ID              reduce using rule 57 (assign_operator -> DIV_ASG .)
    INTEGER_CONST   reduce using rule 57 (assign_operator -> DIV_ASG .)
    CHAR_CONST      reduce using rule 57 (assign_operator -> DIV_ASG .)
    FLOAT_CONST     reduce using rule 57 (assign_operator -> DIV_ASG .)
    BOOL_CONST      reduce using rule 57 (assign_operator -> DIV_ASG .)
    STRING_CONST    reduce using rule 57 (assign_operator -> DIV_ASG .)
    SIZEOF          reduce using rule 57 (assign_operator -> DIV_ASG .)


state 138

    (58) assign_operator -> MOD_ASG .

    &               reduce using rule 58 (assign_operator -> MOD_ASG .)
    *               reduce using rule 58 (assign_operator -> MOD_ASG .)
    +               reduce using rule 58 (assign_operator -> MOD_ASG .)
    -               reduce using rule 58 (assign_operator -> MOD_ASG .)
    ~               reduce using rule 58 (assign_operator -> MOD_ASG .)
    !               reduce using rule 58 (assign_operator -> MOD_ASG .)
    INC_OP          reduce using rule 58 (assign_operator -> MOD_ASG .)
    DEC_OP          reduce using rule 58 (assign_operator -> MOD_ASG .)
    (               reduce using rule 58 (assign_operator -> MOD_ASG .)
    ID              reduce using rule 58 (assign_operator -> MOD_ASG .)
    INTEGER_CONST   reduce using rule 58 (assign_operator -> MOD_ASG .)
    CHAR_CONST      reduce using rule 58 (assign_operator -> MOD_ASG .)
    FLOAT_CONST     reduce using rule 58 (assign_operator -> MOD_ASG .)
    BOOL_CONST      reduce using rule 58 (assign_operator -> MOD_ASG .)
    STRING_CONST    reduce using rule 58 (assign_operator -> MOD_ASG .)
    SIZEOF          reduce using rule 58 (assign_operator -> MOD_ASG .)


state 139

    (59) assign_operator -> ADD_ASG .

    &               reduce using rule 59 (assign_operator -> ADD_ASG .)
    *               reduce using rule 59 (assign_operator -> ADD_ASG .)
    +               reduce using rule 59 (assign_operator -> ADD_ASG .)
    -               reduce using rule 59 (assign_operator -> ADD_ASG .)
    ~               reduce using rule 59 (assign_operator -> ADD_ASG .)
    !               reduce using rule 59 (assign_operator -> ADD_ASG .)
    INC_OP          reduce using rule 59 (assign_operator -> ADD_ASG .)
    DEC_OP          reduce using rule 59 (assign_operator -> ADD_ASG .)
    (               reduce using rule 59 (assign_operator -> ADD_ASG .)
    ID              reduce using rule 59 (assign_operator -> ADD_ASG .)
    INTEGER_CONST   reduce using rule 59 (assign_operator -> ADD_ASG .)
    CHAR_CONST      reduce using rule 59 (assign_operator -> ADD_ASG .)
    FLOAT_CONST     reduce using rule 59 (assign_operator -> ADD_ASG .)
    BOOL_CONST      reduce using rule 59 (assign_operator -> ADD_ASG .)
    STRING_CONST    reduce using rule 59 (assign_operator -> ADD_ASG .)
    SIZEOF          reduce using rule 59 (assign_operator -> ADD_ASG .)


state 140

    (60) assign_operator -> SUB_ASG .

    &               reduce using rule 60 (assign_operator -> SUB_ASG .)
    *               reduce using rule 60 (assign_operator -> SUB_ASG .)
    +               reduce using rule 60 (assign_operator -> SUB_ASG .)
    -               reduce using rule 60 (assign_operator -> SUB_ASG .)
    ~               reduce using rule 60 (assign_operator -> SUB_ASG .)
    !               reduce using rule 60 (assign_operator -> SUB_ASG .)
    INC_OP          reduce using rule 60 (assign_operator -> SUB_ASG .)
    DEC_OP          reduce using rule 60 (assign_operator -> SUB_ASG .)
    (               reduce using rule 60 (assign_operator -> SUB_ASG .)
    ID              reduce using rule 60 (assign_operator -> SUB_ASG .)
    INTEGER_CONST   reduce using rule 60 (assign_operator -> SUB_ASG .)
    CHAR_CONST      reduce using rule 60 (assign_operator -> SUB_ASG .)
    FLOAT_CONST     reduce using rule 60 (assign_operator -> SUB_ASG .)
    BOOL_CONST      reduce using rule 60 (assign_operator -> SUB_ASG .)
    STRING_CONST    reduce using rule 60 (assign_operator -> SUB_ASG .)
    SIZEOF          reduce using rule 60 (assign_operator -> SUB_ASG .)


state 141

    (61) assign_operator -> LEFT_ASG .

    &               reduce using rule 61 (assign_operator -> LEFT_ASG .)
    *               reduce using rule 61 (assign_operator -> LEFT_ASG .)
    +               reduce using rule 61 (assign_operator -> LEFT_ASG .)
    -               reduce using rule 61 (assign_operator -> LEFT_ASG .)
    ~               reduce using rule 61 (assign_operator -> LEFT_ASG .)
    !               reduce using rule 61 (assign_operator -> LEFT_ASG .)
    INC_OP          reduce using rule 61 (assign_operator -> LEFT_ASG .)
    DEC_OP          reduce using rule 61 (assign_operator -> LEFT_ASG .)
    (               reduce using rule 61 (assign_operator -> LEFT_ASG .)
    ID              reduce using rule 61 (assign_operator -> LEFT_ASG .)
    INTEGER_CONST   reduce using rule 61 (assign_operator -> LEFT_ASG .)
    CHAR_CONST      reduce using rule 61 (assign_operator -> LEFT_ASG .)
    FLOAT_CONST     reduce using rule 61 (assign_operator -> LEFT_ASG .)
    BOOL_CONST      reduce using rule 61 (assign_operator -> LEFT_ASG .)
    STRING_CONST    reduce using rule 61 (assign_operator -> LEFT_ASG .)
    SIZEOF          reduce using rule 61 (assign_operator -> LEFT_ASG .)


state 142

    (62) assign_operator -> RIGHT_ASG .

    &               reduce using rule 62 (assign_operator -> RIGHT_ASG .)
    *               reduce using rule 62 (assign_operator -> RIGHT_ASG .)
    +               reduce using rule 62 (assign_operator -> RIGHT_ASG .)
    -               reduce using rule 62 (assign_operator -> RIGHT_ASG .)
    ~               reduce using rule 62 (assign_operator -> RIGHT_ASG .)
    !               reduce using rule 62 (assign_operator -> RIGHT_ASG .)
    INC_OP          reduce using rule 62 (assign_operator -> RIGHT_ASG .)
    DEC_OP          reduce using rule 62 (assign_operator -> RIGHT_ASG .)
    (               reduce using rule 62 (assign_operator -> RIGHT_ASG .)
    ID              reduce using rule 62 (assign_operator -> RIGHT_ASG .)
    INTEGER_CONST   reduce using rule 62 (assign_operator -> RIGHT_ASG .)
    CHAR_CONST      reduce using rule 62 (assign_operator -> RIGHT_ASG .)
    FLOAT_CONST     reduce using rule 62 (assign_operator -> RIGHT_ASG .)
    BOOL_CONST      reduce using rule 62 (assign_operator -> RIGHT_ASG .)
    STRING_CONST    reduce using rule 62 (assign_operator -> RIGHT_ASG .)
    SIZEOF          reduce using rule 62 (assign_operator -> RIGHT_ASG .)


state 143

    (63) assign_operator -> AND_ASG .

    &               reduce using rule 63 (assign_operator -> AND_ASG .)
    *               reduce using rule 63 (assign_operator -> AND_ASG .)
    +               reduce using rule 63 (assign_operator -> AND_ASG .)
    -               reduce using rule 63 (assign_operator -> AND_ASG .)
    ~               reduce using rule 63 (assign_operator -> AND_ASG .)
    !               reduce using rule 63 (assign_operator -> AND_ASG .)
    INC_OP          reduce using rule 63 (assign_operator -> AND_ASG .)
    DEC_OP          reduce using rule 63 (assign_operator -> AND_ASG .)
    (               reduce using rule 63 (assign_operator -> AND_ASG .)
    ID              reduce using rule 63 (assign_operator -> AND_ASG .)
    INTEGER_CONST   reduce using rule 63 (assign_operator -> AND_ASG .)
    CHAR_CONST      reduce using rule 63 (assign_operator -> AND_ASG .)
    FLOAT_CONST     reduce using rule 63 (assign_operator -> AND_ASG .)
    BOOL_CONST      reduce using rule 63 (assign_operator -> AND_ASG .)
    STRING_CONST    reduce using rule 63 (assign_operator -> AND_ASG .)
    SIZEOF          reduce using rule 63 (assign_operator -> AND_ASG .)


state 144

    (64) assign_operator -> XOR_ASG .

    &               reduce using rule 64 (assign_operator -> XOR_ASG .)
    *               reduce using rule 64 (assign_operator -> XOR_ASG .)
    +               reduce using rule 64 (assign_operator -> XOR_ASG .)
    -               reduce using rule 64 (assign_operator -> XOR_ASG .)
    ~               reduce using rule 64 (assign_operator -> XOR_ASG .)
    !               reduce using rule 64 (assign_operator -> XOR_ASG .)
    INC_OP          reduce using rule 64 (assign_operator -> XOR_ASG .)
    DEC_OP          reduce using rule 64 (assign_operator -> XOR_ASG .)
    (               reduce using rule 64 (assign_operator -> XOR_ASG .)
    ID              reduce using rule 64 (assign_operator -> XOR_ASG .)
    INTEGER_CONST   reduce using rule 64 (assign_operator -> XOR_ASG .)
    CHAR_CONST      reduce using rule 64 (assign_operator -> XOR_ASG .)
    FLOAT_CONST     reduce using rule 64 (assign_operator -> XOR_ASG .)
    BOOL_CONST      reduce using rule 64 (assign_operator -> XOR_ASG .)
    STRING_CONST    reduce using rule 64 (assign_operator -> XOR_ASG .)
    SIZEOF          reduce using rule 64 (assign_operator -> XOR_ASG .)


state 145

    (65) assign_operator -> OR_ASG .

    &               reduce using rule 65 (assign_operator -> OR_ASG .)
    *               reduce using rule 65 (assign_operator -> OR_ASG .)
    +               reduce using rule 65 (assign_operator -> OR_ASG .)
    -               reduce using rule 65 (assign_operator -> OR_ASG .)
    ~               reduce using rule 65 (assign_operator -> OR_ASG .)
    !               reduce using rule 65 (assign_operator -> OR_ASG .)
    INC_OP          reduce using rule 65 (assign_operator -> OR_ASG .)
    DEC_OP          reduce using rule 65 (assign_operator -> OR_ASG .)
    (               reduce using rule 65 (assign_operator -> OR_ASG .)
    ID              reduce using rule 65 (assign_operator -> OR_ASG .)
    INTEGER_CONST   reduce using rule 65 (assign_operator -> OR_ASG .)
    CHAR_CONST      reduce using rule 65 (assign_operator -> OR_ASG .)
    FLOAT_CONST     reduce using rule 65 (assign_operator -> OR_ASG .)
    BOOL_CONST      reduce using rule 65 (assign_operator -> OR_ASG .)
    STRING_CONST    reduce using rule 65 (assign_operator -> OR_ASG .)
    SIZEOF          reduce using rule 65 (assign_operator -> OR_ASG .)


state 146

    (156) binary_expression -> binary_expression * . binary_expression
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (174) cast_expression -> . unary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    binary_expression              shift and go to state 198
    cast_expression                shift and go to state 199
    unary_expression               shift and go to state 168
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 147

    (157) binary_expression -> binary_expression / . binary_expression
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (174) cast_expression -> . unary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    binary_expression              shift and go to state 200
    cast_expression                shift and go to state 199
    unary_expression               shift and go to state 168
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 148

    (158) binary_expression -> binary_expression % . binary_expression
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (174) cast_expression -> . unary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    binary_expression              shift and go to state 201
    cast_expression                shift and go to state 199
    unary_expression               shift and go to state 168
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 149

    (159) binary_expression -> binary_expression + . binary_expression
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (174) cast_expression -> . unary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    binary_expression              shift and go to state 202
    cast_expression                shift and go to state 199
    unary_expression               shift and go to state 168
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 150

    (160) binary_expression -> binary_expression - . binary_expression
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (174) cast_expression -> . unary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    binary_expression              shift and go to state 203
    cast_expression                shift and go to state 199
    unary_expression               shift and go to state 168
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 151

    (161) binary_expression -> binary_expression RIGHT_OP . binary_expression
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (174) cast_expression -> . unary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    binary_expression              shift and go to state 204
    cast_expression                shift and go to state 199
    unary_expression               shift and go to state 168
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 152

    (162) binary_expression -> binary_expression LEFT_OP . binary_expression
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (174) cast_expression -> . unary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    binary_expression              shift and go to state 205
    cast_expression                shift and go to state 199
    unary_expression               shift and go to state 168
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 153

    (163) binary_expression -> binary_expression < . binary_expression
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (174) cast_expression -> . unary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    binary_expression              shift and go to state 206
    cast_expression                shift and go to state 199
    unary_expression               shift and go to state 168
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 154

    (164) binary_expression -> binary_expression LTE . binary_expression
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (174) cast_expression -> . unary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    binary_expression              shift and go to state 207
    cast_expression                shift and go to state 199
    unary_expression               shift and go to state 168
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 155

    (165) binary_expression -> binary_expression GTE . binary_expression
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (174) cast_expression -> . unary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    binary_expression              shift and go to state 208
    cast_expression                shift and go to state 199
    unary_expression               shift and go to state 168
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 156

    (166) binary_expression -> binary_expression > . binary_expression
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (174) cast_expression -> . unary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    binary_expression              shift and go to state 209
    cast_expression                shift and go to state 199
    unary_expression               shift and go to state 168
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 157

    (167) binary_expression -> binary_expression EQ_OP . binary_expression
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (174) cast_expression -> . unary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    binary_expression              shift and go to state 210
    cast_expression                shift and go to state 199
    unary_expression               shift and go to state 168
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 158

    (168) binary_expression -> binary_expression NEQ_OP . binary_expression
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (174) cast_expression -> . unary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    binary_expression              shift and go to state 211
    cast_expression                shift and go to state 199
    unary_expression               shift and go to state 168
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 159

    (169) binary_expression -> binary_expression & . binary_expression
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (174) cast_expression -> . unary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    binary_expression              shift and go to state 212
    cast_expression                shift and go to state 199
    unary_expression               shift and go to state 168
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 160

    (170) binary_expression -> binary_expression | . binary_expression
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (174) cast_expression -> . unary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    binary_expression              shift and go to state 213
    cast_expression                shift and go to state 199
    unary_expression               shift and go to state 168
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 161

    (171) binary_expression -> binary_expression ^ . binary_expression
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (174) cast_expression -> . unary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    binary_expression              shift and go to state 214
    cast_expression                shift and go to state 199
    unary_expression               shift and go to state 168
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 162

    (172) binary_expression -> binary_expression AND_OP . binary_expression
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (174) cast_expression -> . unary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    binary_expression              shift and go to state 215
    cast_expression                shift and go to state 199
    unary_expression               shift and go to state 168
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 163

    (173) binary_expression -> binary_expression OR_OP . binary_expression
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (174) cast_expression -> . unary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    binary_expression              shift and go to state 216
    cast_expression                shift and go to state 199
    unary_expression               shift and go to state 168
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 164

    (109) uscd_expression -> uscd_expression [ . expression ]
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    uscd_expression                shift and go to state 69
    expression                     shift and go to state 217
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 165

    (110) uscd_expression -> uscd_expression ( . arg_value_exp_list )
    (111) uscd_expression -> uscd_expression ( . )
    (66) arg_value_exp_list -> . assignable_expression
    (67) arg_value_exp_list -> . arg_value_exp_list , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    )               shift and go to state 219
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    uscd_expression                shift and go to state 69
    arg_value_exp_list             shift and go to state 218
    assignable_expression          shift and go to state 220
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    expression                     shift and go to state 77
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 166

    (112) uscd_expression -> uscd_expression PTR_OP . identifier
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (46) inlinefunc -> . SIZEOF

    ID              shift and go to state 37
    SIZEOF          shift and go to state 39

    identifier                     shift and go to state 221
    inlinefunc                     shift and go to state 38

state 167

    (150) unary_expression -> unary_operator cast_expression .
    (152) unary_expression -> cast_expression . self_incdec
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP

  ! shift/reduce conflict for INC_OP resolved as shift
  ! shift/reduce conflict for DEC_OP resolved as shift
    =               reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    MUL_ASG         reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    DIV_ASG         reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    MOD_ASG         reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    ADD_ASG         reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    SUB_ASG         reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    LEFT_ASG        reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    RIGHT_ASG       reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    AND_ASG         reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    XOR_ASG         reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    OR_ASG          reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    *               reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    /               reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    %               reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    +               reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    -               reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    RIGHT_OP        reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    LEFT_OP         reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    <               reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    LTE             reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    GTE             reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    >               reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    EQ_OP           reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    NEQ_OP          reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    &               reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    |               reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    ^               reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    AND_OP          reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    OR_OP           reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    ,               reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    ;               reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    ?               reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    ]               reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    }               reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    )               reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    :               reduce using rule 150 (unary_expression -> unary_operator cast_expression .)
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84

  ! INC_OP          [ reduce using rule 150 (unary_expression -> unary_operator cast_expression .) ]
  ! DEC_OP          [ reduce using rule 150 (unary_expression -> unary_operator cast_expression .) ]

    self_incdec                    shift and go to state 169

state 168

    (174) cast_expression -> unary_expression .

    INC_OP          reduce using rule 174 (cast_expression -> unary_expression .)
    DEC_OP          reduce using rule 174 (cast_expression -> unary_expression .)
    =               reduce using rule 174 (cast_expression -> unary_expression .)
    MUL_ASG         reduce using rule 174 (cast_expression -> unary_expression .)
    DIV_ASG         reduce using rule 174 (cast_expression -> unary_expression .)
    MOD_ASG         reduce using rule 174 (cast_expression -> unary_expression .)
    ADD_ASG         reduce using rule 174 (cast_expression -> unary_expression .)
    SUB_ASG         reduce using rule 174 (cast_expression -> unary_expression .)
    LEFT_ASG        reduce using rule 174 (cast_expression -> unary_expression .)
    RIGHT_ASG       reduce using rule 174 (cast_expression -> unary_expression .)
    AND_ASG         reduce using rule 174 (cast_expression -> unary_expression .)
    XOR_ASG         reduce using rule 174 (cast_expression -> unary_expression .)
    OR_ASG          reduce using rule 174 (cast_expression -> unary_expression .)
    *               reduce using rule 174 (cast_expression -> unary_expression .)
    /               reduce using rule 174 (cast_expression -> unary_expression .)
    %               reduce using rule 174 (cast_expression -> unary_expression .)
    +               reduce using rule 174 (cast_expression -> unary_expression .)
    -               reduce using rule 174 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 174 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 174 (cast_expression -> unary_expression .)
    <               reduce using rule 174 (cast_expression -> unary_expression .)
    LTE             reduce using rule 174 (cast_expression -> unary_expression .)
    GTE             reduce using rule 174 (cast_expression -> unary_expression .)
    >               reduce using rule 174 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 174 (cast_expression -> unary_expression .)
    NEQ_OP          reduce using rule 174 (cast_expression -> unary_expression .)
    &               reduce using rule 174 (cast_expression -> unary_expression .)
    |               reduce using rule 174 (cast_expression -> unary_expression .)
    ^               reduce using rule 174 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 174 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 174 (cast_expression -> unary_expression .)
    ,               reduce using rule 174 (cast_expression -> unary_expression .)
    ;               reduce using rule 174 (cast_expression -> unary_expression .)
    ?               reduce using rule 174 (cast_expression -> unary_expression .)
    ]               reduce using rule 174 (cast_expression -> unary_expression .)
    }               reduce using rule 174 (cast_expression -> unary_expression .)
    )               reduce using rule 174 (cast_expression -> unary_expression .)
    :               reduce using rule 174 (cast_expression -> unary_expression .)


state 169

    (152) unary_expression -> cast_expression self_incdec .

    =               reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    MUL_ASG         reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    DIV_ASG         reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    MOD_ASG         reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    ADD_ASG         reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    SUB_ASG         reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    LEFT_ASG        reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    RIGHT_ASG       reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    AND_ASG         reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    XOR_ASG         reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    OR_ASG          reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    INC_OP          reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    DEC_OP          reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    *               reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    /               reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    %               reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    +               reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    -               reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    RIGHT_OP        reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    LEFT_OP         reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    <               reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    LTE             reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    GTE             reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    >               reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    EQ_OP           reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    NEQ_OP          reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    &               reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    |               reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    ^               reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    AND_OP          reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    OR_OP           reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    ,               reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    ;               reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    ?               reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    ]               reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    }               reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    )               reduce using rule 152 (unary_expression -> cast_expression self_incdec .)
    :               reduce using rule 152 (unary_expression -> cast_expression self_incdec .)


state 170

    (151) unary_expression -> self_incdec cast_expression .
    (152) unary_expression -> cast_expression . self_incdec
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP

  ! shift/reduce conflict for INC_OP resolved as shift
  ! shift/reduce conflict for DEC_OP resolved as shift
    =               reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    MUL_ASG         reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    DIV_ASG         reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    MOD_ASG         reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    ADD_ASG         reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    SUB_ASG         reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    LEFT_ASG        reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    RIGHT_ASG       reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    AND_ASG         reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    XOR_ASG         reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    OR_ASG          reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    *               reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    /               reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    %               reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    +               reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    -               reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    RIGHT_OP        reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    LEFT_OP         reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    <               reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    LTE             reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    GTE             reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    >               reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    EQ_OP           reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    NEQ_OP          reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    &               reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    |               reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    ^               reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    AND_OP          reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    OR_OP           reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    ,               reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    ;               reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    ?               reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    ]               reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    }               reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    )               reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    :               reduce using rule 151 (unary_expression -> self_incdec cast_expression .)
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84

  ! INC_OP          [ reduce using rule 151 (unary_expression -> self_incdec cast_expression .) ]
  ! DEC_OP          [ reduce using rule 151 (unary_expression -> self_incdec cast_expression .) ]

    self_incdec                    shift and go to state 169

state 171

    (86) ternary_expression -> expression ? . expression : expression
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    expression                     shift and go to state 222
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 172

    (102) expression -> expression , . assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    expression                     shift and go to state 77
    assignable_expression          shift and go to state 223
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 173

    (116) unit_expression -> ( expression . )
    (102) expression -> expression . , assignable_expression
    (86) ternary_expression -> expression . ? expression : expression

    )               shift and go to state 224
    ,               shift and go to state 172
    ?               shift and go to state 171


state 174

    (154) multiple_string -> multiple_string STRING_CONST .

    STRING_CONST    reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    [               reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    (               reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    PTR_OP          reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    =               reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    MUL_ASG         reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    DIV_ASG         reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    MOD_ASG         reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    ADD_ASG         reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    SUB_ASG         reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    LEFT_ASG        reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    RIGHT_ASG       reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    AND_ASG         reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    XOR_ASG         reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    OR_ASG          reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    INC_OP          reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    DEC_OP          reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    *               reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    /               reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    %               reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    +               reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    -               reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    RIGHT_OP        reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    LEFT_OP         reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    <               reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    LTE             reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    GTE             reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    >               reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    EQ_OP           reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    NEQ_OP          reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    &               reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    |               reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    ^               reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    AND_OP          reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    OR_OP           reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    ,               reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    ;               reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    ?               reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    ]               reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    }               reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    )               reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)
    :               reduce using rule 154 (multiple_string -> multiple_string STRING_CONST .)


state 175

    (96) direct_variable -> direct_variable [ assignable_expression_orempty ] .

    [               reduce using rule 96 (direct_variable -> direct_variable [ assignable_expression_orempty ] .)
    (               reduce using rule 96 (direct_variable -> direct_variable [ assignable_expression_orempty ] .)
    =               reduce using rule 96 (direct_variable -> direct_variable [ assignable_expression_orempty ] .)
    INT             reduce using rule 96 (direct_variable -> direct_variable [ assignable_expression_orempty ] .)
    SHORT           reduce using rule 96 (direct_variable -> direct_variable [ assignable_expression_orempty ] .)
    LONG            reduce using rule 96 (direct_variable -> direct_variable [ assignable_expression_orempty ] .)
    CHAR            reduce using rule 96 (direct_variable -> direct_variable [ assignable_expression_orempty ] .)
    VOID            reduce using rule 96 (direct_variable -> direct_variable [ assignable_expression_orempty ] .)
    FLOAT           reduce using rule 96 (direct_variable -> direct_variable [ assignable_expression_orempty ] .)
    DOUBLE          reduce using rule 96 (direct_variable -> direct_variable [ assignable_expression_orempty ] .)
    BOOL            reduce using rule 96 (direct_variable -> direct_variable [ assignable_expression_orempty ] .)
    SIGNED          reduce using rule 96 (direct_variable -> direct_variable [ assignable_expression_orempty ] .)
    UNSIGNED        reduce using rule 96 (direct_variable -> direct_variable [ assignable_expression_orempty ] .)
    STRUCT          reduce using rule 96 (direct_variable -> direct_variable [ assignable_expression_orempty ] .)
    {               reduce using rule 96 (direct_variable -> direct_variable [ assignable_expression_orempty ] .)
    ,               reduce using rule 96 (direct_variable -> direct_variable [ assignable_expression_orempty ] .)
    ;               reduce using rule 96 (direct_variable -> direct_variable [ assignable_expression_orempty ] .)
    )               reduce using rule 96 (direct_variable -> direct_variable [ assignable_expression_orempty ] .)


state 176

    (97) direct_variable -> direct_variable ( parameter_list ) .

    [               reduce using rule 97 (direct_variable -> direct_variable ( parameter_list ) .)
    (               reduce using rule 97 (direct_variable -> direct_variable ( parameter_list ) .)
    =               reduce using rule 97 (direct_variable -> direct_variable ( parameter_list ) .)
    INT             reduce using rule 97 (direct_variable -> direct_variable ( parameter_list ) .)
    SHORT           reduce using rule 97 (direct_variable -> direct_variable ( parameter_list ) .)
    LONG            reduce using rule 97 (direct_variable -> direct_variable ( parameter_list ) .)
    CHAR            reduce using rule 97 (direct_variable -> direct_variable ( parameter_list ) .)
    VOID            reduce using rule 97 (direct_variable -> direct_variable ( parameter_list ) .)
    FLOAT           reduce using rule 97 (direct_variable -> direct_variable ( parameter_list ) .)
    DOUBLE          reduce using rule 97 (direct_variable -> direct_variable ( parameter_list ) .)
    BOOL            reduce using rule 97 (direct_variable -> direct_variable ( parameter_list ) .)
    SIGNED          reduce using rule 97 (direct_variable -> direct_variable ( parameter_list ) .)
    UNSIGNED        reduce using rule 97 (direct_variable -> direct_variable ( parameter_list ) .)
    STRUCT          reduce using rule 97 (direct_variable -> direct_variable ( parameter_list ) .)
    {               reduce using rule 97 (direct_variable -> direct_variable ( parameter_list ) .)
    ,               reduce using rule 97 (direct_variable -> direct_variable ( parameter_list ) .)
    ;               reduce using rule 97 (direct_variable -> direct_variable ( parameter_list ) .)
    )               reduce using rule 97 (direct_variable -> direct_variable ( parameter_list ) .)


state 177

    (106) parameter_list -> parameter_list , . parameter_declaration
    (107) parameter_declaration -> . type variable
    (17) type -> . type_specifier_can_unsigned
    (18) type -> . type_specifier_cannot_unsigned
    (19) type -> . uorus
    (20) type -> . uorus type_specifier_can_unsigned
    (29) type_specifier_can_unsigned -> . INT
    (30) type_specifier_can_unsigned -> . SHORT
    (31) type_specifier_can_unsigned -> . LONG
    (32) type_specifier_can_unsigned -> . CHAR
    (24) type_specifier_cannot_unsigned -> . VOID
    (25) type_specifier_cannot_unsigned -> . FLOAT
    (26) type_specifier_cannot_unsigned -> . DOUBLE
    (27) type_specifier_cannot_unsigned -> . BOOL
    (28) type_specifier_cannot_unsigned -> . struct_specifier
    (33) uorus -> . SIGNED
    (34) uorus -> . UNSIGNED
    (129) struct_specifier -> . STRUCT identifier
    (130) struct_specifier -> . STRUCT { struct_declaration_list }
    (133) struct_specifier -> . STRUCT identifier { struct_declaration_list }

    INT             shift and go to state 15
    SHORT           shift and go to state 16
    LONG            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    BOOL            shift and go to state 22
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    STRUCT          shift and go to state 26

    parameter_declaration          shift and go to state 225
    type                           shift and go to state 101
    type_specifier_can_unsigned    shift and go to state 12
    type_specifier_cannot_unsigned shift and go to state 13
    uorus                          shift and go to state 14
    struct_specifier               shift and go to state 23

state 178

    (98) direct_variable -> direct_variable ( identifier_list_orempty ) .

    [               reduce using rule 98 (direct_variable -> direct_variable ( identifier_list_orempty ) .)
    (               reduce using rule 98 (direct_variable -> direct_variable ( identifier_list_orempty ) .)
    =               reduce using rule 98 (direct_variable -> direct_variable ( identifier_list_orempty ) .)
    INT             reduce using rule 98 (direct_variable -> direct_variable ( identifier_list_orempty ) .)
    SHORT           reduce using rule 98 (direct_variable -> direct_variable ( identifier_list_orempty ) .)
    LONG            reduce using rule 98 (direct_variable -> direct_variable ( identifier_list_orempty ) .)
    CHAR            reduce using rule 98 (direct_variable -> direct_variable ( identifier_list_orempty ) .)
    VOID            reduce using rule 98 (direct_variable -> direct_variable ( identifier_list_orempty ) .)
    FLOAT           reduce using rule 98 (direct_variable -> direct_variable ( identifier_list_orempty ) .)
    DOUBLE          reduce using rule 98 (direct_variable -> direct_variable ( identifier_list_orempty ) .)
    BOOL            reduce using rule 98 (direct_variable -> direct_variable ( identifier_list_orempty ) .)
    SIGNED          reduce using rule 98 (direct_variable -> direct_variable ( identifier_list_orempty ) .)
    UNSIGNED        reduce using rule 98 (direct_variable -> direct_variable ( identifier_list_orempty ) .)
    STRUCT          reduce using rule 98 (direct_variable -> direct_variable ( identifier_list_orempty ) .)
    {               reduce using rule 98 (direct_variable -> direct_variable ( identifier_list_orempty ) .)
    ,               reduce using rule 98 (direct_variable -> direct_variable ( identifier_list_orempty ) .)
    ;               reduce using rule 98 (direct_variable -> direct_variable ( identifier_list_orempty ) .)
    )               reduce using rule 98 (direct_variable -> direct_variable ( identifier_list_orempty ) .)


state 179

    (43) identifier_list -> identifier_list , . identifier
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (46) inlinefunc -> . SIZEOF

    ID              shift and go to state 37
    SIZEOF          shift and go to state 39

    identifier                     shift and go to state 226
    inlinefunc                     shift and go to state 38

state 180

    (107) parameter_declaration -> type variable .

    )               reduce using rule 107 (parameter_declaration -> type variable .)
    ,               reduce using rule 107 (parameter_declaration -> type variable .)
    ;               reduce using rule 107 (parameter_declaration -> type variable .)
    =               reduce using rule 107 (parameter_declaration -> type variable .)


state 181

    (133) struct_specifier -> STRUCT identifier { struct_declaration_list } .

    *               reduce using rule 133 (struct_specifier -> STRUCT identifier { struct_declaration_list } .)
    ID              reduce using rule 133 (struct_specifier -> STRUCT identifier { struct_declaration_list } .)
    SIZEOF          reduce using rule 133 (struct_specifier -> STRUCT identifier { struct_declaration_list } .)
    ;               reduce using rule 133 (struct_specifier -> STRUCT identifier { struct_declaration_list } .)


state 182

    (136) struct_declaration -> type struct_variable_list ; .

    }               reduce using rule 136 (struct_declaration -> type struct_variable_list ; .)
    INT             reduce using rule 136 (struct_declaration -> type struct_variable_list ; .)
    SHORT           reduce using rule 136 (struct_declaration -> type struct_variable_list ; .)
    LONG            reduce using rule 136 (struct_declaration -> type struct_variable_list ; .)
    CHAR            reduce using rule 136 (struct_declaration -> type struct_variable_list ; .)
    VOID            reduce using rule 136 (struct_declaration -> type struct_variable_list ; .)
    FLOAT           reduce using rule 136 (struct_declaration -> type struct_variable_list ; .)
    DOUBLE          reduce using rule 136 (struct_declaration -> type struct_variable_list ; .)
    BOOL            reduce using rule 136 (struct_declaration -> type struct_variable_list ; .)
    SIGNED          reduce using rule 136 (struct_declaration -> type struct_variable_list ; .)
    UNSIGNED        reduce using rule 136 (struct_declaration -> type struct_variable_list ; .)
    STRUCT          reduce using rule 136 (struct_declaration -> type struct_variable_list ; .)


state 183

    (138) struct_variable_list -> struct_variable_list , . variable
    (92) variable -> . direct_variable
    (93) variable -> . pointer direct_variable
    (95) direct_variable -> . identifier
    (96) direct_variable -> . direct_variable [ assignable_expression_orempty ]
    (97) direct_variable -> . direct_variable ( parameter_list )
    (98) direct_variable -> . direct_variable ( identifier_list_orempty )
    (139) pointer -> . *
    (140) pointer -> . * pointer
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (46) inlinefunc -> . SIZEOF

    *               shift and go to state 35
    ID              shift and go to state 37
    SIZEOF          shift and go to state 39

    variable                       shift and go to state 227
    direct_variable                shift and go to state 30
    pointer                        shift and go to state 31
    identifier                     shift and go to state 34
    inlinefunc                     shift and go to state 38

state 184

    (83) funcbody_statement -> { block_item_list_orempty } .

    COMMENT1        reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    COMMENT2        reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    INT             reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    SHORT           reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    LONG            reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    CHAR            reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    VOID            reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    FLOAT           reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    DOUBLE          reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    BOOL            reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    SIGNED          reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    UNSIGNED        reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    STRUCT          reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    $end            reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    {               reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    IF              reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    WHILE           reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    FOR             reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    BREAK           reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    CONTINUE        reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    RETURN          reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    &               reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    *               reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    +               reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    -               reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    ~               reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    !               reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    INC_OP          reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    DEC_OP          reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    (               reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    ID              reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    INTEGER_CONST   reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    CHAR_CONST      reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    FLOAT_CONST     reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    BOOL_CONST      reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    STRING_CONST    reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    SIZEOF          reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    ;               reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    }               reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)
    ELSE            reduce using rule 83 (funcbody_statement -> { block_item_list_orempty } .)


state 185

    (80) block_item_list -> block_item_list block_item .

    COMMENT1        reduce using rule 80 (block_item_list -> block_item_list block_item .)
    COMMENT2        reduce using rule 80 (block_item_list -> block_item_list block_item .)
    {               reduce using rule 80 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 80 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 80 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 80 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 80 (block_item_list -> block_item_list block_item .)
    CONTINUE        reduce using rule 80 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 80 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 80 (block_item_list -> block_item_list block_item .)
    SHORT           reduce using rule 80 (block_item_list -> block_item_list block_item .)
    LONG            reduce using rule 80 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 80 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 80 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 80 (block_item_list -> block_item_list block_item .)
    DOUBLE          reduce using rule 80 (block_item_list -> block_item_list block_item .)
    BOOL            reduce using rule 80 (block_item_list -> block_item_list block_item .)
    SIGNED          reduce using rule 80 (block_item_list -> block_item_list block_item .)
    UNSIGNED        reduce using rule 80 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 80 (block_item_list -> block_item_list block_item .)
    &               reduce using rule 80 (block_item_list -> block_item_list block_item .)
    *               reduce using rule 80 (block_item_list -> block_item_list block_item .)
    +               reduce using rule 80 (block_item_list -> block_item_list block_item .)
    -               reduce using rule 80 (block_item_list -> block_item_list block_item .)
    ~               reduce using rule 80 (block_item_list -> block_item_list block_item .)
    !               reduce using rule 80 (block_item_list -> block_item_list block_item .)
    INC_OP          reduce using rule 80 (block_item_list -> block_item_list block_item .)
    DEC_OP          reduce using rule 80 (block_item_list -> block_item_list block_item .)
    (               reduce using rule 80 (block_item_list -> block_item_list block_item .)
    ID              reduce using rule 80 (block_item_list -> block_item_list block_item .)
    INTEGER_CONST   reduce using rule 80 (block_item_list -> block_item_list block_item .)
    CHAR_CONST      reduce using rule 80 (block_item_list -> block_item_list block_item .)
    FLOAT_CONST     reduce using rule 80 (block_item_list -> block_item_list block_item .)
    BOOL_CONST      reduce using rule 80 (block_item_list -> block_item_list block_item .)
    STRING_CONST    reduce using rule 80 (block_item_list -> block_item_list block_item .)
    SIZEOF          reduce using rule 80 (block_item_list -> block_item_list block_item .)
    ;               reduce using rule 80 (block_item_list -> block_item_list block_item .)
    }               reduce using rule 80 (block_item_list -> block_item_list block_item .)


state 186

    (81) expression_orempty -> empty .

    ;               reduce using rule 81 (expression_orempty -> empty .)
    )               reduce using rule 81 (expression_orempty -> empty .)


state 187

    (117) branch_statement -> IF ( . expression ) statement
    (118) branch_statement -> IF ( . expression ) statement ELSE statement
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    expression                     shift and go to state 228
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 188

    (103) expression_statement -> expression_orempty ; .

    COMMENT1        reduce using rule 103 (expression_statement -> expression_orempty ; .)
    COMMENT2        reduce using rule 103 (expression_statement -> expression_orempty ; .)
    {               reduce using rule 103 (expression_statement -> expression_orempty ; .)
    IF              reduce using rule 103 (expression_statement -> expression_orempty ; .)
    WHILE           reduce using rule 103 (expression_statement -> expression_orempty ; .)
    FOR             reduce using rule 103 (expression_statement -> expression_orempty ; .)
    BREAK           reduce using rule 103 (expression_statement -> expression_orempty ; .)
    CONTINUE        reduce using rule 103 (expression_statement -> expression_orempty ; .)
    RETURN          reduce using rule 103 (expression_statement -> expression_orempty ; .)
    INT             reduce using rule 103 (expression_statement -> expression_orempty ; .)
    SHORT           reduce using rule 103 (expression_statement -> expression_orempty ; .)
    LONG            reduce using rule 103 (expression_statement -> expression_orempty ; .)
    CHAR            reduce using rule 103 (expression_statement -> expression_orempty ; .)
    VOID            reduce using rule 103 (expression_statement -> expression_orempty ; .)
    FLOAT           reduce using rule 103 (expression_statement -> expression_orempty ; .)
    DOUBLE          reduce using rule 103 (expression_statement -> expression_orempty ; .)
    BOOL            reduce using rule 103 (expression_statement -> expression_orempty ; .)
    SIGNED          reduce using rule 103 (expression_statement -> expression_orempty ; .)
    UNSIGNED        reduce using rule 103 (expression_statement -> expression_orempty ; .)
    STRUCT          reduce using rule 103 (expression_statement -> expression_orempty ; .)
    &               reduce using rule 103 (expression_statement -> expression_orempty ; .)
    *               reduce using rule 103 (expression_statement -> expression_orempty ; .)
    +               reduce using rule 103 (expression_statement -> expression_orempty ; .)
    -               reduce using rule 103 (expression_statement -> expression_orempty ; .)
    ~               reduce using rule 103 (expression_statement -> expression_orempty ; .)
    !               reduce using rule 103 (expression_statement -> expression_orempty ; .)
    INC_OP          reduce using rule 103 (expression_statement -> expression_orempty ; .)
    DEC_OP          reduce using rule 103 (expression_statement -> expression_orempty ; .)
    (               reduce using rule 103 (expression_statement -> expression_orempty ; .)
    ID              reduce using rule 103 (expression_statement -> expression_orempty ; .)
    INTEGER_CONST   reduce using rule 103 (expression_statement -> expression_orempty ; .)
    CHAR_CONST      reduce using rule 103 (expression_statement -> expression_orempty ; .)
    FLOAT_CONST     reduce using rule 103 (expression_statement -> expression_orempty ; .)
    BOOL_CONST      reduce using rule 103 (expression_statement -> expression_orempty ; .)
    STRING_CONST    reduce using rule 103 (expression_statement -> expression_orempty ; .)
    SIZEOF          reduce using rule 103 (expression_statement -> expression_orempty ; .)
    ;               reduce using rule 103 (expression_statement -> expression_orempty ; .)
    }               reduce using rule 103 (expression_statement -> expression_orempty ; .)
    ELSE            reduce using rule 103 (expression_statement -> expression_orempty ; .)


state 189

    (119) loop_statement -> WHILE ( . expression ) statement
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    expression                     shift and go to state 229
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 190

    (120) loop_statement -> FOR ( . parameter_declaration ; expression_orempty ; expression_orempty ) statement
    (121) loop_statement -> FOR ( . expression ; expression_orempty ; expression_orempty ) statement
    (122) loop_statement -> FOR ( . empty ; expression_orempty ; expression_orempty ) statement
    (123) loop_statement -> FOR ( . parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement
    (107) parameter_declaration -> . type variable
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (16) empty -> .
    (17) type -> . type_specifier_can_unsigned
    (18) type -> . type_specifier_cannot_unsigned
    (19) type -> . uorus
    (20) type -> . uorus type_specifier_can_unsigned
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (29) type_specifier_can_unsigned -> . INT
    (30) type_specifier_can_unsigned -> . SHORT
    (31) type_specifier_can_unsigned -> . LONG
    (32) type_specifier_can_unsigned -> . CHAR
    (24) type_specifier_cannot_unsigned -> . VOID
    (25) type_specifier_cannot_unsigned -> . FLOAT
    (26) type_specifier_cannot_unsigned -> . DOUBLE
    (27) type_specifier_cannot_unsigned -> . BOOL
    (28) type_specifier_cannot_unsigned -> . struct_specifier
    (33) uorus -> . SIGNED
    (34) uorus -> . UNSIGNED
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (129) struct_specifier -> . STRUCT identifier
    (130) struct_specifier -> . STRUCT { struct_declaration_list }
    (133) struct_specifier -> . STRUCT identifier { struct_declaration_list }
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    ;               reduce using rule 16 (empty -> .)
    INT             shift and go to state 15
    SHORT           shift and go to state 16
    LONG            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    BOOL            shift and go to state 22
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    STRUCT          shift and go to state 26
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    parameter_declaration          shift and go to state 230
    expression                     shift and go to state 231
    empty                          shift and go to state 232
    type                           shift and go to state 101
    assignable_expression          shift and go to state 129
    type_specifier_can_unsigned    shift and go to state 12
    type_specifier_cannot_unsigned shift and go to state 13
    uorus                          shift and go to state 14
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    struct_specifier               shift and go to state 23
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    identifier                     shift and go to state 80
    unit_expression                shift and go to state 78
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 191

    (47) back_statement -> BREAK ; .

    COMMENT1        reduce using rule 47 (back_statement -> BREAK ; .)
    COMMENT2        reduce using rule 47 (back_statement -> BREAK ; .)
    {               reduce using rule 47 (back_statement -> BREAK ; .)
    IF              reduce using rule 47 (back_statement -> BREAK ; .)
    WHILE           reduce using rule 47 (back_statement -> BREAK ; .)
    FOR             reduce using rule 47 (back_statement -> BREAK ; .)
    BREAK           reduce using rule 47 (back_statement -> BREAK ; .)
    CONTINUE        reduce using rule 47 (back_statement -> BREAK ; .)
    RETURN          reduce using rule 47 (back_statement -> BREAK ; .)
    INT             reduce using rule 47 (back_statement -> BREAK ; .)
    SHORT           reduce using rule 47 (back_statement -> BREAK ; .)
    LONG            reduce using rule 47 (back_statement -> BREAK ; .)
    CHAR            reduce using rule 47 (back_statement -> BREAK ; .)
    VOID            reduce using rule 47 (back_statement -> BREAK ; .)
    FLOAT           reduce using rule 47 (back_statement -> BREAK ; .)
    DOUBLE          reduce using rule 47 (back_statement -> BREAK ; .)
    BOOL            reduce using rule 47 (back_statement -> BREAK ; .)
    SIGNED          reduce using rule 47 (back_statement -> BREAK ; .)
    UNSIGNED        reduce using rule 47 (back_statement -> BREAK ; .)
    STRUCT          reduce using rule 47 (back_statement -> BREAK ; .)
    &               reduce using rule 47 (back_statement -> BREAK ; .)
    *               reduce using rule 47 (back_statement -> BREAK ; .)
    +               reduce using rule 47 (back_statement -> BREAK ; .)
    -               reduce using rule 47 (back_statement -> BREAK ; .)
    ~               reduce using rule 47 (back_statement -> BREAK ; .)
    !               reduce using rule 47 (back_statement -> BREAK ; .)
    INC_OP          reduce using rule 47 (back_statement -> BREAK ; .)
    DEC_OP          reduce using rule 47 (back_statement -> BREAK ; .)
    (               reduce using rule 47 (back_statement -> BREAK ; .)
    ID              reduce using rule 47 (back_statement -> BREAK ; .)
    INTEGER_CONST   reduce using rule 47 (back_statement -> BREAK ; .)
    CHAR_CONST      reduce using rule 47 (back_statement -> BREAK ; .)
    FLOAT_CONST     reduce using rule 47 (back_statement -> BREAK ; .)
    BOOL_CONST      reduce using rule 47 (back_statement -> BREAK ; .)
    STRING_CONST    reduce using rule 47 (back_statement -> BREAK ; .)
    SIZEOF          reduce using rule 47 (back_statement -> BREAK ; .)
    ;               reduce using rule 47 (back_statement -> BREAK ; .)
    }               reduce using rule 47 (back_statement -> BREAK ; .)
    ELSE            reduce using rule 47 (back_statement -> BREAK ; .)


state 192

    (48) back_statement -> CONTINUE ; .

    COMMENT1        reduce using rule 48 (back_statement -> CONTINUE ; .)
    COMMENT2        reduce using rule 48 (back_statement -> CONTINUE ; .)
    {               reduce using rule 48 (back_statement -> CONTINUE ; .)
    IF              reduce using rule 48 (back_statement -> CONTINUE ; .)
    WHILE           reduce using rule 48 (back_statement -> CONTINUE ; .)
    FOR             reduce using rule 48 (back_statement -> CONTINUE ; .)
    BREAK           reduce using rule 48 (back_statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 48 (back_statement -> CONTINUE ; .)
    RETURN          reduce using rule 48 (back_statement -> CONTINUE ; .)
    INT             reduce using rule 48 (back_statement -> CONTINUE ; .)
    SHORT           reduce using rule 48 (back_statement -> CONTINUE ; .)
    LONG            reduce using rule 48 (back_statement -> CONTINUE ; .)
    CHAR            reduce using rule 48 (back_statement -> CONTINUE ; .)
    VOID            reduce using rule 48 (back_statement -> CONTINUE ; .)
    FLOAT           reduce using rule 48 (back_statement -> CONTINUE ; .)
    DOUBLE          reduce using rule 48 (back_statement -> CONTINUE ; .)
    BOOL            reduce using rule 48 (back_statement -> CONTINUE ; .)
    SIGNED          reduce using rule 48 (back_statement -> CONTINUE ; .)
    UNSIGNED        reduce using rule 48 (back_statement -> CONTINUE ; .)
    STRUCT          reduce using rule 48 (back_statement -> CONTINUE ; .)
    &               reduce using rule 48 (back_statement -> CONTINUE ; .)
    *               reduce using rule 48 (back_statement -> CONTINUE ; .)
    +               reduce using rule 48 (back_statement -> CONTINUE ; .)
    -               reduce using rule 48 (back_statement -> CONTINUE ; .)
    ~               reduce using rule 48 (back_statement -> CONTINUE ; .)
    !               reduce using rule 48 (back_statement -> CONTINUE ; .)
    INC_OP          reduce using rule 48 (back_statement -> CONTINUE ; .)
    DEC_OP          reduce using rule 48 (back_statement -> CONTINUE ; .)
    (               reduce using rule 48 (back_statement -> CONTINUE ; .)
    ID              reduce using rule 48 (back_statement -> CONTINUE ; .)
    INTEGER_CONST   reduce using rule 48 (back_statement -> CONTINUE ; .)
    CHAR_CONST      reduce using rule 48 (back_statement -> CONTINUE ; .)
    FLOAT_CONST     reduce using rule 48 (back_statement -> CONTINUE ; .)
    BOOL_CONST      reduce using rule 48 (back_statement -> CONTINUE ; .)
    STRING_CONST    reduce using rule 48 (back_statement -> CONTINUE ; .)
    SIZEOF          reduce using rule 48 (back_statement -> CONTINUE ; .)
    ;               reduce using rule 48 (back_statement -> CONTINUE ; .)
    }               reduce using rule 48 (back_statement -> CONTINUE ; .)
    ELSE            reduce using rule 48 (back_statement -> CONTINUE ; .)


state 193

    (49) back_statement -> RETURN ; .

    COMMENT1        reduce using rule 49 (back_statement -> RETURN ; .)
    COMMENT2        reduce using rule 49 (back_statement -> RETURN ; .)
    {               reduce using rule 49 (back_statement -> RETURN ; .)
    IF              reduce using rule 49 (back_statement -> RETURN ; .)
    WHILE           reduce using rule 49 (back_statement -> RETURN ; .)
    FOR             reduce using rule 49 (back_statement -> RETURN ; .)
    BREAK           reduce using rule 49 (back_statement -> RETURN ; .)
    CONTINUE        reduce using rule 49 (back_statement -> RETURN ; .)
    RETURN          reduce using rule 49 (back_statement -> RETURN ; .)
    INT             reduce using rule 49 (back_statement -> RETURN ; .)
    SHORT           reduce using rule 49 (back_statement -> RETURN ; .)
    LONG            reduce using rule 49 (back_statement -> RETURN ; .)
    CHAR            reduce using rule 49 (back_statement -> RETURN ; .)
    VOID            reduce using rule 49 (back_statement -> RETURN ; .)
    FLOAT           reduce using rule 49 (back_statement -> RETURN ; .)
    DOUBLE          reduce using rule 49 (back_statement -> RETURN ; .)
    BOOL            reduce using rule 49 (back_statement -> RETURN ; .)
    SIGNED          reduce using rule 49 (back_statement -> RETURN ; .)
    UNSIGNED        reduce using rule 49 (back_statement -> RETURN ; .)
    STRUCT          reduce using rule 49 (back_statement -> RETURN ; .)
    &               reduce using rule 49 (back_statement -> RETURN ; .)
    *               reduce using rule 49 (back_statement -> RETURN ; .)
    +               reduce using rule 49 (back_statement -> RETURN ; .)
    -               reduce using rule 49 (back_statement -> RETURN ; .)
    ~               reduce using rule 49 (back_statement -> RETURN ; .)
    !               reduce using rule 49 (back_statement -> RETURN ; .)
    INC_OP          reduce using rule 49 (back_statement -> RETURN ; .)
    DEC_OP          reduce using rule 49 (back_statement -> RETURN ; .)
    (               reduce using rule 49 (back_statement -> RETURN ; .)
    ID              reduce using rule 49 (back_statement -> RETURN ; .)
    INTEGER_CONST   reduce using rule 49 (back_statement -> RETURN ; .)
    CHAR_CONST      reduce using rule 49 (back_statement -> RETURN ; .)
    FLOAT_CONST     reduce using rule 49 (back_statement -> RETURN ; .)
    BOOL_CONST      reduce using rule 49 (back_statement -> RETURN ; .)
    STRING_CONST    reduce using rule 49 (back_statement -> RETURN ; .)
    SIZEOF          reduce using rule 49 (back_statement -> RETURN ; .)
    ;               reduce using rule 49 (back_statement -> RETURN ; .)
    }               reduce using rule 49 (back_statement -> RETURN ; .)
    ELSE            reduce using rule 49 (back_statement -> RETURN ; .)


state 194

    (50) back_statement -> RETURN expression . ;
    (102) expression -> expression . , assignable_expression
    (86) ternary_expression -> expression . ? expression : expression

    ;               shift and go to state 233
    ,               shift and go to state 172
    ?               shift and go to state 171


state 195

    (8) initializer -> { initializer_list_orempty } .

    ,               reduce using rule 8 (initializer -> { initializer_list_orempty } .)
    ;               reduce using rule 8 (initializer -> { initializer_list_orempty } .)
    }               reduce using rule 8 (initializer -> { initializer_list_orempty } .)


state 196

    (9) initializer -> { initializer_list , . }
    (11) initializer_list -> initializer_list , . initializer
    (7) initializer -> . assignable_expression
    (8) initializer -> . { initializer_list_orempty }
    (9) initializer -> . { initializer_list , }
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    }               shift and go to state 234
    {               shift and go to state 64
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    initializer                    shift and go to state 235
    assignable_expression          shift and go to state 63
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    expression                     shift and go to state 77
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 197

    (69) assignable_expression -> unary_expression assign_operator assignable_expression .
    (101) expression -> assignable_expression .

  ! reduce/reduce conflict for ? resolved using rule 69 (assignable_expression -> unary_expression assign_operator assignable_expression .)
  ! reduce/reduce conflict for , resolved using rule 69 (assignable_expression -> unary_expression assign_operator assignable_expression .)
    ,               reduce using rule 69 (assignable_expression -> unary_expression assign_operator assignable_expression .)
    ;               reduce using rule 69 (assignable_expression -> unary_expression assign_operator assignable_expression .)
    ?               reduce using rule 69 (assignable_expression -> unary_expression assign_operator assignable_expression .)
    ]               reduce using rule 69 (assignable_expression -> unary_expression assign_operator assignable_expression .)
    }               reduce using rule 69 (assignable_expression -> unary_expression assign_operator assignable_expression .)
    )               reduce using rule 69 (assignable_expression -> unary_expression assign_operator assignable_expression .)
    :               reduce using rule 69 (assignable_expression -> unary_expression assign_operator assignable_expression .)

  ! ?               [ reduce using rule 101 (expression -> assignable_expression .) ]
  ! ,               [ reduce using rule 101 (expression -> assignable_expression .) ]


state 198

    (156) binary_expression -> binary_expression * binary_expression .
    (156) binary_expression -> binary_expression . * binary_expression
    (157) binary_expression -> binary_expression . / binary_expression
    (158) binary_expression -> binary_expression . % binary_expression
    (159) binary_expression -> binary_expression . + binary_expression
    (160) binary_expression -> binary_expression . - binary_expression
    (161) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (162) binary_expression -> binary_expression . LEFT_OP binary_expression
    (163) binary_expression -> binary_expression . < binary_expression
    (164) binary_expression -> binary_expression . LTE binary_expression
    (165) binary_expression -> binary_expression . GTE binary_expression
    (166) binary_expression -> binary_expression . > binary_expression
    (167) binary_expression -> binary_expression . EQ_OP binary_expression
    (168) binary_expression -> binary_expression . NEQ_OP binary_expression
    (169) binary_expression -> binary_expression . & binary_expression
    (170) binary_expression -> binary_expression . | binary_expression
    (171) binary_expression -> binary_expression . ^ binary_expression
    (172) binary_expression -> binary_expression . AND_OP binary_expression
    (173) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 156 (binary_expression -> binary_expression * binary_expression .)
    ;               reduce using rule 156 (binary_expression -> binary_expression * binary_expression .)
    ?               reduce using rule 156 (binary_expression -> binary_expression * binary_expression .)
    ]               reduce using rule 156 (binary_expression -> binary_expression * binary_expression .)
    }               reduce using rule 156 (binary_expression -> binary_expression * binary_expression .)
    )               reduce using rule 156 (binary_expression -> binary_expression * binary_expression .)
    :               reduce using rule 156 (binary_expression -> binary_expression * binary_expression .)
    *               shift and go to state 146
    /               shift and go to state 147
    %               shift and go to state 148
    +               shift and go to state 149
    -               shift and go to state 150
    RIGHT_OP        shift and go to state 151
    LEFT_OP         shift and go to state 152
    <               shift and go to state 153
    LTE             shift and go to state 154
    GTE             shift and go to state 155
    >               shift and go to state 156
    EQ_OP           shift and go to state 157
    NEQ_OP          shift and go to state 158
    &               shift and go to state 159
    |               shift and go to state 160
    ^               shift and go to state 161
    AND_OP          shift and go to state 162
    OR_OP           shift and go to state 163

  ! *               [ reduce using rule 156 (binary_expression -> binary_expression * binary_expression .) ]
  ! /               [ reduce using rule 156 (binary_expression -> binary_expression * binary_expression .) ]
  ! %               [ reduce using rule 156 (binary_expression -> binary_expression * binary_expression .) ]
  ! +               [ reduce using rule 156 (binary_expression -> binary_expression * binary_expression .) ]
  ! -               [ reduce using rule 156 (binary_expression -> binary_expression * binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 156 (binary_expression -> binary_expression * binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 156 (binary_expression -> binary_expression * binary_expression .) ]
  ! <               [ reduce using rule 156 (binary_expression -> binary_expression * binary_expression .) ]
  ! LTE             [ reduce using rule 156 (binary_expression -> binary_expression * binary_expression .) ]
  ! GTE             [ reduce using rule 156 (binary_expression -> binary_expression * binary_expression .) ]
  ! >               [ reduce using rule 156 (binary_expression -> binary_expression * binary_expression .) ]
  ! EQ_OP           [ reduce using rule 156 (binary_expression -> binary_expression * binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 156 (binary_expression -> binary_expression * binary_expression .) ]
  ! &               [ reduce using rule 156 (binary_expression -> binary_expression * binary_expression .) ]
  ! |               [ reduce using rule 156 (binary_expression -> binary_expression * binary_expression .) ]
  ! ^               [ reduce using rule 156 (binary_expression -> binary_expression * binary_expression .) ]
  ! AND_OP          [ reduce using rule 156 (binary_expression -> binary_expression * binary_expression .) ]
  ! OR_OP           [ reduce using rule 156 (binary_expression -> binary_expression * binary_expression .) ]


state 199

    (155) binary_expression -> cast_expression .
    (152) unary_expression -> cast_expression . self_incdec
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP

    *               reduce using rule 155 (binary_expression -> cast_expression .)
    /               reduce using rule 155 (binary_expression -> cast_expression .)
    %               reduce using rule 155 (binary_expression -> cast_expression .)
    +               reduce using rule 155 (binary_expression -> cast_expression .)
    -               reduce using rule 155 (binary_expression -> cast_expression .)
    RIGHT_OP        reduce using rule 155 (binary_expression -> cast_expression .)
    LEFT_OP         reduce using rule 155 (binary_expression -> cast_expression .)
    <               reduce using rule 155 (binary_expression -> cast_expression .)
    LTE             reduce using rule 155 (binary_expression -> cast_expression .)
    GTE             reduce using rule 155 (binary_expression -> cast_expression .)
    >               reduce using rule 155 (binary_expression -> cast_expression .)
    EQ_OP           reduce using rule 155 (binary_expression -> cast_expression .)
    NEQ_OP          reduce using rule 155 (binary_expression -> cast_expression .)
    &               reduce using rule 155 (binary_expression -> cast_expression .)
    |               reduce using rule 155 (binary_expression -> cast_expression .)
    ^               reduce using rule 155 (binary_expression -> cast_expression .)
    AND_OP          reduce using rule 155 (binary_expression -> cast_expression .)
    OR_OP           reduce using rule 155 (binary_expression -> cast_expression .)
    ,               reduce using rule 155 (binary_expression -> cast_expression .)
    ;               reduce using rule 155 (binary_expression -> cast_expression .)
    ?               reduce using rule 155 (binary_expression -> cast_expression .)
    ]               reduce using rule 155 (binary_expression -> cast_expression .)
    }               reduce using rule 155 (binary_expression -> cast_expression .)
    )               reduce using rule 155 (binary_expression -> cast_expression .)
    :               reduce using rule 155 (binary_expression -> cast_expression .)
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84

    self_incdec                    shift and go to state 169

state 200

    (157) binary_expression -> binary_expression / binary_expression .
    (156) binary_expression -> binary_expression . * binary_expression
    (157) binary_expression -> binary_expression . / binary_expression
    (158) binary_expression -> binary_expression . % binary_expression
    (159) binary_expression -> binary_expression . + binary_expression
    (160) binary_expression -> binary_expression . - binary_expression
    (161) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (162) binary_expression -> binary_expression . LEFT_OP binary_expression
    (163) binary_expression -> binary_expression . < binary_expression
    (164) binary_expression -> binary_expression . LTE binary_expression
    (165) binary_expression -> binary_expression . GTE binary_expression
    (166) binary_expression -> binary_expression . > binary_expression
    (167) binary_expression -> binary_expression . EQ_OP binary_expression
    (168) binary_expression -> binary_expression . NEQ_OP binary_expression
    (169) binary_expression -> binary_expression . & binary_expression
    (170) binary_expression -> binary_expression . | binary_expression
    (171) binary_expression -> binary_expression . ^ binary_expression
    (172) binary_expression -> binary_expression . AND_OP binary_expression
    (173) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 157 (binary_expression -> binary_expression / binary_expression .)
    ;               reduce using rule 157 (binary_expression -> binary_expression / binary_expression .)
    ?               reduce using rule 157 (binary_expression -> binary_expression / binary_expression .)
    ]               reduce using rule 157 (binary_expression -> binary_expression / binary_expression .)
    }               reduce using rule 157 (binary_expression -> binary_expression / binary_expression .)
    )               reduce using rule 157 (binary_expression -> binary_expression / binary_expression .)
    :               reduce using rule 157 (binary_expression -> binary_expression / binary_expression .)
    *               shift and go to state 146
    /               shift and go to state 147
    %               shift and go to state 148
    +               shift and go to state 149
    -               shift and go to state 150
    RIGHT_OP        shift and go to state 151
    LEFT_OP         shift and go to state 152
    <               shift and go to state 153
    LTE             shift and go to state 154
    GTE             shift and go to state 155
    >               shift and go to state 156
    EQ_OP           shift and go to state 157
    NEQ_OP          shift and go to state 158
    &               shift and go to state 159
    |               shift and go to state 160
    ^               shift and go to state 161
    AND_OP          shift and go to state 162
    OR_OP           shift and go to state 163

  ! *               [ reduce using rule 157 (binary_expression -> binary_expression / binary_expression .) ]
  ! /               [ reduce using rule 157 (binary_expression -> binary_expression / binary_expression .) ]
  ! %               [ reduce using rule 157 (binary_expression -> binary_expression / binary_expression .) ]
  ! +               [ reduce using rule 157 (binary_expression -> binary_expression / binary_expression .) ]
  ! -               [ reduce using rule 157 (binary_expression -> binary_expression / binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 157 (binary_expression -> binary_expression / binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 157 (binary_expression -> binary_expression / binary_expression .) ]
  ! <               [ reduce using rule 157 (binary_expression -> binary_expression / binary_expression .) ]
  ! LTE             [ reduce using rule 157 (binary_expression -> binary_expression / binary_expression .) ]
  ! GTE             [ reduce using rule 157 (binary_expression -> binary_expression / binary_expression .) ]
  ! >               [ reduce using rule 157 (binary_expression -> binary_expression / binary_expression .) ]
  ! EQ_OP           [ reduce using rule 157 (binary_expression -> binary_expression / binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 157 (binary_expression -> binary_expression / binary_expression .) ]
  ! &               [ reduce using rule 157 (binary_expression -> binary_expression / binary_expression .) ]
  ! |               [ reduce using rule 157 (binary_expression -> binary_expression / binary_expression .) ]
  ! ^               [ reduce using rule 157 (binary_expression -> binary_expression / binary_expression .) ]
  ! AND_OP          [ reduce using rule 157 (binary_expression -> binary_expression / binary_expression .) ]
  ! OR_OP           [ reduce using rule 157 (binary_expression -> binary_expression / binary_expression .) ]


state 201

    (158) binary_expression -> binary_expression % binary_expression .
    (156) binary_expression -> binary_expression . * binary_expression
    (157) binary_expression -> binary_expression . / binary_expression
    (158) binary_expression -> binary_expression . % binary_expression
    (159) binary_expression -> binary_expression . + binary_expression
    (160) binary_expression -> binary_expression . - binary_expression
    (161) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (162) binary_expression -> binary_expression . LEFT_OP binary_expression
    (163) binary_expression -> binary_expression . < binary_expression
    (164) binary_expression -> binary_expression . LTE binary_expression
    (165) binary_expression -> binary_expression . GTE binary_expression
    (166) binary_expression -> binary_expression . > binary_expression
    (167) binary_expression -> binary_expression . EQ_OP binary_expression
    (168) binary_expression -> binary_expression . NEQ_OP binary_expression
    (169) binary_expression -> binary_expression . & binary_expression
    (170) binary_expression -> binary_expression . | binary_expression
    (171) binary_expression -> binary_expression . ^ binary_expression
    (172) binary_expression -> binary_expression . AND_OP binary_expression
    (173) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 158 (binary_expression -> binary_expression % binary_expression .)
    ;               reduce using rule 158 (binary_expression -> binary_expression % binary_expression .)
    ?               reduce using rule 158 (binary_expression -> binary_expression % binary_expression .)
    ]               reduce using rule 158 (binary_expression -> binary_expression % binary_expression .)
    }               reduce using rule 158 (binary_expression -> binary_expression % binary_expression .)
    )               reduce using rule 158 (binary_expression -> binary_expression % binary_expression .)
    :               reduce using rule 158 (binary_expression -> binary_expression % binary_expression .)
    *               shift and go to state 146
    /               shift and go to state 147
    %               shift and go to state 148
    +               shift and go to state 149
    -               shift and go to state 150
    RIGHT_OP        shift and go to state 151
    LEFT_OP         shift and go to state 152
    <               shift and go to state 153
    LTE             shift and go to state 154
    GTE             shift and go to state 155
    >               shift and go to state 156
    EQ_OP           shift and go to state 157
    NEQ_OP          shift and go to state 158
    &               shift and go to state 159
    |               shift and go to state 160
    ^               shift and go to state 161
    AND_OP          shift and go to state 162
    OR_OP           shift and go to state 163

  ! *               [ reduce using rule 158 (binary_expression -> binary_expression % binary_expression .) ]
  ! /               [ reduce using rule 158 (binary_expression -> binary_expression % binary_expression .) ]
  ! %               [ reduce using rule 158 (binary_expression -> binary_expression % binary_expression .) ]
  ! +               [ reduce using rule 158 (binary_expression -> binary_expression % binary_expression .) ]
  ! -               [ reduce using rule 158 (binary_expression -> binary_expression % binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 158 (binary_expression -> binary_expression % binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 158 (binary_expression -> binary_expression % binary_expression .) ]
  ! <               [ reduce using rule 158 (binary_expression -> binary_expression % binary_expression .) ]
  ! LTE             [ reduce using rule 158 (binary_expression -> binary_expression % binary_expression .) ]
  ! GTE             [ reduce using rule 158 (binary_expression -> binary_expression % binary_expression .) ]
  ! >               [ reduce using rule 158 (binary_expression -> binary_expression % binary_expression .) ]
  ! EQ_OP           [ reduce using rule 158 (binary_expression -> binary_expression % binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 158 (binary_expression -> binary_expression % binary_expression .) ]
  ! &               [ reduce using rule 158 (binary_expression -> binary_expression % binary_expression .) ]
  ! |               [ reduce using rule 158 (binary_expression -> binary_expression % binary_expression .) ]
  ! ^               [ reduce using rule 158 (binary_expression -> binary_expression % binary_expression .) ]
  ! AND_OP          [ reduce using rule 158 (binary_expression -> binary_expression % binary_expression .) ]
  ! OR_OP           [ reduce using rule 158 (binary_expression -> binary_expression % binary_expression .) ]


state 202

    (159) binary_expression -> binary_expression + binary_expression .
    (156) binary_expression -> binary_expression . * binary_expression
    (157) binary_expression -> binary_expression . / binary_expression
    (158) binary_expression -> binary_expression . % binary_expression
    (159) binary_expression -> binary_expression . + binary_expression
    (160) binary_expression -> binary_expression . - binary_expression
    (161) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (162) binary_expression -> binary_expression . LEFT_OP binary_expression
    (163) binary_expression -> binary_expression . < binary_expression
    (164) binary_expression -> binary_expression . LTE binary_expression
    (165) binary_expression -> binary_expression . GTE binary_expression
    (166) binary_expression -> binary_expression . > binary_expression
    (167) binary_expression -> binary_expression . EQ_OP binary_expression
    (168) binary_expression -> binary_expression . NEQ_OP binary_expression
    (169) binary_expression -> binary_expression . & binary_expression
    (170) binary_expression -> binary_expression . | binary_expression
    (171) binary_expression -> binary_expression . ^ binary_expression
    (172) binary_expression -> binary_expression . AND_OP binary_expression
    (173) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 159 (binary_expression -> binary_expression + binary_expression .)
    ;               reduce using rule 159 (binary_expression -> binary_expression + binary_expression .)
    ?               reduce using rule 159 (binary_expression -> binary_expression + binary_expression .)
    ]               reduce using rule 159 (binary_expression -> binary_expression + binary_expression .)
    }               reduce using rule 159 (binary_expression -> binary_expression + binary_expression .)
    )               reduce using rule 159 (binary_expression -> binary_expression + binary_expression .)
    :               reduce using rule 159 (binary_expression -> binary_expression + binary_expression .)
    *               shift and go to state 146
    /               shift and go to state 147
    %               shift and go to state 148
    +               shift and go to state 149
    -               shift and go to state 150
    RIGHT_OP        shift and go to state 151
    LEFT_OP         shift and go to state 152
    <               shift and go to state 153
    LTE             shift and go to state 154
    GTE             shift and go to state 155
    >               shift and go to state 156
    EQ_OP           shift and go to state 157
    NEQ_OP          shift and go to state 158
    &               shift and go to state 159
    |               shift and go to state 160
    ^               shift and go to state 161
    AND_OP          shift and go to state 162
    OR_OP           shift and go to state 163

  ! *               [ reduce using rule 159 (binary_expression -> binary_expression + binary_expression .) ]
  ! /               [ reduce using rule 159 (binary_expression -> binary_expression + binary_expression .) ]
  ! %               [ reduce using rule 159 (binary_expression -> binary_expression + binary_expression .) ]
  ! +               [ reduce using rule 159 (binary_expression -> binary_expression + binary_expression .) ]
  ! -               [ reduce using rule 159 (binary_expression -> binary_expression + binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 159 (binary_expression -> binary_expression + binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 159 (binary_expression -> binary_expression + binary_expression .) ]
  ! <               [ reduce using rule 159 (binary_expression -> binary_expression + binary_expression .) ]
  ! LTE             [ reduce using rule 159 (binary_expression -> binary_expression + binary_expression .) ]
  ! GTE             [ reduce using rule 159 (binary_expression -> binary_expression + binary_expression .) ]
  ! >               [ reduce using rule 159 (binary_expression -> binary_expression + binary_expression .) ]
  ! EQ_OP           [ reduce using rule 159 (binary_expression -> binary_expression + binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 159 (binary_expression -> binary_expression + binary_expression .) ]
  ! &               [ reduce using rule 159 (binary_expression -> binary_expression + binary_expression .) ]
  ! |               [ reduce using rule 159 (binary_expression -> binary_expression + binary_expression .) ]
  ! ^               [ reduce using rule 159 (binary_expression -> binary_expression + binary_expression .) ]
  ! AND_OP          [ reduce using rule 159 (binary_expression -> binary_expression + binary_expression .) ]
  ! OR_OP           [ reduce using rule 159 (binary_expression -> binary_expression + binary_expression .) ]


state 203

    (160) binary_expression -> binary_expression - binary_expression .
    (156) binary_expression -> binary_expression . * binary_expression
    (157) binary_expression -> binary_expression . / binary_expression
    (158) binary_expression -> binary_expression . % binary_expression
    (159) binary_expression -> binary_expression . + binary_expression
    (160) binary_expression -> binary_expression . - binary_expression
    (161) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (162) binary_expression -> binary_expression . LEFT_OP binary_expression
    (163) binary_expression -> binary_expression . < binary_expression
    (164) binary_expression -> binary_expression . LTE binary_expression
    (165) binary_expression -> binary_expression . GTE binary_expression
    (166) binary_expression -> binary_expression . > binary_expression
    (167) binary_expression -> binary_expression . EQ_OP binary_expression
    (168) binary_expression -> binary_expression . NEQ_OP binary_expression
    (169) binary_expression -> binary_expression . & binary_expression
    (170) binary_expression -> binary_expression . | binary_expression
    (171) binary_expression -> binary_expression . ^ binary_expression
    (172) binary_expression -> binary_expression . AND_OP binary_expression
    (173) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 160 (binary_expression -> binary_expression - binary_expression .)
    ;               reduce using rule 160 (binary_expression -> binary_expression - binary_expression .)
    ?               reduce using rule 160 (binary_expression -> binary_expression - binary_expression .)
    ]               reduce using rule 160 (binary_expression -> binary_expression - binary_expression .)
    }               reduce using rule 160 (binary_expression -> binary_expression - binary_expression .)
    )               reduce using rule 160 (binary_expression -> binary_expression - binary_expression .)
    :               reduce using rule 160 (binary_expression -> binary_expression - binary_expression .)
    *               shift and go to state 146
    /               shift and go to state 147
    %               shift and go to state 148
    +               shift and go to state 149
    -               shift and go to state 150
    RIGHT_OP        shift and go to state 151
    LEFT_OP         shift and go to state 152
    <               shift and go to state 153
    LTE             shift and go to state 154
    GTE             shift and go to state 155
    >               shift and go to state 156
    EQ_OP           shift and go to state 157
    NEQ_OP          shift and go to state 158
    &               shift and go to state 159
    |               shift and go to state 160
    ^               shift and go to state 161
    AND_OP          shift and go to state 162
    OR_OP           shift and go to state 163

  ! *               [ reduce using rule 160 (binary_expression -> binary_expression - binary_expression .) ]
  ! /               [ reduce using rule 160 (binary_expression -> binary_expression - binary_expression .) ]
  ! %               [ reduce using rule 160 (binary_expression -> binary_expression - binary_expression .) ]
  ! +               [ reduce using rule 160 (binary_expression -> binary_expression - binary_expression .) ]
  ! -               [ reduce using rule 160 (binary_expression -> binary_expression - binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 160 (binary_expression -> binary_expression - binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 160 (binary_expression -> binary_expression - binary_expression .) ]
  ! <               [ reduce using rule 160 (binary_expression -> binary_expression - binary_expression .) ]
  ! LTE             [ reduce using rule 160 (binary_expression -> binary_expression - binary_expression .) ]
  ! GTE             [ reduce using rule 160 (binary_expression -> binary_expression - binary_expression .) ]
  ! >               [ reduce using rule 160 (binary_expression -> binary_expression - binary_expression .) ]
  ! EQ_OP           [ reduce using rule 160 (binary_expression -> binary_expression - binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 160 (binary_expression -> binary_expression - binary_expression .) ]
  ! &               [ reduce using rule 160 (binary_expression -> binary_expression - binary_expression .) ]
  ! |               [ reduce using rule 160 (binary_expression -> binary_expression - binary_expression .) ]
  ! ^               [ reduce using rule 160 (binary_expression -> binary_expression - binary_expression .) ]
  ! AND_OP          [ reduce using rule 160 (binary_expression -> binary_expression - binary_expression .) ]
  ! OR_OP           [ reduce using rule 160 (binary_expression -> binary_expression - binary_expression .) ]


state 204

    (161) binary_expression -> binary_expression RIGHT_OP binary_expression .
    (156) binary_expression -> binary_expression . * binary_expression
    (157) binary_expression -> binary_expression . / binary_expression
    (158) binary_expression -> binary_expression . % binary_expression
    (159) binary_expression -> binary_expression . + binary_expression
    (160) binary_expression -> binary_expression . - binary_expression
    (161) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (162) binary_expression -> binary_expression . LEFT_OP binary_expression
    (163) binary_expression -> binary_expression . < binary_expression
    (164) binary_expression -> binary_expression . LTE binary_expression
    (165) binary_expression -> binary_expression . GTE binary_expression
    (166) binary_expression -> binary_expression . > binary_expression
    (167) binary_expression -> binary_expression . EQ_OP binary_expression
    (168) binary_expression -> binary_expression . NEQ_OP binary_expression
    (169) binary_expression -> binary_expression . & binary_expression
    (170) binary_expression -> binary_expression . | binary_expression
    (171) binary_expression -> binary_expression . ^ binary_expression
    (172) binary_expression -> binary_expression . AND_OP binary_expression
    (173) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .)
    ;               reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .)
    ?               reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .)
    ]               reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .)
    }               reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .)
    )               reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .)
    :               reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .)
    *               shift and go to state 146
    /               shift and go to state 147
    %               shift and go to state 148
    +               shift and go to state 149
    -               shift and go to state 150
    RIGHT_OP        shift and go to state 151
    LEFT_OP         shift and go to state 152
    <               shift and go to state 153
    LTE             shift and go to state 154
    GTE             shift and go to state 155
    >               shift and go to state 156
    EQ_OP           shift and go to state 157
    NEQ_OP          shift and go to state 158
    &               shift and go to state 159
    |               shift and go to state 160
    ^               shift and go to state 161
    AND_OP          shift and go to state 162
    OR_OP           shift and go to state 163

  ! *               [ reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! /               [ reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! %               [ reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! +               [ reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! -               [ reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! <               [ reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! LTE             [ reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! GTE             [ reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! >               [ reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! EQ_OP           [ reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! &               [ reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! |               [ reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! ^               [ reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! AND_OP          [ reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]
  ! OR_OP           [ reduce using rule 161 (binary_expression -> binary_expression RIGHT_OP binary_expression .) ]


state 205

    (162) binary_expression -> binary_expression LEFT_OP binary_expression .
    (156) binary_expression -> binary_expression . * binary_expression
    (157) binary_expression -> binary_expression . / binary_expression
    (158) binary_expression -> binary_expression . % binary_expression
    (159) binary_expression -> binary_expression . + binary_expression
    (160) binary_expression -> binary_expression . - binary_expression
    (161) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (162) binary_expression -> binary_expression . LEFT_OP binary_expression
    (163) binary_expression -> binary_expression . < binary_expression
    (164) binary_expression -> binary_expression . LTE binary_expression
    (165) binary_expression -> binary_expression . GTE binary_expression
    (166) binary_expression -> binary_expression . > binary_expression
    (167) binary_expression -> binary_expression . EQ_OP binary_expression
    (168) binary_expression -> binary_expression . NEQ_OP binary_expression
    (169) binary_expression -> binary_expression . & binary_expression
    (170) binary_expression -> binary_expression . | binary_expression
    (171) binary_expression -> binary_expression . ^ binary_expression
    (172) binary_expression -> binary_expression . AND_OP binary_expression
    (173) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .)
    ;               reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .)
    ?               reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .)
    ]               reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .)
    }               reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .)
    )               reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .)
    :               reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .)
    *               shift and go to state 146
    /               shift and go to state 147
    %               shift and go to state 148
    +               shift and go to state 149
    -               shift and go to state 150
    RIGHT_OP        shift and go to state 151
    LEFT_OP         shift and go to state 152
    <               shift and go to state 153
    LTE             shift and go to state 154
    GTE             shift and go to state 155
    >               shift and go to state 156
    EQ_OP           shift and go to state 157
    NEQ_OP          shift and go to state 158
    &               shift and go to state 159
    |               shift and go to state 160
    ^               shift and go to state 161
    AND_OP          shift and go to state 162
    OR_OP           shift and go to state 163

  ! *               [ reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! /               [ reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! %               [ reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! +               [ reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! -               [ reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! <               [ reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! LTE             [ reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! GTE             [ reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! >               [ reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! EQ_OP           [ reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! &               [ reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! |               [ reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! ^               [ reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! AND_OP          [ reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]
  ! OR_OP           [ reduce using rule 162 (binary_expression -> binary_expression LEFT_OP binary_expression .) ]


state 206

    (163) binary_expression -> binary_expression < binary_expression .
    (156) binary_expression -> binary_expression . * binary_expression
    (157) binary_expression -> binary_expression . / binary_expression
    (158) binary_expression -> binary_expression . % binary_expression
    (159) binary_expression -> binary_expression . + binary_expression
    (160) binary_expression -> binary_expression . - binary_expression
    (161) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (162) binary_expression -> binary_expression . LEFT_OP binary_expression
    (163) binary_expression -> binary_expression . < binary_expression
    (164) binary_expression -> binary_expression . LTE binary_expression
    (165) binary_expression -> binary_expression . GTE binary_expression
    (166) binary_expression -> binary_expression . > binary_expression
    (167) binary_expression -> binary_expression . EQ_OP binary_expression
    (168) binary_expression -> binary_expression . NEQ_OP binary_expression
    (169) binary_expression -> binary_expression . & binary_expression
    (170) binary_expression -> binary_expression . | binary_expression
    (171) binary_expression -> binary_expression . ^ binary_expression
    (172) binary_expression -> binary_expression . AND_OP binary_expression
    (173) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 163 (binary_expression -> binary_expression < binary_expression .)
    ;               reduce using rule 163 (binary_expression -> binary_expression < binary_expression .)
    ?               reduce using rule 163 (binary_expression -> binary_expression < binary_expression .)
    ]               reduce using rule 163 (binary_expression -> binary_expression < binary_expression .)
    }               reduce using rule 163 (binary_expression -> binary_expression < binary_expression .)
    )               reduce using rule 163 (binary_expression -> binary_expression < binary_expression .)
    :               reduce using rule 163 (binary_expression -> binary_expression < binary_expression .)
    *               shift and go to state 146
    /               shift and go to state 147
    %               shift and go to state 148
    +               shift and go to state 149
    -               shift and go to state 150
    RIGHT_OP        shift and go to state 151
    LEFT_OP         shift and go to state 152
    <               shift and go to state 153
    LTE             shift and go to state 154
    GTE             shift and go to state 155
    >               shift and go to state 156
    EQ_OP           shift and go to state 157
    NEQ_OP          shift and go to state 158
    &               shift and go to state 159
    |               shift and go to state 160
    ^               shift and go to state 161
    AND_OP          shift and go to state 162
    OR_OP           shift and go to state 163

  ! *               [ reduce using rule 163 (binary_expression -> binary_expression < binary_expression .) ]
  ! /               [ reduce using rule 163 (binary_expression -> binary_expression < binary_expression .) ]
  ! %               [ reduce using rule 163 (binary_expression -> binary_expression < binary_expression .) ]
  ! +               [ reduce using rule 163 (binary_expression -> binary_expression < binary_expression .) ]
  ! -               [ reduce using rule 163 (binary_expression -> binary_expression < binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 163 (binary_expression -> binary_expression < binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 163 (binary_expression -> binary_expression < binary_expression .) ]
  ! <               [ reduce using rule 163 (binary_expression -> binary_expression < binary_expression .) ]
  ! LTE             [ reduce using rule 163 (binary_expression -> binary_expression < binary_expression .) ]
  ! GTE             [ reduce using rule 163 (binary_expression -> binary_expression < binary_expression .) ]
  ! >               [ reduce using rule 163 (binary_expression -> binary_expression < binary_expression .) ]
  ! EQ_OP           [ reduce using rule 163 (binary_expression -> binary_expression < binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 163 (binary_expression -> binary_expression < binary_expression .) ]
  ! &               [ reduce using rule 163 (binary_expression -> binary_expression < binary_expression .) ]
  ! |               [ reduce using rule 163 (binary_expression -> binary_expression < binary_expression .) ]
  ! ^               [ reduce using rule 163 (binary_expression -> binary_expression < binary_expression .) ]
  ! AND_OP          [ reduce using rule 163 (binary_expression -> binary_expression < binary_expression .) ]
  ! OR_OP           [ reduce using rule 163 (binary_expression -> binary_expression < binary_expression .) ]


state 207

    (164) binary_expression -> binary_expression LTE binary_expression .
    (156) binary_expression -> binary_expression . * binary_expression
    (157) binary_expression -> binary_expression . / binary_expression
    (158) binary_expression -> binary_expression . % binary_expression
    (159) binary_expression -> binary_expression . + binary_expression
    (160) binary_expression -> binary_expression . - binary_expression
    (161) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (162) binary_expression -> binary_expression . LEFT_OP binary_expression
    (163) binary_expression -> binary_expression . < binary_expression
    (164) binary_expression -> binary_expression . LTE binary_expression
    (165) binary_expression -> binary_expression . GTE binary_expression
    (166) binary_expression -> binary_expression . > binary_expression
    (167) binary_expression -> binary_expression . EQ_OP binary_expression
    (168) binary_expression -> binary_expression . NEQ_OP binary_expression
    (169) binary_expression -> binary_expression . & binary_expression
    (170) binary_expression -> binary_expression . | binary_expression
    (171) binary_expression -> binary_expression . ^ binary_expression
    (172) binary_expression -> binary_expression . AND_OP binary_expression
    (173) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .)
    ;               reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .)
    ?               reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .)
    ]               reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .)
    }               reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .)
    )               reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .)
    :               reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .)
    *               shift and go to state 146
    /               shift and go to state 147
    %               shift and go to state 148
    +               shift and go to state 149
    -               shift and go to state 150
    RIGHT_OP        shift and go to state 151
    LEFT_OP         shift and go to state 152
    <               shift and go to state 153
    LTE             shift and go to state 154
    GTE             shift and go to state 155
    >               shift and go to state 156
    EQ_OP           shift and go to state 157
    NEQ_OP          shift and go to state 158
    &               shift and go to state 159
    |               shift and go to state 160
    ^               shift and go to state 161
    AND_OP          shift and go to state 162
    OR_OP           shift and go to state 163

  ! *               [ reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! /               [ reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! %               [ reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! +               [ reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! -               [ reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! <               [ reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! LTE             [ reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! GTE             [ reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! >               [ reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! EQ_OP           [ reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! &               [ reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! |               [ reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! ^               [ reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! AND_OP          [ reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! OR_OP           [ reduce using rule 164 (binary_expression -> binary_expression LTE binary_expression .) ]


state 208

    (165) binary_expression -> binary_expression GTE binary_expression .
    (156) binary_expression -> binary_expression . * binary_expression
    (157) binary_expression -> binary_expression . / binary_expression
    (158) binary_expression -> binary_expression . % binary_expression
    (159) binary_expression -> binary_expression . + binary_expression
    (160) binary_expression -> binary_expression . - binary_expression
    (161) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (162) binary_expression -> binary_expression . LEFT_OP binary_expression
    (163) binary_expression -> binary_expression . < binary_expression
    (164) binary_expression -> binary_expression . LTE binary_expression
    (165) binary_expression -> binary_expression . GTE binary_expression
    (166) binary_expression -> binary_expression . > binary_expression
    (167) binary_expression -> binary_expression . EQ_OP binary_expression
    (168) binary_expression -> binary_expression . NEQ_OP binary_expression
    (169) binary_expression -> binary_expression . & binary_expression
    (170) binary_expression -> binary_expression . | binary_expression
    (171) binary_expression -> binary_expression . ^ binary_expression
    (172) binary_expression -> binary_expression . AND_OP binary_expression
    (173) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .)
    ;               reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .)
    ?               reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .)
    ]               reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .)
    }               reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .)
    )               reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .)
    :               reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .)
    *               shift and go to state 146
    /               shift and go to state 147
    %               shift and go to state 148
    +               shift and go to state 149
    -               shift and go to state 150
    RIGHT_OP        shift and go to state 151
    LEFT_OP         shift and go to state 152
    <               shift and go to state 153
    LTE             shift and go to state 154
    GTE             shift and go to state 155
    >               shift and go to state 156
    EQ_OP           shift and go to state 157
    NEQ_OP          shift and go to state 158
    &               shift and go to state 159
    |               shift and go to state 160
    ^               shift and go to state 161
    AND_OP          shift and go to state 162
    OR_OP           shift and go to state 163

  ! *               [ reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! /               [ reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! %               [ reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! +               [ reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! -               [ reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! <               [ reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! LTE             [ reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! GTE             [ reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! >               [ reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! EQ_OP           [ reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! &               [ reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! |               [ reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! ^               [ reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! AND_OP          [ reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! OR_OP           [ reduce using rule 165 (binary_expression -> binary_expression GTE binary_expression .) ]


state 209

    (166) binary_expression -> binary_expression > binary_expression .
    (156) binary_expression -> binary_expression . * binary_expression
    (157) binary_expression -> binary_expression . / binary_expression
    (158) binary_expression -> binary_expression . % binary_expression
    (159) binary_expression -> binary_expression . + binary_expression
    (160) binary_expression -> binary_expression . - binary_expression
    (161) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (162) binary_expression -> binary_expression . LEFT_OP binary_expression
    (163) binary_expression -> binary_expression . < binary_expression
    (164) binary_expression -> binary_expression . LTE binary_expression
    (165) binary_expression -> binary_expression . GTE binary_expression
    (166) binary_expression -> binary_expression . > binary_expression
    (167) binary_expression -> binary_expression . EQ_OP binary_expression
    (168) binary_expression -> binary_expression . NEQ_OP binary_expression
    (169) binary_expression -> binary_expression . & binary_expression
    (170) binary_expression -> binary_expression . | binary_expression
    (171) binary_expression -> binary_expression . ^ binary_expression
    (172) binary_expression -> binary_expression . AND_OP binary_expression
    (173) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 166 (binary_expression -> binary_expression > binary_expression .)
    ;               reduce using rule 166 (binary_expression -> binary_expression > binary_expression .)
    ?               reduce using rule 166 (binary_expression -> binary_expression > binary_expression .)
    ]               reduce using rule 166 (binary_expression -> binary_expression > binary_expression .)
    }               reduce using rule 166 (binary_expression -> binary_expression > binary_expression .)
    )               reduce using rule 166 (binary_expression -> binary_expression > binary_expression .)
    :               reduce using rule 166 (binary_expression -> binary_expression > binary_expression .)
    *               shift and go to state 146
    /               shift and go to state 147
    %               shift and go to state 148
    +               shift and go to state 149
    -               shift and go to state 150
    RIGHT_OP        shift and go to state 151
    LEFT_OP         shift and go to state 152
    <               shift and go to state 153
    LTE             shift and go to state 154
    GTE             shift and go to state 155
    >               shift and go to state 156
    EQ_OP           shift and go to state 157
    NEQ_OP          shift and go to state 158
    &               shift and go to state 159
    |               shift and go to state 160
    ^               shift and go to state 161
    AND_OP          shift and go to state 162
    OR_OP           shift and go to state 163

  ! *               [ reduce using rule 166 (binary_expression -> binary_expression > binary_expression .) ]
  ! /               [ reduce using rule 166 (binary_expression -> binary_expression > binary_expression .) ]
  ! %               [ reduce using rule 166 (binary_expression -> binary_expression > binary_expression .) ]
  ! +               [ reduce using rule 166 (binary_expression -> binary_expression > binary_expression .) ]
  ! -               [ reduce using rule 166 (binary_expression -> binary_expression > binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 166 (binary_expression -> binary_expression > binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 166 (binary_expression -> binary_expression > binary_expression .) ]
  ! <               [ reduce using rule 166 (binary_expression -> binary_expression > binary_expression .) ]
  ! LTE             [ reduce using rule 166 (binary_expression -> binary_expression > binary_expression .) ]
  ! GTE             [ reduce using rule 166 (binary_expression -> binary_expression > binary_expression .) ]
  ! >               [ reduce using rule 166 (binary_expression -> binary_expression > binary_expression .) ]
  ! EQ_OP           [ reduce using rule 166 (binary_expression -> binary_expression > binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 166 (binary_expression -> binary_expression > binary_expression .) ]
  ! &               [ reduce using rule 166 (binary_expression -> binary_expression > binary_expression .) ]
  ! |               [ reduce using rule 166 (binary_expression -> binary_expression > binary_expression .) ]
  ! ^               [ reduce using rule 166 (binary_expression -> binary_expression > binary_expression .) ]
  ! AND_OP          [ reduce using rule 166 (binary_expression -> binary_expression > binary_expression .) ]
  ! OR_OP           [ reduce using rule 166 (binary_expression -> binary_expression > binary_expression .) ]


state 210

    (167) binary_expression -> binary_expression EQ_OP binary_expression .
    (156) binary_expression -> binary_expression . * binary_expression
    (157) binary_expression -> binary_expression . / binary_expression
    (158) binary_expression -> binary_expression . % binary_expression
    (159) binary_expression -> binary_expression . + binary_expression
    (160) binary_expression -> binary_expression . - binary_expression
    (161) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (162) binary_expression -> binary_expression . LEFT_OP binary_expression
    (163) binary_expression -> binary_expression . < binary_expression
    (164) binary_expression -> binary_expression . LTE binary_expression
    (165) binary_expression -> binary_expression . GTE binary_expression
    (166) binary_expression -> binary_expression . > binary_expression
    (167) binary_expression -> binary_expression . EQ_OP binary_expression
    (168) binary_expression -> binary_expression . NEQ_OP binary_expression
    (169) binary_expression -> binary_expression . & binary_expression
    (170) binary_expression -> binary_expression . | binary_expression
    (171) binary_expression -> binary_expression . ^ binary_expression
    (172) binary_expression -> binary_expression . AND_OP binary_expression
    (173) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .)
    ;               reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .)
    ?               reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .)
    ]               reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .)
    }               reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .)
    )               reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .)
    :               reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .)
    *               shift and go to state 146
    /               shift and go to state 147
    %               shift and go to state 148
    +               shift and go to state 149
    -               shift and go to state 150
    RIGHT_OP        shift and go to state 151
    LEFT_OP         shift and go to state 152
    <               shift and go to state 153
    LTE             shift and go to state 154
    GTE             shift and go to state 155
    >               shift and go to state 156
    EQ_OP           shift and go to state 157
    NEQ_OP          shift and go to state 158
    &               shift and go to state 159
    |               shift and go to state 160
    ^               shift and go to state 161
    AND_OP          shift and go to state 162
    OR_OP           shift and go to state 163

  ! *               [ reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! /               [ reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! %               [ reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! +               [ reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! -               [ reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! <               [ reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! LTE             [ reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! GTE             [ reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! >               [ reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! EQ_OP           [ reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! &               [ reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! |               [ reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! ^               [ reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! AND_OP          [ reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .) ]
  ! OR_OP           [ reduce using rule 167 (binary_expression -> binary_expression EQ_OP binary_expression .) ]


state 211

    (168) binary_expression -> binary_expression NEQ_OP binary_expression .
    (156) binary_expression -> binary_expression . * binary_expression
    (157) binary_expression -> binary_expression . / binary_expression
    (158) binary_expression -> binary_expression . % binary_expression
    (159) binary_expression -> binary_expression . + binary_expression
    (160) binary_expression -> binary_expression . - binary_expression
    (161) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (162) binary_expression -> binary_expression . LEFT_OP binary_expression
    (163) binary_expression -> binary_expression . < binary_expression
    (164) binary_expression -> binary_expression . LTE binary_expression
    (165) binary_expression -> binary_expression . GTE binary_expression
    (166) binary_expression -> binary_expression . > binary_expression
    (167) binary_expression -> binary_expression . EQ_OP binary_expression
    (168) binary_expression -> binary_expression . NEQ_OP binary_expression
    (169) binary_expression -> binary_expression . & binary_expression
    (170) binary_expression -> binary_expression . | binary_expression
    (171) binary_expression -> binary_expression . ^ binary_expression
    (172) binary_expression -> binary_expression . AND_OP binary_expression
    (173) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .)
    ;               reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .)
    ?               reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .)
    ]               reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .)
    }               reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .)
    )               reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .)
    :               reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .)
    *               shift and go to state 146
    /               shift and go to state 147
    %               shift and go to state 148
    +               shift and go to state 149
    -               shift and go to state 150
    RIGHT_OP        shift and go to state 151
    LEFT_OP         shift and go to state 152
    <               shift and go to state 153
    LTE             shift and go to state 154
    GTE             shift and go to state 155
    >               shift and go to state 156
    EQ_OP           shift and go to state 157
    NEQ_OP          shift and go to state 158
    &               shift and go to state 159
    |               shift and go to state 160
    ^               shift and go to state 161
    AND_OP          shift and go to state 162
    OR_OP           shift and go to state 163

  ! *               [ reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! /               [ reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! %               [ reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! +               [ reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! -               [ reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! <               [ reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! LTE             [ reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! GTE             [ reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! >               [ reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! EQ_OP           [ reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! &               [ reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! |               [ reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! ^               [ reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! AND_OP          [ reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]
  ! OR_OP           [ reduce using rule 168 (binary_expression -> binary_expression NEQ_OP binary_expression .) ]


state 212

    (169) binary_expression -> binary_expression & binary_expression .
    (156) binary_expression -> binary_expression . * binary_expression
    (157) binary_expression -> binary_expression . / binary_expression
    (158) binary_expression -> binary_expression . % binary_expression
    (159) binary_expression -> binary_expression . + binary_expression
    (160) binary_expression -> binary_expression . - binary_expression
    (161) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (162) binary_expression -> binary_expression . LEFT_OP binary_expression
    (163) binary_expression -> binary_expression . < binary_expression
    (164) binary_expression -> binary_expression . LTE binary_expression
    (165) binary_expression -> binary_expression . GTE binary_expression
    (166) binary_expression -> binary_expression . > binary_expression
    (167) binary_expression -> binary_expression . EQ_OP binary_expression
    (168) binary_expression -> binary_expression . NEQ_OP binary_expression
    (169) binary_expression -> binary_expression . & binary_expression
    (170) binary_expression -> binary_expression . | binary_expression
    (171) binary_expression -> binary_expression . ^ binary_expression
    (172) binary_expression -> binary_expression . AND_OP binary_expression
    (173) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 169 (binary_expression -> binary_expression & binary_expression .)
    ;               reduce using rule 169 (binary_expression -> binary_expression & binary_expression .)
    ?               reduce using rule 169 (binary_expression -> binary_expression & binary_expression .)
    ]               reduce using rule 169 (binary_expression -> binary_expression & binary_expression .)
    }               reduce using rule 169 (binary_expression -> binary_expression & binary_expression .)
    )               reduce using rule 169 (binary_expression -> binary_expression & binary_expression .)
    :               reduce using rule 169 (binary_expression -> binary_expression & binary_expression .)
    *               shift and go to state 146
    /               shift and go to state 147
    %               shift and go to state 148
    +               shift and go to state 149
    -               shift and go to state 150
    RIGHT_OP        shift and go to state 151
    LEFT_OP         shift and go to state 152
    <               shift and go to state 153
    LTE             shift and go to state 154
    GTE             shift and go to state 155
    >               shift and go to state 156
    EQ_OP           shift and go to state 157
    NEQ_OP          shift and go to state 158
    &               shift and go to state 159
    |               shift and go to state 160
    ^               shift and go to state 161
    AND_OP          shift and go to state 162
    OR_OP           shift and go to state 163

  ! *               [ reduce using rule 169 (binary_expression -> binary_expression & binary_expression .) ]
  ! /               [ reduce using rule 169 (binary_expression -> binary_expression & binary_expression .) ]
  ! %               [ reduce using rule 169 (binary_expression -> binary_expression & binary_expression .) ]
  ! +               [ reduce using rule 169 (binary_expression -> binary_expression & binary_expression .) ]
  ! -               [ reduce using rule 169 (binary_expression -> binary_expression & binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 169 (binary_expression -> binary_expression & binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 169 (binary_expression -> binary_expression & binary_expression .) ]
  ! <               [ reduce using rule 169 (binary_expression -> binary_expression & binary_expression .) ]
  ! LTE             [ reduce using rule 169 (binary_expression -> binary_expression & binary_expression .) ]
  ! GTE             [ reduce using rule 169 (binary_expression -> binary_expression & binary_expression .) ]
  ! >               [ reduce using rule 169 (binary_expression -> binary_expression & binary_expression .) ]
  ! EQ_OP           [ reduce using rule 169 (binary_expression -> binary_expression & binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 169 (binary_expression -> binary_expression & binary_expression .) ]
  ! &               [ reduce using rule 169 (binary_expression -> binary_expression & binary_expression .) ]
  ! |               [ reduce using rule 169 (binary_expression -> binary_expression & binary_expression .) ]
  ! ^               [ reduce using rule 169 (binary_expression -> binary_expression & binary_expression .) ]
  ! AND_OP          [ reduce using rule 169 (binary_expression -> binary_expression & binary_expression .) ]
  ! OR_OP           [ reduce using rule 169 (binary_expression -> binary_expression & binary_expression .) ]


state 213

    (170) binary_expression -> binary_expression | binary_expression .
    (156) binary_expression -> binary_expression . * binary_expression
    (157) binary_expression -> binary_expression . / binary_expression
    (158) binary_expression -> binary_expression . % binary_expression
    (159) binary_expression -> binary_expression . + binary_expression
    (160) binary_expression -> binary_expression . - binary_expression
    (161) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (162) binary_expression -> binary_expression . LEFT_OP binary_expression
    (163) binary_expression -> binary_expression . < binary_expression
    (164) binary_expression -> binary_expression . LTE binary_expression
    (165) binary_expression -> binary_expression . GTE binary_expression
    (166) binary_expression -> binary_expression . > binary_expression
    (167) binary_expression -> binary_expression . EQ_OP binary_expression
    (168) binary_expression -> binary_expression . NEQ_OP binary_expression
    (169) binary_expression -> binary_expression . & binary_expression
    (170) binary_expression -> binary_expression . | binary_expression
    (171) binary_expression -> binary_expression . ^ binary_expression
    (172) binary_expression -> binary_expression . AND_OP binary_expression
    (173) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 170 (binary_expression -> binary_expression | binary_expression .)
    ;               reduce using rule 170 (binary_expression -> binary_expression | binary_expression .)
    ?               reduce using rule 170 (binary_expression -> binary_expression | binary_expression .)
    ]               reduce using rule 170 (binary_expression -> binary_expression | binary_expression .)
    }               reduce using rule 170 (binary_expression -> binary_expression | binary_expression .)
    )               reduce using rule 170 (binary_expression -> binary_expression | binary_expression .)
    :               reduce using rule 170 (binary_expression -> binary_expression | binary_expression .)
    *               shift and go to state 146
    /               shift and go to state 147
    %               shift and go to state 148
    +               shift and go to state 149
    -               shift and go to state 150
    RIGHT_OP        shift and go to state 151
    LEFT_OP         shift and go to state 152
    <               shift and go to state 153
    LTE             shift and go to state 154
    GTE             shift and go to state 155
    >               shift and go to state 156
    EQ_OP           shift and go to state 157
    NEQ_OP          shift and go to state 158
    &               shift and go to state 159
    |               shift and go to state 160
    ^               shift and go to state 161
    AND_OP          shift and go to state 162
    OR_OP           shift and go to state 163

  ! *               [ reduce using rule 170 (binary_expression -> binary_expression | binary_expression .) ]
  ! /               [ reduce using rule 170 (binary_expression -> binary_expression | binary_expression .) ]
  ! %               [ reduce using rule 170 (binary_expression -> binary_expression | binary_expression .) ]
  ! +               [ reduce using rule 170 (binary_expression -> binary_expression | binary_expression .) ]
  ! -               [ reduce using rule 170 (binary_expression -> binary_expression | binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 170 (binary_expression -> binary_expression | binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 170 (binary_expression -> binary_expression | binary_expression .) ]
  ! <               [ reduce using rule 170 (binary_expression -> binary_expression | binary_expression .) ]
  ! LTE             [ reduce using rule 170 (binary_expression -> binary_expression | binary_expression .) ]
  ! GTE             [ reduce using rule 170 (binary_expression -> binary_expression | binary_expression .) ]
  ! >               [ reduce using rule 170 (binary_expression -> binary_expression | binary_expression .) ]
  ! EQ_OP           [ reduce using rule 170 (binary_expression -> binary_expression | binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 170 (binary_expression -> binary_expression | binary_expression .) ]
  ! &               [ reduce using rule 170 (binary_expression -> binary_expression | binary_expression .) ]
  ! |               [ reduce using rule 170 (binary_expression -> binary_expression | binary_expression .) ]
  ! ^               [ reduce using rule 170 (binary_expression -> binary_expression | binary_expression .) ]
  ! AND_OP          [ reduce using rule 170 (binary_expression -> binary_expression | binary_expression .) ]
  ! OR_OP           [ reduce using rule 170 (binary_expression -> binary_expression | binary_expression .) ]


state 214

    (171) binary_expression -> binary_expression ^ binary_expression .
    (156) binary_expression -> binary_expression . * binary_expression
    (157) binary_expression -> binary_expression . / binary_expression
    (158) binary_expression -> binary_expression . % binary_expression
    (159) binary_expression -> binary_expression . + binary_expression
    (160) binary_expression -> binary_expression . - binary_expression
    (161) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (162) binary_expression -> binary_expression . LEFT_OP binary_expression
    (163) binary_expression -> binary_expression . < binary_expression
    (164) binary_expression -> binary_expression . LTE binary_expression
    (165) binary_expression -> binary_expression . GTE binary_expression
    (166) binary_expression -> binary_expression . > binary_expression
    (167) binary_expression -> binary_expression . EQ_OP binary_expression
    (168) binary_expression -> binary_expression . NEQ_OP binary_expression
    (169) binary_expression -> binary_expression . & binary_expression
    (170) binary_expression -> binary_expression . | binary_expression
    (171) binary_expression -> binary_expression . ^ binary_expression
    (172) binary_expression -> binary_expression . AND_OP binary_expression
    (173) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .)
    ;               reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .)
    ?               reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .)
    ]               reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .)
    }               reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .)
    )               reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .)
    :               reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .)
    *               shift and go to state 146
    /               shift and go to state 147
    %               shift and go to state 148
    +               shift and go to state 149
    -               shift and go to state 150
    RIGHT_OP        shift and go to state 151
    LEFT_OP         shift and go to state 152
    <               shift and go to state 153
    LTE             shift and go to state 154
    GTE             shift and go to state 155
    >               shift and go to state 156
    EQ_OP           shift and go to state 157
    NEQ_OP          shift and go to state 158
    &               shift and go to state 159
    |               shift and go to state 160
    ^               shift and go to state 161
    AND_OP          shift and go to state 162
    OR_OP           shift and go to state 163

  ! *               [ reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! /               [ reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! %               [ reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! +               [ reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! -               [ reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! <               [ reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! LTE             [ reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! GTE             [ reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! >               [ reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! EQ_OP           [ reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! &               [ reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! |               [ reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! ^               [ reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! AND_OP          [ reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .) ]
  ! OR_OP           [ reduce using rule 171 (binary_expression -> binary_expression ^ binary_expression .) ]


state 215

    (172) binary_expression -> binary_expression AND_OP binary_expression .
    (156) binary_expression -> binary_expression . * binary_expression
    (157) binary_expression -> binary_expression . / binary_expression
    (158) binary_expression -> binary_expression . % binary_expression
    (159) binary_expression -> binary_expression . + binary_expression
    (160) binary_expression -> binary_expression . - binary_expression
    (161) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (162) binary_expression -> binary_expression . LEFT_OP binary_expression
    (163) binary_expression -> binary_expression . < binary_expression
    (164) binary_expression -> binary_expression . LTE binary_expression
    (165) binary_expression -> binary_expression . GTE binary_expression
    (166) binary_expression -> binary_expression . > binary_expression
    (167) binary_expression -> binary_expression . EQ_OP binary_expression
    (168) binary_expression -> binary_expression . NEQ_OP binary_expression
    (169) binary_expression -> binary_expression . & binary_expression
    (170) binary_expression -> binary_expression . | binary_expression
    (171) binary_expression -> binary_expression . ^ binary_expression
    (172) binary_expression -> binary_expression . AND_OP binary_expression
    (173) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .)
    ;               reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .)
    ?               reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .)
    ]               reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .)
    }               reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .)
    )               reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .)
    :               reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .)
    *               shift and go to state 146
    /               shift and go to state 147
    %               shift and go to state 148
    +               shift and go to state 149
    -               shift and go to state 150
    RIGHT_OP        shift and go to state 151
    LEFT_OP         shift and go to state 152
    <               shift and go to state 153
    LTE             shift and go to state 154
    GTE             shift and go to state 155
    >               shift and go to state 156
    EQ_OP           shift and go to state 157
    NEQ_OP          shift and go to state 158
    &               shift and go to state 159
    |               shift and go to state 160
    ^               shift and go to state 161
    AND_OP          shift and go to state 162
    OR_OP           shift and go to state 163

  ! *               [ reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! /               [ reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! %               [ reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! +               [ reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! -               [ reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! <               [ reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! LTE             [ reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! GTE             [ reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! >               [ reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! EQ_OP           [ reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! &               [ reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! |               [ reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! ^               [ reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! AND_OP          [ reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .) ]
  ! OR_OP           [ reduce using rule 172 (binary_expression -> binary_expression AND_OP binary_expression .) ]


state 216

    (173) binary_expression -> binary_expression OR_OP binary_expression .
    (156) binary_expression -> binary_expression . * binary_expression
    (157) binary_expression -> binary_expression . / binary_expression
    (158) binary_expression -> binary_expression . % binary_expression
    (159) binary_expression -> binary_expression . + binary_expression
    (160) binary_expression -> binary_expression . - binary_expression
    (161) binary_expression -> binary_expression . RIGHT_OP binary_expression
    (162) binary_expression -> binary_expression . LEFT_OP binary_expression
    (163) binary_expression -> binary_expression . < binary_expression
    (164) binary_expression -> binary_expression . LTE binary_expression
    (165) binary_expression -> binary_expression . GTE binary_expression
    (166) binary_expression -> binary_expression . > binary_expression
    (167) binary_expression -> binary_expression . EQ_OP binary_expression
    (168) binary_expression -> binary_expression . NEQ_OP binary_expression
    (169) binary_expression -> binary_expression . & binary_expression
    (170) binary_expression -> binary_expression . | binary_expression
    (171) binary_expression -> binary_expression . ^ binary_expression
    (172) binary_expression -> binary_expression . AND_OP binary_expression
    (173) binary_expression -> binary_expression . OR_OP binary_expression

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NEQ_OP resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ,               reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .)
    ;               reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .)
    ?               reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .)
    ]               reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .)
    }               reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .)
    )               reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .)
    :               reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .)
    *               shift and go to state 146
    /               shift and go to state 147
    %               shift and go to state 148
    +               shift and go to state 149
    -               shift and go to state 150
    RIGHT_OP        shift and go to state 151
    LEFT_OP         shift and go to state 152
    <               shift and go to state 153
    LTE             shift and go to state 154
    GTE             shift and go to state 155
    >               shift and go to state 156
    EQ_OP           shift and go to state 157
    NEQ_OP          shift and go to state 158
    &               shift and go to state 159
    |               shift and go to state 160
    ^               shift and go to state 161
    AND_OP          shift and go to state 162
    OR_OP           shift and go to state 163

  ! *               [ reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! /               [ reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! %               [ reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! +               [ reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! -               [ reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! <               [ reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! LTE             [ reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! GTE             [ reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! >               [ reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! EQ_OP           [ reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! NEQ_OP          [ reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! &               [ reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! |               [ reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! ^               [ reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! AND_OP          [ reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .) ]
  ! OR_OP           [ reduce using rule 173 (binary_expression -> binary_expression OR_OP binary_expression .) ]


state 217

    (109) uscd_expression -> uscd_expression [ expression . ]
    (102) expression -> expression . , assignable_expression
    (86) ternary_expression -> expression . ? expression : expression

    ]               shift and go to state 236
    ,               shift and go to state 172
    ?               shift and go to state 171


state 218

    (110) uscd_expression -> uscd_expression ( arg_value_exp_list . )
    (67) arg_value_exp_list -> arg_value_exp_list . , assignable_expression

    )               shift and go to state 237
    ,               shift and go to state 238


state 219

    (111) uscd_expression -> uscd_expression ( ) .

    [               reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    (               reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    PTR_OP          reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    =               reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    MUL_ASG         reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    DIV_ASG         reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    MOD_ASG         reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    ADD_ASG         reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    SUB_ASG         reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    LEFT_ASG        reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    RIGHT_ASG       reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    AND_ASG         reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    XOR_ASG         reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    OR_ASG          reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    INC_OP          reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    DEC_OP          reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    *               reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    /               reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    %               reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    +               reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    -               reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    RIGHT_OP        reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    LEFT_OP         reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    <               reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    LTE             reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    GTE             reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    >               reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    EQ_OP           reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    NEQ_OP          reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    &               reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    |               reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    ^               reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    AND_OP          reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    OR_OP           reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    ,               reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    ;               reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    ?               reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    ]               reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    }               reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    )               reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)
    :               reduce using rule 111 (uscd_expression -> uscd_expression ( ) .)


state 220

    (66) arg_value_exp_list -> assignable_expression .
    (101) expression -> assignable_expression .

  ! reduce/reduce conflict for , resolved using rule 66 (arg_value_exp_list -> assignable_expression .)
    )               reduce using rule 66 (arg_value_exp_list -> assignable_expression .)
    ,               reduce using rule 66 (arg_value_exp_list -> assignable_expression .)
    ?               reduce using rule 101 (expression -> assignable_expression .)

  ! ,               [ reduce using rule 101 (expression -> assignable_expression .) ]


state 221

    (112) uscd_expression -> uscd_expression PTR_OP identifier .

    [               reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    (               reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    PTR_OP          reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    =               reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    MUL_ASG         reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    DIV_ASG         reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    MOD_ASG         reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    ADD_ASG         reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    SUB_ASG         reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    LEFT_ASG        reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    RIGHT_ASG       reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    AND_ASG         reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    XOR_ASG         reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    OR_ASG          reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    INC_OP          reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    DEC_OP          reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    *               reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    /               reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    %               reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    +               reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    -               reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    RIGHT_OP        reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    LEFT_OP         reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    <               reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    LTE             reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    GTE             reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    >               reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    EQ_OP           reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    NEQ_OP          reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    &               reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    |               reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    ^               reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    AND_OP          reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    OR_OP           reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    ,               reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    ;               reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    ?               reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    ]               reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    }               reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    )               reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)
    :               reduce using rule 112 (uscd_expression -> uscd_expression PTR_OP identifier .)


state 222

    (86) ternary_expression -> expression ? expression . : expression
    (102) expression -> expression . , assignable_expression
    (86) ternary_expression -> expression . ? expression : expression

    :               shift and go to state 239
    ,               shift and go to state 172
    ?               shift and go to state 171


state 223

    (102) expression -> expression , assignable_expression .
    (101) expression -> assignable_expression .

  ! reduce/reduce conflict for ? resolved using rule 101 (expression -> assignable_expression .)
  ! reduce/reduce conflict for , resolved using rule 101 (expression -> assignable_expression .)
    ;               reduce using rule 102 (expression -> expression , assignable_expression .)
    )               reduce using rule 102 (expression -> expression , assignable_expression .)
    ]               reduce using rule 102 (expression -> expression , assignable_expression .)
    :               reduce using rule 102 (expression -> expression , assignable_expression .)
    }               reduce using rule 102 (expression -> expression , assignable_expression .)
    ?               reduce using rule 101 (expression -> assignable_expression .)
    ,               reduce using rule 101 (expression -> assignable_expression .)

  ! ?               [ reduce using rule 102 (expression -> expression , assignable_expression .) ]
  ! ,               [ reduce using rule 102 (expression -> expression , assignable_expression .) ]


state 224

    (116) unit_expression -> ( expression ) .

    [               reduce using rule 116 (unit_expression -> ( expression ) .)
    (               reduce using rule 116 (unit_expression -> ( expression ) .)
    PTR_OP          reduce using rule 116 (unit_expression -> ( expression ) .)
    =               reduce using rule 116 (unit_expression -> ( expression ) .)
    MUL_ASG         reduce using rule 116 (unit_expression -> ( expression ) .)
    DIV_ASG         reduce using rule 116 (unit_expression -> ( expression ) .)
    MOD_ASG         reduce using rule 116 (unit_expression -> ( expression ) .)
    ADD_ASG         reduce using rule 116 (unit_expression -> ( expression ) .)
    SUB_ASG         reduce using rule 116 (unit_expression -> ( expression ) .)
    LEFT_ASG        reduce using rule 116 (unit_expression -> ( expression ) .)
    RIGHT_ASG       reduce using rule 116 (unit_expression -> ( expression ) .)
    AND_ASG         reduce using rule 116 (unit_expression -> ( expression ) .)
    XOR_ASG         reduce using rule 116 (unit_expression -> ( expression ) .)
    OR_ASG          reduce using rule 116 (unit_expression -> ( expression ) .)
    INC_OP          reduce using rule 116 (unit_expression -> ( expression ) .)
    DEC_OP          reduce using rule 116 (unit_expression -> ( expression ) .)
    *               reduce using rule 116 (unit_expression -> ( expression ) .)
    /               reduce using rule 116 (unit_expression -> ( expression ) .)
    %               reduce using rule 116 (unit_expression -> ( expression ) .)
    +               reduce using rule 116 (unit_expression -> ( expression ) .)
    -               reduce using rule 116 (unit_expression -> ( expression ) .)
    RIGHT_OP        reduce using rule 116 (unit_expression -> ( expression ) .)
    LEFT_OP         reduce using rule 116 (unit_expression -> ( expression ) .)
    <               reduce using rule 116 (unit_expression -> ( expression ) .)
    LTE             reduce using rule 116 (unit_expression -> ( expression ) .)
    GTE             reduce using rule 116 (unit_expression -> ( expression ) .)
    >               reduce using rule 116 (unit_expression -> ( expression ) .)
    EQ_OP           reduce using rule 116 (unit_expression -> ( expression ) .)
    NEQ_OP          reduce using rule 116 (unit_expression -> ( expression ) .)
    &               reduce using rule 116 (unit_expression -> ( expression ) .)
    |               reduce using rule 116 (unit_expression -> ( expression ) .)
    ^               reduce using rule 116 (unit_expression -> ( expression ) .)
    AND_OP          reduce using rule 116 (unit_expression -> ( expression ) .)
    OR_OP           reduce using rule 116 (unit_expression -> ( expression ) .)
    ,               reduce using rule 116 (unit_expression -> ( expression ) .)
    ;               reduce using rule 116 (unit_expression -> ( expression ) .)
    ?               reduce using rule 116 (unit_expression -> ( expression ) .)
    ]               reduce using rule 116 (unit_expression -> ( expression ) .)
    }               reduce using rule 116 (unit_expression -> ( expression ) .)
    )               reduce using rule 116 (unit_expression -> ( expression ) .)
    :               reduce using rule 116 (unit_expression -> ( expression ) .)


state 225

    (106) parameter_list -> parameter_list , parameter_declaration .

    )               reduce using rule 106 (parameter_list -> parameter_list , parameter_declaration .)
    ,               reduce using rule 106 (parameter_list -> parameter_list , parameter_declaration .)


state 226

    (43) identifier_list -> identifier_list , identifier .

    ,               reduce using rule 43 (identifier_list -> identifier_list , identifier .)
    )               reduce using rule 43 (identifier_list -> identifier_list , identifier .)


state 227

    (138) struct_variable_list -> struct_variable_list , variable .

    ;               reduce using rule 138 (struct_variable_list -> struct_variable_list , variable .)
    ,               reduce using rule 138 (struct_variable_list -> struct_variable_list , variable .)


state 228

    (117) branch_statement -> IF ( expression . ) statement
    (118) branch_statement -> IF ( expression . ) statement ELSE statement
    (102) expression -> expression . , assignable_expression
    (86) ternary_expression -> expression . ? expression : expression

    )               shift and go to state 240
    ,               shift and go to state 172
    ?               shift and go to state 171


state 229

    (119) loop_statement -> WHILE ( expression . ) statement
    (102) expression -> expression . , assignable_expression
    (86) ternary_expression -> expression . ? expression : expression

    )               shift and go to state 241
    ,               shift and go to state 172
    ?               shift and go to state 171


state 230

    (120) loop_statement -> FOR ( parameter_declaration . ; expression_orempty ; expression_orempty ) statement
    (123) loop_statement -> FOR ( parameter_declaration . = expression ; expression_orempty ; expression_orempty ) statement

    ;               shift and go to state 242
    =               shift and go to state 243


state 231

    (121) loop_statement -> FOR ( expression . ; expression_orempty ; expression_orempty ) statement
    (102) expression -> expression . , assignable_expression
    (86) ternary_expression -> expression . ? expression : expression

    ;               shift and go to state 244
    ,               shift and go to state 172
    ?               shift and go to state 171


state 232

    (122) loop_statement -> FOR ( empty . ; expression_orempty ; expression_orempty ) statement

    ;               shift and go to state 245


state 233

    (50) back_statement -> RETURN expression ; .

    COMMENT1        reduce using rule 50 (back_statement -> RETURN expression ; .)
    COMMENT2        reduce using rule 50 (back_statement -> RETURN expression ; .)
    {               reduce using rule 50 (back_statement -> RETURN expression ; .)
    IF              reduce using rule 50 (back_statement -> RETURN expression ; .)
    WHILE           reduce using rule 50 (back_statement -> RETURN expression ; .)
    FOR             reduce using rule 50 (back_statement -> RETURN expression ; .)
    BREAK           reduce using rule 50 (back_statement -> RETURN expression ; .)
    CONTINUE        reduce using rule 50 (back_statement -> RETURN expression ; .)
    RETURN          reduce using rule 50 (back_statement -> RETURN expression ; .)
    INT             reduce using rule 50 (back_statement -> RETURN expression ; .)
    SHORT           reduce using rule 50 (back_statement -> RETURN expression ; .)
    LONG            reduce using rule 50 (back_statement -> RETURN expression ; .)
    CHAR            reduce using rule 50 (back_statement -> RETURN expression ; .)
    VOID            reduce using rule 50 (back_statement -> RETURN expression ; .)
    FLOAT           reduce using rule 50 (back_statement -> RETURN expression ; .)
    DOUBLE          reduce using rule 50 (back_statement -> RETURN expression ; .)
    BOOL            reduce using rule 50 (back_statement -> RETURN expression ; .)
    SIGNED          reduce using rule 50 (back_statement -> RETURN expression ; .)
    UNSIGNED        reduce using rule 50 (back_statement -> RETURN expression ; .)
    STRUCT          reduce using rule 50 (back_statement -> RETURN expression ; .)
    &               reduce using rule 50 (back_statement -> RETURN expression ; .)
    *               reduce using rule 50 (back_statement -> RETURN expression ; .)
    +               reduce using rule 50 (back_statement -> RETURN expression ; .)
    -               reduce using rule 50 (back_statement -> RETURN expression ; .)
    ~               reduce using rule 50 (back_statement -> RETURN expression ; .)
    !               reduce using rule 50 (back_statement -> RETURN expression ; .)
    INC_OP          reduce using rule 50 (back_statement -> RETURN expression ; .)
    DEC_OP          reduce using rule 50 (back_statement -> RETURN expression ; .)
    (               reduce using rule 50 (back_statement -> RETURN expression ; .)
    ID              reduce using rule 50 (back_statement -> RETURN expression ; .)
    INTEGER_CONST   reduce using rule 50 (back_statement -> RETURN expression ; .)
    CHAR_CONST      reduce using rule 50 (back_statement -> RETURN expression ; .)
    FLOAT_CONST     reduce using rule 50 (back_statement -> RETURN expression ; .)
    BOOL_CONST      reduce using rule 50 (back_statement -> RETURN expression ; .)
    STRING_CONST    reduce using rule 50 (back_statement -> RETURN expression ; .)
    SIZEOF          reduce using rule 50 (back_statement -> RETURN expression ; .)
    ;               reduce using rule 50 (back_statement -> RETURN expression ; .)
    }               reduce using rule 50 (back_statement -> RETURN expression ; .)
    ELSE            reduce using rule 50 (back_statement -> RETURN expression ; .)


state 234

    (9) initializer -> { initializer_list , } .

    ,               reduce using rule 9 (initializer -> { initializer_list , } .)
    ;               reduce using rule 9 (initializer -> { initializer_list , } .)
    }               reduce using rule 9 (initializer -> { initializer_list , } .)


state 235

    (11) initializer_list -> initializer_list , initializer .

    ,               reduce using rule 11 (initializer_list -> initializer_list , initializer .)
    }               reduce using rule 11 (initializer_list -> initializer_list , initializer .)


state 236

    (109) uscd_expression -> uscd_expression [ expression ] .

    [               reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    (               reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    PTR_OP          reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    =               reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    MUL_ASG         reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    DIV_ASG         reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    MOD_ASG         reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    ADD_ASG         reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    SUB_ASG         reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    LEFT_ASG        reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    RIGHT_ASG       reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    AND_ASG         reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    XOR_ASG         reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    OR_ASG          reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    INC_OP          reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    DEC_OP          reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    *               reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    /               reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    %               reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    +               reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    -               reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    RIGHT_OP        reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    LEFT_OP         reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    <               reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    LTE             reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    GTE             reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    >               reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    EQ_OP           reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    NEQ_OP          reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    &               reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    |               reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    ^               reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    AND_OP          reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    OR_OP           reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    ,               reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    ;               reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    ?               reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    ]               reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    }               reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    )               reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)
    :               reduce using rule 109 (uscd_expression -> uscd_expression [ expression ] .)


state 237

    (110) uscd_expression -> uscd_expression ( arg_value_exp_list ) .

    [               reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    (               reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    PTR_OP          reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    =               reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    MUL_ASG         reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    DIV_ASG         reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    MOD_ASG         reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    ADD_ASG         reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    SUB_ASG         reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    LEFT_ASG        reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    RIGHT_ASG       reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    AND_ASG         reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    XOR_ASG         reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    OR_ASG          reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    INC_OP          reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    DEC_OP          reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    *               reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    /               reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    %               reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    +               reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    -               reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    RIGHT_OP        reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    LEFT_OP         reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    <               reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    LTE             reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    GTE             reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    >               reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    EQ_OP           reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    NEQ_OP          reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    &               reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    |               reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    ^               reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    AND_OP          reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    OR_OP           reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    ,               reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    ;               reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    ?               reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    ]               reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    }               reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    )               reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)
    :               reduce using rule 110 (uscd_expression -> uscd_expression ( arg_value_exp_list ) .)


state 238

    (67) arg_value_exp_list -> arg_value_exp_list , . assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    assignable_expression          shift and go to state 246
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    expression                     shift and go to state 77
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 239

    (86) ternary_expression -> expression ? expression : . expression
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    expression                     shift and go to state 247
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 240

    (117) branch_statement -> IF ( expression ) . statement
    (118) branch_statement -> IF ( expression ) . statement ELSE statement
    (124) statement -> . funcbody_statement
    (125) statement -> . branch_statement
    (126) statement -> . expression_statement
    (127) statement -> . loop_statement
    (128) statement -> . back_statement
    (83) funcbody_statement -> . { block_item_list_orempty }
    (117) branch_statement -> . IF ( expression ) statement
    (118) branch_statement -> . IF ( expression ) statement ELSE statement
    (103) expression_statement -> . expression_orempty ;
    (119) loop_statement -> . WHILE ( expression ) statement
    (120) loop_statement -> . FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement
    (121) loop_statement -> . FOR ( expression ; expression_orempty ; expression_orempty ) statement
    (122) loop_statement -> . FOR ( empty ; expression_orempty ; expression_orempty ) statement
    (123) loop_statement -> . FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement
    (47) back_statement -> . BREAK ;
    (48) back_statement -> . CONTINUE ;
    (49) back_statement -> . RETURN ;
    (50) back_statement -> . RETURN expression ;
    (81) expression_orempty -> . empty
    (82) expression_orempty -> . expression
    (16) empty -> .
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    {               shift and go to state 61
    IF              shift and go to state 121
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    CONTINUE        shift and go to state 127
    RETURN          shift and go to state 128
    ;               reduce using rule 16 (empty -> .)
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    expression                     shift and go to state 122
    statement                      shift and go to state 248
    funcbody_statement             shift and go to state 116
    branch_statement               shift and go to state 117
    expression_statement           shift and go to state 118
    loop_statement                 shift and go to state 119
    back_statement                 shift and go to state 120
    expression_orempty             shift and go to state 123
    empty                          shift and go to state 186
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 241

    (119) loop_statement -> WHILE ( expression ) . statement
    (124) statement -> . funcbody_statement
    (125) statement -> . branch_statement
    (126) statement -> . expression_statement
    (127) statement -> . loop_statement
    (128) statement -> . back_statement
    (83) funcbody_statement -> . { block_item_list_orempty }
    (117) branch_statement -> . IF ( expression ) statement
    (118) branch_statement -> . IF ( expression ) statement ELSE statement
    (103) expression_statement -> . expression_orempty ;
    (119) loop_statement -> . WHILE ( expression ) statement
    (120) loop_statement -> . FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement
    (121) loop_statement -> . FOR ( expression ; expression_orempty ; expression_orempty ) statement
    (122) loop_statement -> . FOR ( empty ; expression_orempty ; expression_orempty ) statement
    (123) loop_statement -> . FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement
    (47) back_statement -> . BREAK ;
    (48) back_statement -> . CONTINUE ;
    (49) back_statement -> . RETURN ;
    (50) back_statement -> . RETURN expression ;
    (81) expression_orempty -> . empty
    (82) expression_orempty -> . expression
    (16) empty -> .
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    {               shift and go to state 61
    IF              shift and go to state 121
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    CONTINUE        shift and go to state 127
    RETURN          shift and go to state 128
    ;               reduce using rule 16 (empty -> .)
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    expression                     shift and go to state 122
    statement                      shift and go to state 249
    funcbody_statement             shift and go to state 116
    branch_statement               shift and go to state 117
    expression_statement           shift and go to state 118
    loop_statement                 shift and go to state 119
    back_statement                 shift and go to state 120
    expression_orempty             shift and go to state 123
    empty                          shift and go to state 186
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 242

    (120) loop_statement -> FOR ( parameter_declaration ; . expression_orempty ; expression_orempty ) statement
    (81) expression_orempty -> . empty
    (82) expression_orempty -> . expression
    (16) empty -> .
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    ;               reduce using rule 16 (empty -> .)
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    expression_orempty             shift and go to state 250
    empty                          shift and go to state 186
    expression                     shift and go to state 122
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 243

    (123) loop_statement -> FOR ( parameter_declaration = . expression ; expression_orempty ; expression_orempty ) statement
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    expression                     shift and go to state 251
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 244

    (121) loop_statement -> FOR ( expression ; . expression_orempty ; expression_orempty ) statement
    (81) expression_orempty -> . empty
    (82) expression_orempty -> . expression
    (16) empty -> .
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    ;               reduce using rule 16 (empty -> .)
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    expression                     shift and go to state 122
    expression_orempty             shift and go to state 252
    empty                          shift and go to state 186
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 245

    (122) loop_statement -> FOR ( empty ; . expression_orempty ; expression_orempty ) statement
    (81) expression_orempty -> . empty
    (82) expression_orempty -> . expression
    (16) empty -> .
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    ;               reduce using rule 16 (empty -> .)
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    empty                          shift and go to state 186
    expression_orempty             shift and go to state 253
    expression                     shift and go to state 122
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 246

    (67) arg_value_exp_list -> arg_value_exp_list , assignable_expression .
    (101) expression -> assignable_expression .

  ! reduce/reduce conflict for , resolved using rule 67 (arg_value_exp_list -> arg_value_exp_list , assignable_expression .)
    )               reduce using rule 67 (arg_value_exp_list -> arg_value_exp_list , assignable_expression .)
    ,               reduce using rule 67 (arg_value_exp_list -> arg_value_exp_list , assignable_expression .)
    ?               reduce using rule 101 (expression -> assignable_expression .)

  ! ,               [ reduce using rule 101 (expression -> assignable_expression .) ]


state 247

    (86) ternary_expression -> expression ? expression : expression .
    (102) expression -> expression . , assignable_expression
    (86) ternary_expression -> expression . ? expression : expression

  ! shift/reduce conflict for , resolved as shift
  ! shift/reduce conflict for ? resolved as shift
    ;               reduce using rule 86 (ternary_expression -> expression ? expression : expression .)
    ]               reduce using rule 86 (ternary_expression -> expression ? expression : expression .)
    }               reduce using rule 86 (ternary_expression -> expression ? expression : expression .)
    )               reduce using rule 86 (ternary_expression -> expression ? expression : expression .)
    :               reduce using rule 86 (ternary_expression -> expression ? expression : expression .)
    ,               shift and go to state 172
    ?               shift and go to state 171

  ! ,               [ reduce using rule 86 (ternary_expression -> expression ? expression : expression .) ]
  ! ?               [ reduce using rule 86 (ternary_expression -> expression ? expression : expression .) ]


state 248

    (117) branch_statement -> IF ( expression ) statement .
    (118) branch_statement -> IF ( expression ) statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    COMMENT1        reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    COMMENT2        reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    {               reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    IF              reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    WHILE           reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    FOR             reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    BREAK           reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    CONTINUE        reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    RETURN          reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    INT             reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    SHORT           reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    LONG            reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    CHAR            reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    VOID            reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    FLOAT           reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    DOUBLE          reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    BOOL            reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    SIGNED          reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    UNSIGNED        reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    STRUCT          reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    &               reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    *               reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    +               reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    -               reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    ~               reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    !               reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    INC_OP          reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    DEC_OP          reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    (               reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    ID              reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    INTEGER_CONST   reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    CHAR_CONST      reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    FLOAT_CONST     reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    BOOL_CONST      reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    STRING_CONST    reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    SIZEOF          reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    ;               reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    }               reduce using rule 117 (branch_statement -> IF ( expression ) statement .)
    ELSE            shift and go to state 254

  ! ELSE            [ reduce using rule 117 (branch_statement -> IF ( expression ) statement .) ]


state 249

    (119) loop_statement -> WHILE ( expression ) statement .

    COMMENT1        reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    COMMENT2        reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    {               reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    IF              reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    WHILE           reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    FOR             reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    BREAK           reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    CONTINUE        reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    RETURN          reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    INT             reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    SHORT           reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    LONG            reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    CHAR            reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    VOID            reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    FLOAT           reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    DOUBLE          reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    BOOL            reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    SIGNED          reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    UNSIGNED        reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    STRUCT          reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    &               reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    *               reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    +               reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    -               reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    ~               reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    !               reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    INC_OP          reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    DEC_OP          reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    (               reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    ID              reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    INTEGER_CONST   reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    CHAR_CONST      reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    FLOAT_CONST     reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    BOOL_CONST      reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    STRING_CONST    reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    SIZEOF          reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    ;               reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    }               reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)
    ELSE            reduce using rule 119 (loop_statement -> WHILE ( expression ) statement .)


state 250

    (120) loop_statement -> FOR ( parameter_declaration ; expression_orempty . ; expression_orempty ) statement

    ;               shift and go to state 255


state 251

    (123) loop_statement -> FOR ( parameter_declaration = expression . ; expression_orempty ; expression_orempty ) statement
    (102) expression -> expression . , assignable_expression
    (86) ternary_expression -> expression . ? expression : expression

    ;               shift and go to state 256
    ,               shift and go to state 172
    ?               shift and go to state 171


state 252

    (121) loop_statement -> FOR ( expression ; expression_orempty . ; expression_orempty ) statement

    ;               shift and go to state 257


state 253

    (122) loop_statement -> FOR ( empty ; expression_orempty . ; expression_orempty ) statement

    ;               shift and go to state 258


state 254

    (118) branch_statement -> IF ( expression ) statement ELSE . statement
    (124) statement -> . funcbody_statement
    (125) statement -> . branch_statement
    (126) statement -> . expression_statement
    (127) statement -> . loop_statement
    (128) statement -> . back_statement
    (83) funcbody_statement -> . { block_item_list_orempty }
    (117) branch_statement -> . IF ( expression ) statement
    (118) branch_statement -> . IF ( expression ) statement ELSE statement
    (103) expression_statement -> . expression_orempty ;
    (119) loop_statement -> . WHILE ( expression ) statement
    (120) loop_statement -> . FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement
    (121) loop_statement -> . FOR ( expression ; expression_orempty ; expression_orempty ) statement
    (122) loop_statement -> . FOR ( empty ; expression_orempty ; expression_orempty ) statement
    (123) loop_statement -> . FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement
    (47) back_statement -> . BREAK ;
    (48) back_statement -> . CONTINUE ;
    (49) back_statement -> . RETURN ;
    (50) back_statement -> . RETURN expression ;
    (81) expression_orempty -> . empty
    (82) expression_orempty -> . expression
    (16) empty -> .
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    {               shift and go to state 61
    IF              shift and go to state 121
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    CONTINUE        shift and go to state 127
    RETURN          shift and go to state 128
    ;               reduce using rule 16 (empty -> .)
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    expression                     shift and go to state 122
    statement                      shift and go to state 259
    funcbody_statement             shift and go to state 116
    branch_statement               shift and go to state 117
    expression_statement           shift and go to state 118
    loop_statement                 shift and go to state 119
    back_statement                 shift and go to state 120
    expression_orempty             shift and go to state 123
    empty                          shift and go to state 186
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 255

    (120) loop_statement -> FOR ( parameter_declaration ; expression_orempty ; . expression_orempty ) statement
    (81) expression_orempty -> . empty
    (82) expression_orempty -> . expression
    (16) empty -> .
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    )               reduce using rule 16 (empty -> .)
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    expression_orempty             shift and go to state 260
    empty                          shift and go to state 186
    expression                     shift and go to state 122
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 256

    (123) loop_statement -> FOR ( parameter_declaration = expression ; . expression_orempty ; expression_orempty ) statement
    (81) expression_orempty -> . empty
    (82) expression_orempty -> . expression
    (16) empty -> .
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    ;               reduce using rule 16 (empty -> .)
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    expression                     shift and go to state 122
    expression_orempty             shift and go to state 261
    empty                          shift and go to state 186
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 257

    (121) loop_statement -> FOR ( expression ; expression_orempty ; . expression_orempty ) statement
    (81) expression_orempty -> . empty
    (82) expression_orempty -> . expression
    (16) empty -> .
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    )               reduce using rule 16 (empty -> .)
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    expression                     shift and go to state 122
    expression_orempty             shift and go to state 262
    empty                          shift and go to state 186
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 258

    (122) loop_statement -> FOR ( empty ; expression_orempty ; . expression_orempty ) statement
    (81) expression_orempty -> . empty
    (82) expression_orempty -> . expression
    (16) empty -> .
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    )               reduce using rule 16 (empty -> .)
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    empty                          shift and go to state 186
    expression_orempty             shift and go to state 263
    expression                     shift and go to state 122
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 259

    (118) branch_statement -> IF ( expression ) statement ELSE statement .

    COMMENT1        reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    COMMENT2        reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    {               reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    IF              reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    WHILE           reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    FOR             reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    BREAK           reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    CONTINUE        reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    RETURN          reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    INT             reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    SHORT           reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    LONG            reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    CHAR            reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    VOID            reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    FLOAT           reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    DOUBLE          reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    BOOL            reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    SIGNED          reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    UNSIGNED        reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    STRUCT          reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    &               reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    *               reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    +               reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    -               reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    ~               reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    !               reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    INC_OP          reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    DEC_OP          reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    (               reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    ID              reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    INTEGER_CONST   reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    CHAR_CONST      reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    FLOAT_CONST     reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    BOOL_CONST      reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    STRING_CONST    reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    SIZEOF          reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    ;               reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    }               reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)
    ELSE            reduce using rule 118 (branch_statement -> IF ( expression ) statement ELSE statement .)


state 260

    (120) loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty . ) statement

    )               shift and go to state 264


state 261

    (123) loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty . ; expression_orempty ) statement

    ;               shift and go to state 265


state 262

    (121) loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty . ) statement

    )               shift and go to state 266


state 263

    (122) loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty . ) statement

    )               shift and go to state 267


state 264

    (120) loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) . statement
    (124) statement -> . funcbody_statement
    (125) statement -> . branch_statement
    (126) statement -> . expression_statement
    (127) statement -> . loop_statement
    (128) statement -> . back_statement
    (83) funcbody_statement -> . { block_item_list_orempty }
    (117) branch_statement -> . IF ( expression ) statement
    (118) branch_statement -> . IF ( expression ) statement ELSE statement
    (103) expression_statement -> . expression_orempty ;
    (119) loop_statement -> . WHILE ( expression ) statement
    (120) loop_statement -> . FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement
    (121) loop_statement -> . FOR ( expression ; expression_orempty ; expression_orempty ) statement
    (122) loop_statement -> . FOR ( empty ; expression_orempty ; expression_orempty ) statement
    (123) loop_statement -> . FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement
    (47) back_statement -> . BREAK ;
    (48) back_statement -> . CONTINUE ;
    (49) back_statement -> . RETURN ;
    (50) back_statement -> . RETURN expression ;
    (81) expression_orempty -> . empty
    (82) expression_orempty -> . expression
    (16) empty -> .
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    {               shift and go to state 61
    IF              shift and go to state 121
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    CONTINUE        shift and go to state 127
    RETURN          shift and go to state 128
    ;               reduce using rule 16 (empty -> .)
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    expression_orempty             shift and go to state 123
    statement                      shift and go to state 268
    funcbody_statement             shift and go to state 116
    branch_statement               shift and go to state 117
    expression_statement           shift and go to state 118
    loop_statement                 shift and go to state 119
    back_statement                 shift and go to state 120
    expression                     shift and go to state 122
    empty                          shift and go to state 186
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 265

    (123) loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; . expression_orempty ) statement
    (81) expression_orempty -> . empty
    (82) expression_orempty -> . expression
    (16) empty -> .
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    )               reduce using rule 16 (empty -> .)
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    expression                     shift and go to state 122
    expression_orempty             shift and go to state 269
    empty                          shift and go to state 186
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 266

    (121) loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) . statement
    (124) statement -> . funcbody_statement
    (125) statement -> . branch_statement
    (126) statement -> . expression_statement
    (127) statement -> . loop_statement
    (128) statement -> . back_statement
    (83) funcbody_statement -> . { block_item_list_orempty }
    (117) branch_statement -> . IF ( expression ) statement
    (118) branch_statement -> . IF ( expression ) statement ELSE statement
    (103) expression_statement -> . expression_orempty ;
    (119) loop_statement -> . WHILE ( expression ) statement
    (120) loop_statement -> . FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement
    (121) loop_statement -> . FOR ( expression ; expression_orempty ; expression_orempty ) statement
    (122) loop_statement -> . FOR ( empty ; expression_orempty ; expression_orempty ) statement
    (123) loop_statement -> . FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement
    (47) back_statement -> . BREAK ;
    (48) back_statement -> . CONTINUE ;
    (49) back_statement -> . RETURN ;
    (50) back_statement -> . RETURN expression ;
    (81) expression_orempty -> . empty
    (82) expression_orempty -> . expression
    (16) empty -> .
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    {               shift and go to state 61
    IF              shift and go to state 121
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    CONTINUE        shift and go to state 127
    RETURN          shift and go to state 128
    ;               reduce using rule 16 (empty -> .)
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    expression                     shift and go to state 122
    expression_orempty             shift and go to state 123
    statement                      shift and go to state 270
    funcbody_statement             shift and go to state 116
    branch_statement               shift and go to state 117
    expression_statement           shift and go to state 118
    loop_statement                 shift and go to state 119
    back_statement                 shift and go to state 120
    empty                          shift and go to state 186
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 267

    (122) loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) . statement
    (124) statement -> . funcbody_statement
    (125) statement -> . branch_statement
    (126) statement -> . expression_statement
    (127) statement -> . loop_statement
    (128) statement -> . back_statement
    (83) funcbody_statement -> . { block_item_list_orempty }
    (117) branch_statement -> . IF ( expression ) statement
    (118) branch_statement -> . IF ( expression ) statement ELSE statement
    (103) expression_statement -> . expression_orempty ;
    (119) loop_statement -> . WHILE ( expression ) statement
    (120) loop_statement -> . FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement
    (121) loop_statement -> . FOR ( expression ; expression_orempty ; expression_orempty ) statement
    (122) loop_statement -> . FOR ( empty ; expression_orempty ; expression_orempty ) statement
    (123) loop_statement -> . FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement
    (47) back_statement -> . BREAK ;
    (48) back_statement -> . CONTINUE ;
    (49) back_statement -> . RETURN ;
    (50) back_statement -> . RETURN expression ;
    (81) expression_orempty -> . empty
    (82) expression_orempty -> . expression
    (16) empty -> .
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    {               shift and go to state 61
    IF              shift and go to state 121
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    CONTINUE        shift and go to state 127
    RETURN          shift and go to state 128
    ;               reduce using rule 16 (empty -> .)
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    empty                          shift and go to state 186
    expression_orempty             shift and go to state 123
    statement                      shift and go to state 271
    funcbody_statement             shift and go to state 116
    branch_statement               shift and go to state 117
    expression_statement           shift and go to state 118
    loop_statement                 shift and go to state 119
    back_statement                 shift and go to state 120
    expression                     shift and go to state 122
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 268

    (120) loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .

    COMMENT1        reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    COMMENT2        reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    {               reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    IF              reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    WHILE           reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    FOR             reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    BREAK           reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    CONTINUE        reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    RETURN          reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    INT             reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    SHORT           reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    LONG            reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    CHAR            reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    VOID            reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    FLOAT           reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    DOUBLE          reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    BOOL            reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    SIGNED          reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    UNSIGNED        reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    STRUCT          reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    &               reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    *               reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    +               reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    -               reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    ~               reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    !               reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    INC_OP          reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    DEC_OP          reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    (               reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    ID              reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    INTEGER_CONST   reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    CHAR_CONST      reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    FLOAT_CONST     reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    BOOL_CONST      reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    STRING_CONST    reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    SIZEOF          reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    ;               reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    }               reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)
    ELSE            reduce using rule 120 (loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement .)


state 269

    (123) loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty . ) statement

    )               shift and go to state 272


state 270

    (121) loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .

    COMMENT1        reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    COMMENT2        reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    {               reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    IF              reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    WHILE           reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    FOR             reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    BREAK           reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    CONTINUE        reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    RETURN          reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    INT             reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    SHORT           reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    LONG            reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    CHAR            reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    VOID            reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    FLOAT           reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    DOUBLE          reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    BOOL            reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    SIGNED          reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    UNSIGNED        reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    STRUCT          reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    &               reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    *               reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    +               reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    -               reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    ~               reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    !               reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    INC_OP          reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    DEC_OP          reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    (               reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    ID              reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    INTEGER_CONST   reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    CHAR_CONST      reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    FLOAT_CONST     reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    BOOL_CONST      reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    STRING_CONST    reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    SIZEOF          reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    ;               reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    }               reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)
    ELSE            reduce using rule 121 (loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement .)


state 271

    (122) loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .

    COMMENT1        reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    COMMENT2        reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    {               reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    IF              reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    WHILE           reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    FOR             reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    BREAK           reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    CONTINUE        reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    RETURN          reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    INT             reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    SHORT           reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    LONG            reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    CHAR            reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    VOID            reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    FLOAT           reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    DOUBLE          reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    BOOL            reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    SIGNED          reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    UNSIGNED        reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    STRUCT          reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    &               reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    *               reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    +               reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    -               reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    ~               reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    !               reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    INC_OP          reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    DEC_OP          reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    (               reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    ID              reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    INTEGER_CONST   reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    CHAR_CONST      reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    FLOAT_CONST     reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    BOOL_CONST      reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    STRING_CONST    reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    SIZEOF          reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    ;               reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    }               reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)
    ELSE            reduce using rule 122 (loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement .)


state 272

    (123) loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) . statement
    (124) statement -> . funcbody_statement
    (125) statement -> . branch_statement
    (126) statement -> . expression_statement
    (127) statement -> . loop_statement
    (128) statement -> . back_statement
    (83) funcbody_statement -> . { block_item_list_orempty }
    (117) branch_statement -> . IF ( expression ) statement
    (118) branch_statement -> . IF ( expression ) statement ELSE statement
    (103) expression_statement -> . expression_orempty ;
    (119) loop_statement -> . WHILE ( expression ) statement
    (120) loop_statement -> . FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement
    (121) loop_statement -> . FOR ( expression ; expression_orempty ; expression_orempty ) statement
    (122) loop_statement -> . FOR ( empty ; expression_orempty ; expression_orempty ) statement
    (123) loop_statement -> . FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement
    (47) back_statement -> . BREAK ;
    (48) back_statement -> . CONTINUE ;
    (49) back_statement -> . RETURN ;
    (50) back_statement -> . RETURN expression ;
    (81) expression_orempty -> . empty
    (82) expression_orempty -> . expression
    (16) empty -> .
    (101) expression -> . assignable_expression
    (102) expression -> . expression , assignable_expression
    (68) assignable_expression -> . conditional_expression
    (69) assignable_expression -> . unary_expression assign_operator assignable_expression
    (84) conditional_expression -> . binary_expression
    (85) conditional_expression -> . ternary_expression
    (149) unary_expression -> . uscd_expression
    (150) unary_expression -> . unary_operator cast_expression
    (151) unary_expression -> . self_incdec cast_expression
    (152) unary_expression -> . cast_expression self_incdec
    (155) binary_expression -> . cast_expression
    (156) binary_expression -> . binary_expression * binary_expression
    (157) binary_expression -> . binary_expression / binary_expression
    (158) binary_expression -> . binary_expression % binary_expression
    (159) binary_expression -> . binary_expression + binary_expression
    (160) binary_expression -> . binary_expression - binary_expression
    (161) binary_expression -> . binary_expression RIGHT_OP binary_expression
    (162) binary_expression -> . binary_expression LEFT_OP binary_expression
    (163) binary_expression -> . binary_expression < binary_expression
    (164) binary_expression -> . binary_expression LTE binary_expression
    (165) binary_expression -> . binary_expression GTE binary_expression
    (166) binary_expression -> . binary_expression > binary_expression
    (167) binary_expression -> . binary_expression EQ_OP binary_expression
    (168) binary_expression -> . binary_expression NEQ_OP binary_expression
    (169) binary_expression -> . binary_expression & binary_expression
    (170) binary_expression -> . binary_expression | binary_expression
    (171) binary_expression -> . binary_expression ^ binary_expression
    (172) binary_expression -> . binary_expression AND_OP binary_expression
    (173) binary_expression -> . binary_expression OR_OP binary_expression
    (86) ternary_expression -> . expression ? expression : expression
    (108) uscd_expression -> . unit_expression
    (109) uscd_expression -> . uscd_expression [ expression ]
    (110) uscd_expression -> . uscd_expression ( arg_value_exp_list )
    (111) uscd_expression -> . uscd_expression ( )
    (112) uscd_expression -> . uscd_expression PTR_OP identifier
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (147) self_incdec -> . INC_OP
    (148) self_incdec -> . DEC_OP
    (174) cast_expression -> . unary_expression
    (113) unit_expression -> . identifier
    (114) unit_expression -> . constant
    (115) unit_expression -> . multiple_string
    (116) unit_expression -> . ( expression )
    (44) identifier -> . ID
    (45) identifier -> . inlinefunc
    (87) constant -> . INTEGER_CONST
    (88) constant -> . CHAR_CONST
    (89) constant -> . FLOAT_CONST
    (90) constant -> . BOOL_CONST
    (153) multiple_string -> . STRING_CONST
    (154) multiple_string -> . multiple_string STRING_CONST
    (46) inlinefunc -> . SIZEOF

    {               shift and go to state 61
    IF              shift and go to state 121
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    CONTINUE        shift and go to state 127
    RETURN          shift and go to state 128
    ;               reduce using rule 16 (empty -> .)
    &               shift and go to state 76
    *               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    ~               shift and go to state 81
    !               shift and go to state 82
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 84
    (               shift and go to state 79
    ID              shift and go to state 37
    INTEGER_CONST   shift and go to state 87
    CHAR_CONST      shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    BOOL_CONST      shift and go to state 90
    STRING_CONST    shift and go to state 91
    SIZEOF          shift and go to state 39

    expression                     shift and go to state 122
    expression_orempty             shift and go to state 123
    statement                      shift and go to state 273
    funcbody_statement             shift and go to state 116
    branch_statement               shift and go to state 117
    expression_statement           shift and go to state 118
    loop_statement                 shift and go to state 119
    back_statement                 shift and go to state 120
    empty                          shift and go to state 186
    assignable_expression          shift and go to state 129
    conditional_expression         shift and go to state 65
    unary_expression               shift and go to state 66
    binary_expression              shift and go to state 67
    ternary_expression             shift and go to state 68
    uscd_expression                shift and go to state 69
    unary_operator                 shift and go to state 70
    cast_expression                shift and go to state 71
    self_incdec                    shift and go to state 72
    unit_expression                shift and go to state 78
    identifier                     shift and go to state 80
    constant                       shift and go to state 85
    multiple_string                shift and go to state 86
    inlinefunc                     shift and go to state 38

state 273

    (123) loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .

    COMMENT1        reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    COMMENT2        reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    {               reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    IF              reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    WHILE           reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    FOR             reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    BREAK           reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    CONTINUE        reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    RETURN          reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    INT             reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    SHORT           reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    LONG            reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    CHAR            reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    VOID            reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    FLOAT           reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    DOUBLE          reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    BOOL            reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    SIGNED          reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    UNSIGNED        reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    STRUCT          reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    &               reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    *               reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    +               reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    -               reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    ~               reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    !               reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    INC_OP          reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    DEC_OP          reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    (               reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    ID              reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    INTEGER_CONST   reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    CHAR_CONST      reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    FLOAT_CONST     reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    BOOL_CONST      reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    STRING_CONST    reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    SIZEOF          reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    ;               reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    }               reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)
    ELSE            reduce using rule 123 (loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INC_OP in state 167 resolved as shift
WARNING: shift/reduce conflict for DEC_OP in state 167 resolved as shift
WARNING: shift/reduce conflict for INC_OP in state 170 resolved as shift
WARNING: shift/reduce conflict for DEC_OP in state 170 resolved as shift
WARNING: shift/reduce conflict for * in state 198 resolved as shift
WARNING: shift/reduce conflict for / in state 198 resolved as shift
WARNING: shift/reduce conflict for % in state 198 resolved as shift
WARNING: shift/reduce conflict for + in state 198 resolved as shift
WARNING: shift/reduce conflict for - in state 198 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 198 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 198 resolved as shift
WARNING: shift/reduce conflict for < in state 198 resolved as shift
WARNING: shift/reduce conflict for LTE in state 198 resolved as shift
WARNING: shift/reduce conflict for GTE in state 198 resolved as shift
WARNING: shift/reduce conflict for > in state 198 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 198 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 198 resolved as shift
WARNING: shift/reduce conflict for & in state 198 resolved as shift
WARNING: shift/reduce conflict for | in state 198 resolved as shift
WARNING: shift/reduce conflict for ^ in state 198 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 198 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 198 resolved as shift
WARNING: shift/reduce conflict for * in state 200 resolved as shift
WARNING: shift/reduce conflict for / in state 200 resolved as shift
WARNING: shift/reduce conflict for % in state 200 resolved as shift
WARNING: shift/reduce conflict for + in state 200 resolved as shift
WARNING: shift/reduce conflict for - in state 200 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 200 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 200 resolved as shift
WARNING: shift/reduce conflict for < in state 200 resolved as shift
WARNING: shift/reduce conflict for LTE in state 200 resolved as shift
WARNING: shift/reduce conflict for GTE in state 200 resolved as shift
WARNING: shift/reduce conflict for > in state 200 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 200 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 200 resolved as shift
WARNING: shift/reduce conflict for & in state 200 resolved as shift
WARNING: shift/reduce conflict for | in state 200 resolved as shift
WARNING: shift/reduce conflict for ^ in state 200 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 200 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 200 resolved as shift
WARNING: shift/reduce conflict for * in state 201 resolved as shift
WARNING: shift/reduce conflict for / in state 201 resolved as shift
WARNING: shift/reduce conflict for % in state 201 resolved as shift
WARNING: shift/reduce conflict for + in state 201 resolved as shift
WARNING: shift/reduce conflict for - in state 201 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 201 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 201 resolved as shift
WARNING: shift/reduce conflict for < in state 201 resolved as shift
WARNING: shift/reduce conflict for LTE in state 201 resolved as shift
WARNING: shift/reduce conflict for GTE in state 201 resolved as shift
WARNING: shift/reduce conflict for > in state 201 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 201 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 201 resolved as shift
WARNING: shift/reduce conflict for & in state 201 resolved as shift
WARNING: shift/reduce conflict for | in state 201 resolved as shift
WARNING: shift/reduce conflict for ^ in state 201 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 201 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 201 resolved as shift
WARNING: shift/reduce conflict for * in state 202 resolved as shift
WARNING: shift/reduce conflict for / in state 202 resolved as shift
WARNING: shift/reduce conflict for % in state 202 resolved as shift
WARNING: shift/reduce conflict for + in state 202 resolved as shift
WARNING: shift/reduce conflict for - in state 202 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 202 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 202 resolved as shift
WARNING: shift/reduce conflict for < in state 202 resolved as shift
WARNING: shift/reduce conflict for LTE in state 202 resolved as shift
WARNING: shift/reduce conflict for GTE in state 202 resolved as shift
WARNING: shift/reduce conflict for > in state 202 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 202 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 202 resolved as shift
WARNING: shift/reduce conflict for & in state 202 resolved as shift
WARNING: shift/reduce conflict for | in state 202 resolved as shift
WARNING: shift/reduce conflict for ^ in state 202 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 202 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 202 resolved as shift
WARNING: shift/reduce conflict for * in state 203 resolved as shift
WARNING: shift/reduce conflict for / in state 203 resolved as shift
WARNING: shift/reduce conflict for % in state 203 resolved as shift
WARNING: shift/reduce conflict for + in state 203 resolved as shift
WARNING: shift/reduce conflict for - in state 203 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 203 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 203 resolved as shift
WARNING: shift/reduce conflict for < in state 203 resolved as shift
WARNING: shift/reduce conflict for LTE in state 203 resolved as shift
WARNING: shift/reduce conflict for GTE in state 203 resolved as shift
WARNING: shift/reduce conflict for > in state 203 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 203 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 203 resolved as shift
WARNING: shift/reduce conflict for & in state 203 resolved as shift
WARNING: shift/reduce conflict for | in state 203 resolved as shift
WARNING: shift/reduce conflict for ^ in state 203 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 203 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 203 resolved as shift
WARNING: shift/reduce conflict for * in state 204 resolved as shift
WARNING: shift/reduce conflict for / in state 204 resolved as shift
WARNING: shift/reduce conflict for % in state 204 resolved as shift
WARNING: shift/reduce conflict for + in state 204 resolved as shift
WARNING: shift/reduce conflict for - in state 204 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 204 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 204 resolved as shift
WARNING: shift/reduce conflict for < in state 204 resolved as shift
WARNING: shift/reduce conflict for LTE in state 204 resolved as shift
WARNING: shift/reduce conflict for GTE in state 204 resolved as shift
WARNING: shift/reduce conflict for > in state 204 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 204 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 204 resolved as shift
WARNING: shift/reduce conflict for & in state 204 resolved as shift
WARNING: shift/reduce conflict for | in state 204 resolved as shift
WARNING: shift/reduce conflict for ^ in state 204 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 204 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 204 resolved as shift
WARNING: shift/reduce conflict for * in state 205 resolved as shift
WARNING: shift/reduce conflict for / in state 205 resolved as shift
WARNING: shift/reduce conflict for % in state 205 resolved as shift
WARNING: shift/reduce conflict for + in state 205 resolved as shift
WARNING: shift/reduce conflict for - in state 205 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 205 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 205 resolved as shift
WARNING: shift/reduce conflict for < in state 205 resolved as shift
WARNING: shift/reduce conflict for LTE in state 205 resolved as shift
WARNING: shift/reduce conflict for GTE in state 205 resolved as shift
WARNING: shift/reduce conflict for > in state 205 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 205 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 205 resolved as shift
WARNING: shift/reduce conflict for & in state 205 resolved as shift
WARNING: shift/reduce conflict for | in state 205 resolved as shift
WARNING: shift/reduce conflict for ^ in state 205 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 205 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 205 resolved as shift
WARNING: shift/reduce conflict for * in state 206 resolved as shift
WARNING: shift/reduce conflict for / in state 206 resolved as shift
WARNING: shift/reduce conflict for % in state 206 resolved as shift
WARNING: shift/reduce conflict for + in state 206 resolved as shift
WARNING: shift/reduce conflict for - in state 206 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 206 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 206 resolved as shift
WARNING: shift/reduce conflict for < in state 206 resolved as shift
WARNING: shift/reduce conflict for LTE in state 206 resolved as shift
WARNING: shift/reduce conflict for GTE in state 206 resolved as shift
WARNING: shift/reduce conflict for > in state 206 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 206 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 206 resolved as shift
WARNING: shift/reduce conflict for & in state 206 resolved as shift
WARNING: shift/reduce conflict for | in state 206 resolved as shift
WARNING: shift/reduce conflict for ^ in state 206 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 206 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 206 resolved as shift
WARNING: shift/reduce conflict for * in state 207 resolved as shift
WARNING: shift/reduce conflict for / in state 207 resolved as shift
WARNING: shift/reduce conflict for % in state 207 resolved as shift
WARNING: shift/reduce conflict for + in state 207 resolved as shift
WARNING: shift/reduce conflict for - in state 207 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 207 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 207 resolved as shift
WARNING: shift/reduce conflict for < in state 207 resolved as shift
WARNING: shift/reduce conflict for LTE in state 207 resolved as shift
WARNING: shift/reduce conflict for GTE in state 207 resolved as shift
WARNING: shift/reduce conflict for > in state 207 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 207 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 207 resolved as shift
WARNING: shift/reduce conflict for & in state 207 resolved as shift
WARNING: shift/reduce conflict for | in state 207 resolved as shift
WARNING: shift/reduce conflict for ^ in state 207 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 207 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 207 resolved as shift
WARNING: shift/reduce conflict for * in state 208 resolved as shift
WARNING: shift/reduce conflict for / in state 208 resolved as shift
WARNING: shift/reduce conflict for % in state 208 resolved as shift
WARNING: shift/reduce conflict for + in state 208 resolved as shift
WARNING: shift/reduce conflict for - in state 208 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 208 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 208 resolved as shift
WARNING: shift/reduce conflict for < in state 208 resolved as shift
WARNING: shift/reduce conflict for LTE in state 208 resolved as shift
WARNING: shift/reduce conflict for GTE in state 208 resolved as shift
WARNING: shift/reduce conflict for > in state 208 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 208 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 208 resolved as shift
WARNING: shift/reduce conflict for & in state 208 resolved as shift
WARNING: shift/reduce conflict for | in state 208 resolved as shift
WARNING: shift/reduce conflict for ^ in state 208 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 208 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 208 resolved as shift
WARNING: shift/reduce conflict for * in state 209 resolved as shift
WARNING: shift/reduce conflict for / in state 209 resolved as shift
WARNING: shift/reduce conflict for % in state 209 resolved as shift
WARNING: shift/reduce conflict for + in state 209 resolved as shift
WARNING: shift/reduce conflict for - in state 209 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 209 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 209 resolved as shift
WARNING: shift/reduce conflict for < in state 209 resolved as shift
WARNING: shift/reduce conflict for LTE in state 209 resolved as shift
WARNING: shift/reduce conflict for GTE in state 209 resolved as shift
WARNING: shift/reduce conflict for > in state 209 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 209 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 209 resolved as shift
WARNING: shift/reduce conflict for & in state 209 resolved as shift
WARNING: shift/reduce conflict for | in state 209 resolved as shift
WARNING: shift/reduce conflict for ^ in state 209 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 209 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 209 resolved as shift
WARNING: shift/reduce conflict for * in state 210 resolved as shift
WARNING: shift/reduce conflict for / in state 210 resolved as shift
WARNING: shift/reduce conflict for % in state 210 resolved as shift
WARNING: shift/reduce conflict for + in state 210 resolved as shift
WARNING: shift/reduce conflict for - in state 210 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 210 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 210 resolved as shift
WARNING: shift/reduce conflict for < in state 210 resolved as shift
WARNING: shift/reduce conflict for LTE in state 210 resolved as shift
WARNING: shift/reduce conflict for GTE in state 210 resolved as shift
WARNING: shift/reduce conflict for > in state 210 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 210 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 210 resolved as shift
WARNING: shift/reduce conflict for & in state 210 resolved as shift
WARNING: shift/reduce conflict for | in state 210 resolved as shift
WARNING: shift/reduce conflict for ^ in state 210 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 210 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 210 resolved as shift
WARNING: shift/reduce conflict for * in state 211 resolved as shift
WARNING: shift/reduce conflict for / in state 211 resolved as shift
WARNING: shift/reduce conflict for % in state 211 resolved as shift
WARNING: shift/reduce conflict for + in state 211 resolved as shift
WARNING: shift/reduce conflict for - in state 211 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 211 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 211 resolved as shift
WARNING: shift/reduce conflict for < in state 211 resolved as shift
WARNING: shift/reduce conflict for LTE in state 211 resolved as shift
WARNING: shift/reduce conflict for GTE in state 211 resolved as shift
WARNING: shift/reduce conflict for > in state 211 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 211 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 211 resolved as shift
WARNING: shift/reduce conflict for & in state 211 resolved as shift
WARNING: shift/reduce conflict for | in state 211 resolved as shift
WARNING: shift/reduce conflict for ^ in state 211 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 211 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 211 resolved as shift
WARNING: shift/reduce conflict for * in state 212 resolved as shift
WARNING: shift/reduce conflict for / in state 212 resolved as shift
WARNING: shift/reduce conflict for % in state 212 resolved as shift
WARNING: shift/reduce conflict for + in state 212 resolved as shift
WARNING: shift/reduce conflict for - in state 212 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 212 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 212 resolved as shift
WARNING: shift/reduce conflict for < in state 212 resolved as shift
WARNING: shift/reduce conflict for LTE in state 212 resolved as shift
WARNING: shift/reduce conflict for GTE in state 212 resolved as shift
WARNING: shift/reduce conflict for > in state 212 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 212 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 212 resolved as shift
WARNING: shift/reduce conflict for & in state 212 resolved as shift
WARNING: shift/reduce conflict for | in state 212 resolved as shift
WARNING: shift/reduce conflict for ^ in state 212 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 212 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 212 resolved as shift
WARNING: shift/reduce conflict for * in state 213 resolved as shift
WARNING: shift/reduce conflict for / in state 213 resolved as shift
WARNING: shift/reduce conflict for % in state 213 resolved as shift
WARNING: shift/reduce conflict for + in state 213 resolved as shift
WARNING: shift/reduce conflict for - in state 213 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 213 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 213 resolved as shift
WARNING: shift/reduce conflict for < in state 213 resolved as shift
WARNING: shift/reduce conflict for LTE in state 213 resolved as shift
WARNING: shift/reduce conflict for GTE in state 213 resolved as shift
WARNING: shift/reduce conflict for > in state 213 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 213 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 213 resolved as shift
WARNING: shift/reduce conflict for & in state 213 resolved as shift
WARNING: shift/reduce conflict for | in state 213 resolved as shift
WARNING: shift/reduce conflict for ^ in state 213 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 213 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 213 resolved as shift
WARNING: shift/reduce conflict for * in state 214 resolved as shift
WARNING: shift/reduce conflict for / in state 214 resolved as shift
WARNING: shift/reduce conflict for % in state 214 resolved as shift
WARNING: shift/reduce conflict for + in state 214 resolved as shift
WARNING: shift/reduce conflict for - in state 214 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 214 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 214 resolved as shift
WARNING: shift/reduce conflict for < in state 214 resolved as shift
WARNING: shift/reduce conflict for LTE in state 214 resolved as shift
WARNING: shift/reduce conflict for GTE in state 214 resolved as shift
WARNING: shift/reduce conflict for > in state 214 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 214 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 214 resolved as shift
WARNING: shift/reduce conflict for & in state 214 resolved as shift
WARNING: shift/reduce conflict for | in state 214 resolved as shift
WARNING: shift/reduce conflict for ^ in state 214 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 214 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 214 resolved as shift
WARNING: shift/reduce conflict for * in state 215 resolved as shift
WARNING: shift/reduce conflict for / in state 215 resolved as shift
WARNING: shift/reduce conflict for % in state 215 resolved as shift
WARNING: shift/reduce conflict for + in state 215 resolved as shift
WARNING: shift/reduce conflict for - in state 215 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 215 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 215 resolved as shift
WARNING: shift/reduce conflict for < in state 215 resolved as shift
WARNING: shift/reduce conflict for LTE in state 215 resolved as shift
WARNING: shift/reduce conflict for GTE in state 215 resolved as shift
WARNING: shift/reduce conflict for > in state 215 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 215 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 215 resolved as shift
WARNING: shift/reduce conflict for & in state 215 resolved as shift
WARNING: shift/reduce conflict for | in state 215 resolved as shift
WARNING: shift/reduce conflict for ^ in state 215 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 215 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 215 resolved as shift
WARNING: shift/reduce conflict for * in state 216 resolved as shift
WARNING: shift/reduce conflict for / in state 216 resolved as shift
WARNING: shift/reduce conflict for % in state 216 resolved as shift
WARNING: shift/reduce conflict for + in state 216 resolved as shift
WARNING: shift/reduce conflict for - in state 216 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 216 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 216 resolved as shift
WARNING: shift/reduce conflict for < in state 216 resolved as shift
WARNING: shift/reduce conflict for LTE in state 216 resolved as shift
WARNING: shift/reduce conflict for GTE in state 216 resolved as shift
WARNING: shift/reduce conflict for > in state 216 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 216 resolved as shift
WARNING: shift/reduce conflict for NEQ_OP in state 216 resolved as shift
WARNING: shift/reduce conflict for & in state 216 resolved as shift
WARNING: shift/reduce conflict for | in state 216 resolved as shift
WARNING: shift/reduce conflict for ^ in state 216 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 216 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 216 resolved as shift
WARNING: shift/reduce conflict for , in state 247 resolved as shift
WARNING: shift/reduce conflict for ? in state 247 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 248 resolved as shift
WARNING: reduce/reduce conflict in state 63 resolved using rule (initializer -> assignable_expression)
WARNING: rejected rule (expression -> assignable_expression) in state 63
WARNING: reduce/reduce conflict in state 197 resolved using rule (assignable_expression -> unary_expression assign_operator assignable_expression)
WARNING: rejected rule (expression -> assignable_expression) in state 197
WARNING: reduce/reduce conflict in state 220 resolved using rule (arg_value_exp_list -> assignable_expression)
WARNING: rejected rule (expression -> assignable_expression) in state 220
WARNING: reduce/reduce conflict in state 223 resolved using rule (expression -> assignable_expression)
WARNING: rejected rule (expression -> expression , assignable_expression) in state 223
WARNING: reduce/reduce conflict in state 246 resolved using rule (arg_value_exp_list -> arg_value_exp_list , assignable_expression)
WARNING: rejected rule (expression -> assignable_expression) in state 246
