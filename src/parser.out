Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    PRIVATE
    PROTECTED
    PUBLIC
    REINTERPRET_CAST
    STATIC_CAST
    TEMPLATE
    THIS
    THROW
    TRY
    TYPEID
    TYPENAME
    USING

Grammar

Rule 0     S' -> start
Rule 1     start -> part
Rule 2     start -> empty
Rule 3     part -> part declorcom
Rule 4     part -> declorcom
Rule 5     declorcom -> comment
Rule 6     declorcom -> external_declaration
Rule 7     initializer -> assignable_expression
Rule 8     initializer -> { initializer_list_orempty }
Rule 9     initializer -> { initializer_list , }
Rule 10    initializer_list -> initializer
Rule 11    initializer_list -> initializer_list , initializer
Rule 12    variable_initable -> variable
Rule 13    variable_initable -> variable = initializer
Rule 14    variable_initable_list -> variable_initable
Rule 15    variable_initable_list -> variable_initable_list , variable_initable
Rule 16    empty -> <empty>
Rule 17    type -> type_specifier_can_unsigned
Rule 18    type -> type_specifier_cannot_unsigned
Rule 19    type -> uorus
Rule 20    type -> uorus type_specifier_can_unsigned
Rule 21    type_specifier -> type_specifier_cannot_unsigned
Rule 22    type_specifier -> type_specifier_can_unsigned
Rule 23    type_specifier -> uorus
Rule 24    type_specifier_cannot_unsigned -> VOID
Rule 25    type_specifier_cannot_unsigned -> FLOAT
Rule 26    type_specifier_cannot_unsigned -> DOUBLE
Rule 27    type_specifier_cannot_unsigned -> BOOL
Rule 28    type_specifier_cannot_unsigned -> struct_specifier
Rule 29    type_specifier_can_unsigned -> INT
Rule 30    type_specifier_can_unsigned -> SHORT
Rule 31    type_specifier_can_unsigned -> LONG
Rule 32    type_specifier_can_unsigned -> CHAR
Rule 33    uorus -> SIGNED
Rule 34    uorus -> UNSIGNED
Rule 35    declaration_list_orempty -> empty
Rule 36    declaration_list_orempty -> declaration_list
Rule 37    declaration -> type variable_initable_list_orempty ;
Rule 38    declaration_list -> declaration
Rule 39    declaration_list -> declaration_list declaration
Rule 40    identifier_list_orempty -> empty
Rule 41    identifier_list_orempty -> identifier_list
Rule 42    identifier_list -> identifier
Rule 43    identifier_list -> identifier_list , identifier
Rule 44    identifier -> ID
Rule 45    identifier -> inlinefunc
Rule 46    inlinefunc -> SIZEOF
Rule 47    back_statement -> BREAK ;
Rule 48    back_statement -> CONTINUE ;
Rule 49    back_statement -> RETURN ;
Rule 50    back_statement -> RETURN expression ;
Rule 51    assignable_expression_orempty -> empty
Rule 52    assignable_expression_orempty -> assignable_expression
Rule 53    variable_initable_list_orempty -> empty
Rule 54    variable_initable_list_orempty -> variable_initable_list
Rule 55    assign_operator -> =
Rule 56    assign_operator -> MUL_ASG
Rule 57    assign_operator -> DIV_ASG
Rule 58    assign_operator -> MOD_ASG
Rule 59    assign_operator -> ADD_ASG
Rule 60    assign_operator -> SUB_ASG
Rule 61    assign_operator -> LEFT_ASG
Rule 62    assign_operator -> RIGHT_ASG
Rule 63    assign_operator -> AND_ASG
Rule 64    assign_operator -> XOR_ASG
Rule 65    assign_operator -> OR_ASG
Rule 66    arg_value_exp_list -> assignable_expression
Rule 67    arg_value_exp_list -> arg_value_exp_list , assignable_expression
Rule 68    assignable_expression -> conditional_expression
Rule 69    assignable_expression -> unary_expression assign_operator assignable_expression
Rule 70    block_item_list_orempty -> empty
Rule 71    block_item_list_orempty -> block_item_list
Rule 72    constant_expression_orempty -> empty
Rule 73    constant_expression_orempty -> constant_expression
Rule 74    specifier_qualifier_list_orempty -> empty
Rule 75    specifier_qualifier_list_orempty -> specifier_qualifier_list
Rule 76    block_item -> declaration
Rule 77    block_item -> statement
Rule 78    block_item -> comment
Rule 79    block_item_list -> block_item
Rule 80    block_item_list -> block_item_list block_item
Rule 81    expression_orempty -> empty
Rule 82    expression_orempty -> expression
Rule 83    funcbody_statement -> { block_item_list_orempty }
Rule 84    conditional_expression -> binary_expression
Rule 85    conditional_expression -> ternary_expression
Rule 86    constant -> INTEGER_CONST
Rule 87    constant -> CHAR_CONST
Rule 88    constant -> FLOAT_CONST
Rule 89    constant -> BOOL_CONST
Rule 90    constant_expression -> conditional_expression
Rule 91    variable -> direct_variable
Rule 92    variable -> pointer direct_variable
Rule 93    specifier_qualifier_list -> type specifier_qualifier_list_orempty
Rule 94    direct_variable -> identifier
Rule 95    direct_variable -> direct_variable [ assignable_expression_orempty ]
Rule 96    direct_variable -> direct_variable ( parameter_list )
Rule 97    direct_variable -> direct_variable ( identifier_list_orempty )
Rule 98    external_declaration -> function_definition
Rule 99    external_declaration -> declaration
Rule 100   expression -> assignable_expression
Rule 101   expression -> expression , assignable_expression
Rule 102   expression_statement -> expression_orempty ;
Rule 103   function_definition -> type variable declaration_list_orempty funcbody_statement
Rule 104   parameter_list -> parameter_declaration
Rule 105   parameter_list -> parameter_list , parameter_declaration
Rule 106   parameter_declaration -> type variable
Rule 107   uscd_expression -> unit_expression
Rule 108   uscd_expression -> uscd_expression [ expression ]
Rule 109   uscd_expression -> uscd_expression ( arg_value_exp_list )
Rule 110   uscd_expression -> uscd_expression ( )
Rule 111   uscd_expression -> uscd_expression PTR_OP identifier
Rule 112   unit_expression -> identifier
Rule 113   unit_expression -> constant
Rule 114   unit_expression -> multiple_string
Rule 115   unit_expression -> ( expression )
Rule 116   branch_statement -> IF ( expression ) statement
Rule 117   branch_statement -> IF ( expression ) statement ELSE statement
Rule 118   loop_statement -> WHILE ( expression ) statement
Rule 119   loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement
Rule 120   loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement
Rule 121   loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement
Rule 122   loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement
Rule 123   statement -> funcbody_statement
Rule 124   statement -> branch_statement
Rule 125   statement -> expression_statement
Rule 126   statement -> loop_statement
Rule 127   statement -> back_statement
Rule 128   struct_specifier -> STRUCT identifier
Rule 129   struct_specifier -> STRUCT { struct_declaration_list }
Rule 130   initializer_list_orempty -> empty
Rule 131   initializer_list_orempty -> initializer_list
Rule 132   struct_specifier -> STRUCT identifier { struct_declaration_list }
Rule 133   struct_declaration_list -> struct_declaration
Rule 134   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 135   struct_declaration -> type struct_variable_list ;
Rule 136   struct_variable_list -> variable
Rule 137   struct_variable_list -> struct_variable_list , variable
Rule 138   pointer -> *
Rule 139   pointer -> * pointer
Rule 140   unary_operator -> &
Rule 141   unary_operator -> *
Rule 142   unary_operator -> +
Rule 143   unary_operator -> -
Rule 144   unary_operator -> ~
Rule 145   unary_operator -> !
Rule 146   self_incdec -> INC_OP
Rule 147   self_incdec -> DEC_OP
Rule 148   unary_expression -> uscd_expression
Rule 149   unary_expression -> unary_operator cast_expression
Rule 150   unary_expression -> self_incdec cast_expression
Rule 151   unary_expression -> cast_expression self_incdec
Rule 152   multiple_string -> STRING_CONST
Rule 153   multiple_string -> multiple_string STRING_CONST
Rule 154   binary_expression -> cast_expression
Rule 155   binary_expression -> binary_expression * binary_expression
Rule 156   binary_expression -> binary_expression / binary_expression
Rule 157   binary_expression -> binary_expression % binary_expression
Rule 158   binary_expression -> binary_expression + binary_expression
Rule 159   binary_expression -> binary_expression - binary_expression
Rule 160   binary_expression -> binary_expression RIGHT_OP binary_expression
Rule 161   binary_expression -> binary_expression LEFT_OP binary_expression
Rule 162   binary_expression -> binary_expression < binary_expression
Rule 163   binary_expression -> binary_expression LTE binary_expression
Rule 164   binary_expression -> binary_expression GTE binary_expression
Rule 165   binary_expression -> binary_expression > binary_expression
Rule 166   binary_expression -> binary_expression EQ_OP binary_expression
Rule 167   binary_expression -> binary_expression NEQ_OP binary_expression
Rule 168   binary_expression -> binary_expression & binary_expression
Rule 169   binary_expression -> binary_expression | binary_expression
Rule 170   binary_expression -> binary_expression ^ binary_expression
Rule 171   binary_expression -> binary_expression AND_OP binary_expression
Rule 172   binary_expression -> binary_expression OR_OP binary_expression
Rule 173   cast_expression -> unary_expression
Rule 174   comment -> COMMENT1
Rule 175   comment -> COMMENT2
Rule 176   cpp_advanced -> ASM
Rule 177   cpp_advanced -> BUILT_IN_FUNCTION
Rule 178   cpp_advanced -> CATCH
Rule 179   cpp_advanced -> CLASS
Rule 180   cpp_advanced -> COMMENT2
Rule 181   cpp_advanced -> CONST_CAST
Rule 182   cpp_advanced -> DELETE
Rule 183   cpp_advanced -> DYNAMIC_CAST
Rule 184   cpp_advanced -> EXPLICIT
Rule 185   cpp_advanced -> EXPORT
Rule 186   cpp_advanced -> FRIEND
Rule 187   cpp_advanced -> MUTABLE
Rule 188   cpp_advanced -> NAMESPACE
Rule 189   cpp_advanced -> NEW
Rule 190   cpp_advanced -> OPERATOR
Rule 191   cpp_advanced -> VIRTUAL
Rule 192   cpp_advanced -> AUTO
Rule 193   cpp_advanced -> CONST
Rule 194   cpp_advanced -> DO
Rule 195   cpp_advanced -> ENUM
Rule 196   cpp_advanced -> EXTERN
Rule 197   cpp_advanced -> FOR
Rule 198   cpp_advanced -> STATIC
Rule 199   cpp_advanced -> UNION
Rule 200   cpp_advanced -> VOLATILE
Rule 201   cpp_advanced -> RESTRICT
Rule 202   cpp_advanced -> REGISTER
Rule 203   cpp_advanced -> INLINE
Rule 204   cpp_advanced -> GOTO
Rule 205   cpp_advanced -> TYPEDEF
Rule 206   cpp_advanced -> SWITCH
Rule 207   cpp_advanced -> CASE
Rule 208   cpp_advanced -> INC_OP
Rule 209   cpp_advanced -> DEC_OP
Rule 210   cpp_advanced -> DEFAULT

Terminals, with rules where they appear

!                    : 145
%                    : 157
&                    : 140 168
(                    : 96 97 109 110 115 116 117 118 119 120 121 122
)                    : 96 97 109 110 115 116 117 118 119 120 121 122
*                    : 138 139 141 155
+                    : 142 158
,                    : 9 11 15 43 67 101 105 137
-                    : 143 159
/                    : 156
;                    : 37 47 48 49 50 102 119 119 120 120 121 121 122 122 135
<                    : 162
=                    : 13 55 122
>                    : 165
ADD_ASG              : 59
AND_ASG              : 63
AND_OP               : 171
ASM                  : 176
AUTO                 : 192
BOOL                 : 27
BOOL_CONST           : 89
BREAK                : 47
BUILT_IN_FUNCTION    : 177
CASE                 : 207
CATCH                : 178
CHAR                 : 32
CHAR_CONST           : 87
CLASS                : 179
COMMENT1             : 174
COMMENT2             : 175 180
CONST                : 193
CONST_CAST           : 181
CONTINUE             : 48
DEC_OP               : 147 209
DEFAULT              : 210
DELETE               : 182
DIV_ASG              : 57
DO                   : 194
DOUBLE               : 26
DYNAMIC_CAST         : 183
ELSE                 : 117
ENUM                 : 195
EQ_OP                : 166
EXPLICIT             : 184
EXPORT               : 185
EXTERN               : 196
FLOAT                : 25
FLOAT_CONST          : 88
FOR                  : 119 120 121 122 197
FRIEND               : 186
GOTO                 : 204
GTE                  : 164
ID                   : 44
IF                   : 116 117
INC_OP               : 146 208
INLINE               : 203
INT                  : 29
INTEGER_CONST        : 86
LEFT_ASG             : 61
LEFT_OP              : 161
LONG                 : 31
LTE                  : 163
MOD_ASG              : 58
MUL_ASG              : 56
MUTABLE              : 187
NAMESPACE            : 188
NEQ_OP               : 167
NEW                  : 189
OPERATOR             : 190
OR_ASG               : 65
OR_OP                : 172
PRIVATE              : 
PROTECTED            : 
PTR_OP               : 111
PUBLIC               : 
REGISTER             : 202
REINTERPRET_CAST     : 
RESTRICT             : 201
RETURN               : 49 50
RIGHT_ASG            : 62
RIGHT_OP             : 160
SHORT                : 30
SIGNED               : 33
SIZEOF               : 46
STATIC               : 198
STATIC_CAST          : 
STRING_CONST         : 152 153
STRUCT               : 128 129 132
SUB_ASG              : 60
SWITCH               : 206
TEMPLATE             : 
THIS                 : 
THROW                : 
TRY                  : 
TYPEDEF              : 205
TYPEID               : 
TYPENAME             : 
UNION                : 199
UNSIGNED             : 34
USING                : 
VIRTUAL              : 191
VOID                 : 24
VOLATILE             : 200
WHILE                : 118
XOR_ASG              : 64
[                    : 95 108
]                    : 95 108
^                    : 170
error                : 
{                    : 8 9 83 129 132
|                    : 169
}                    : 8 9 83 129 132
~                    : 144

Nonterminals, with rules where they appear

arg_value_exp_list   : 67 109
assign_operator      : 69
assignable_expression : 7 52 66 67 69 100 101
assignable_expression_orempty : 95
back_statement       : 127
binary_expression    : 84 155 155 156 156 157 157 158 158 159 159 160 160 161 161 162 162 163 163 164 164 165 165 166 166 167 167 168 168 169 169 170 170 171 171 172 172
block_item           : 79 80
block_item_list      : 71 80
block_item_list_orempty : 83
branch_statement     : 124
cast_expression      : 149 150 151 154
comment              : 5 78
conditional_expression : 68 90
constant             : 113
constant_expression  : 73
constant_expression_orempty : 
cpp_advanced         : 
declaration          : 38 39 76 99
declaration_list     : 36 39
declaration_list_orempty : 103
declorcom            : 3 4
direct_variable      : 91 92 95 96 97
empty                : 2 35 40 51 53 70 72 74 81 121 130
expression           : 50 82 101 108 115 116 117 118 120 122
expression_orempty   : 102 119 119 120 120 121 121 122 122
expression_statement : 125
external_declaration : 6
funcbody_statement   : 103 123
function_definition  : 98
identifier           : 42 43 94 111 112 128 132
identifier_list      : 41 43
identifier_list_orempty : 97
initializer          : 10 11 13
initializer_list     : 9 11 131
initializer_list_orempty : 8
inlinefunc           : 45
loop_statement       : 126
multiple_string      : 114 153
parameter_declaration : 104 105 119 122
parameter_list       : 96 105
part                 : 1 3
pointer              : 92 139
self_incdec          : 150 151
specifier_qualifier_list : 75
specifier_qualifier_list_orempty : 93
start                : 0
statement            : 77 116 117 117 118 119 120 121 122
struct_declaration   : 133 134
struct_declaration_list : 129 132 134
struct_specifier     : 28
struct_variable_list : 135 137
ternary_expression   : 85
type                 : 37 93 103 106 135
type_specifier       : 
type_specifier_can_unsigned : 17 20 22
type_specifier_cannot_unsigned : 18 21
unary_expression     : 69 173
unary_operator       : 149
unit_expression      : 107
uorus                : 19 20 23
uscd_expression      : 108 109 110 111 148
variable             : 12 13 103 106 136 137
variable_initable    : 14 15
variable_initable_list : 15 54
variable_initable_list_orempty : 37

