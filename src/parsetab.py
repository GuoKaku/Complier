
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ADD_ASG AND_ASG AND_OP ASM AUTO BOOL BOOL_CONST BREAK BUILT_IN_FUNCTION CASE CATCH CHAR CHAR_CONST CLASS COMMENT1 COMMENT2 CONST CONST_CAST CONTINUE DEC_OP DEFAULT DELETE DIV_ASG DO DOUBLE DYNAMIC_CAST ELSE ENUM EQ_OP EXPLICIT EXPORT EXTERN FLOAT FLOAT_CONST FOR FRIEND GOTO GTE ID IF INC_OP INLINE INT INTEGER_CONST LEFT_ASG LEFT_OP LONG LTE MOD_ASG MUL_ASG MUTABLE NAMESPACE NEQ_OP NEW OPERATOR OR_ASG OR_OP PRIVATE PROTECTED PTR_OP PUBLIC REGISTER REINTERPRET_CAST RESTRICT RETURN RIGHT_ASG RIGHT_OP SHORT SIGNED SIZEOF STATIC STATIC_CAST STRING_CONST STRUCT SUB_ASG SWITCH TEMPLATE THIS THROW TRY TYPEDEF TYPEID TYPENAME UNION UNSIGNED USING VIRTUAL VOID VOLATILE WHILE XOR_ASG start   : part\n                | empty\n     part    : part declorcom\n                | declorcom\n     declorcom   : comment\n     declorcom   : external_declaration\n     initializer : assignable_expression\n     initializer : '{' initializer_list_orempty '}'\n                    | '{' initializer_list ',' '}'\n     initializer_list    : initializer\n                            | initializer_list ',' initializer\n     variable_initable : variable\n                        | variable '=' initializer\n     variable_initable_list    : variable_initable\n                                | variable_initable_list ',' variable_initable\n     empty :\n     type  : type_specifier_can_unsigned\n                                | type_specifier_cannot_unsigned \n                                | uorus\n                                | uorus type_specifier_can_unsigned\n    type_specifier : type_specifier_cannot_unsigned\n                        | type_specifier_can_unsigned\n                        | uorus  type_specifier_cannot_unsigned : VOID\n                       | FLOAT\n                       | DOUBLE\n                       | BOOL\n                       | struct_specifier\n     type_specifier_can_unsigned : INT\n                       | SHORT\n                       | LONG\n                       | CHAR\n    uorus   :          SIGNED\n                       | UNSIGNEDdeclaration_list_orempty : empty\n                            | declaration_list\n     declaration : type variable_initable_list_orempty ';'\n     declaration_list    : declaration\n                            | declaration_list declaration\n    identifier_list_orempty  : empty\n                            | identifier_list\n     identifier_list : identifier\n                        | identifier_list ',' identifier\n     identifier  : ID \n                    | inlinefunc  inlinefunc  : SIZEOF back_statement  : BREAK ';'  back_statement  : CONTINUE ';'  back_statement  : RETURN ';'\n                        | RETURN expression ';'\n    assignable_expression_orempty    : empty\n                                    | assignable_expression\n    variable_initable_list_orempty  : empty\n                            | variable_initable_list\n     assign_operator : '='\n                            | MUL_ASG\n                            | DIV_ASG\n                            | MOD_ASG\n                            | ADD_ASG\n                            | SUB_ASG\n                            | LEFT_ASG\n                            | RIGHT_ASG\n                            | AND_ASG\n                            | XOR_ASG\n                            | OR_ASG  arg_value_exp_list    : assignable_expression\n                                    | arg_value_exp_list ',' assignable_expression\n     assignable_expression   : conditional_expression\n                                | unary_expression assign_operator assignable_expression\n    block_item_list_orempty  : empty\n                            | block_item_list\n    constant_expression_orempty  : empty\n                            | constant_expression\n    specifier_qualifier_list_orempty  : empty\n                            | specifier_qualifier_list\n     block_item  : declaration\n                    | statement\n                    | comment\n     block_item_list : block_item\n                        | block_item_list block_item\n    expression_orempty    : empty\n                        | expression\n     funcbody_statement : '{' block_item_list_orempty '}'  conditional_expression  : binary_expression \n                | ternary_expression\n    ternary_expression : expression '?' expression ':' expression\n     constant    : INTEGER_CONST\n     constant    : CHAR_CONST\n     constant    : FLOAT_CONST\n     constant    : BOOL_CONST\n     constant_expression : conditional_expression  variable  : direct_variable\n     variable  : pointer direct_variable\n     specifier_qualifier_list    : type specifier_qualifier_list_orempty\n     direct_variable   : identifier\n     direct_variable   : direct_variable '[' assignable_expression_orempty ']'\n     direct_variable   : direct_variable '(' parameter_list ')'\n                            | direct_variable '(' identifier_list_orempty ')'\n     external_declaration    : function_definition\n     external_declaration    : declaration\n     expression  : assignable_expression\n                    | expression ',' assignable_expression\n     expression_statement : expression_orempty ';'  function_definition : type variable declaration_list_orempty funcbody_statement\n     parameter_list  : parameter_declaration\n                        | parameter_list ',' parameter_declaration\n     parameter_declaration   : type variable\n     uscd_expression : unit_expression  uscd_expression : uscd_expression '[' expression ']'  uscd_expression : uscd_expression '(' arg_value_exp_list ')'\n                            | uscd_expression '(' ')'\n     uscd_expression : uscd_expression PTR_OP identifier\n     unit_expression  : identifier  unit_expression  : constant  unit_expression  : multiple_string\n     unit_expression  : '(' expression ')'  branch_statement : IF '(' expression ')' statement  branch_statement : IF '(' expression ')' statement ELSE statement  loop_statement : WHILE '(' expression ')' statement  loop_statement : FOR '(' parameter_declaration ';' expression_orempty ';' expression_orempty ')'  statement\n                        | FOR '(' expression ';' expression_orempty ';' expression_orempty ')'  statement\n                        | FOR '(' empty ';' expression_orempty ';' expression_orempty ')'  statement\n     loop_statement : FOR '(' parameter_declaration '=' expression ';' expression_orempty ';' expression_orempty ')'  statement\n     statement   : funcbody_statement\n                    | branch_statement\n                    | expression_statement\n                    | loop_statement\n                    | back_statement\n     struct_specifier   : STRUCT identifier\n     struct_specifier : STRUCT '{' struct_declaration_list '}'\n    initializer_list_orempty : empty\n                            | initializer_list\n     struct_specifier   : STRUCT identifier '{' struct_declaration_list '}'\n     struct_declaration_list     : struct_declaration\n                                    | struct_declaration_list struct_declaration\n     struct_declaration : type struct_variable_list ';'\n     struct_variable_list  : variable\n                                | struct_variable_list ',' variable\n     pointer : '*'\n                | '*' pointer\n     unary_operator : '&'\n                       | '*'\n                       | '+'\n                       | '-'\n                       | '~'\n                       | '!' \n                        self_incdec :   INC_OP\n                       | DEC_OP\n     unary_expression    : uscd_expression unary_expression    : unary_operator cast_expression\n                            | self_incdec cast_expression\n     unary_expression    : cast_expression self_incdec \n     multiple_string  : STRING_CONST\n                                | multiple_string STRING_CONST\n     binary_expression   : cast_expression\n                            | binary_expression '*' binary_expression\n                            | binary_expression '/' binary_expression\n                            | binary_expression '%' binary_expression\n                            | binary_expression '+' binary_expression\n                            | binary_expression '-' binary_expression\n                            | binary_expression RIGHT_OP binary_expression\n                            | binary_expression LEFT_OP binary_expression\n                            | binary_expression '<' binary_expression\n                            | binary_expression LTE binary_expression\n                            | binary_expression GTE binary_expression\n                            | binary_expression '>' binary_expression\n                            | binary_expression EQ_OP binary_expression\n                            | binary_expression NEQ_OP binary_expression\n                            | binary_expression '&' binary_expression\n                            | binary_expression '|' binary_expression\n                            | binary_expression '^' binary_expression\n                            | binary_expression AND_OP binary_expression\n                            | binary_expression OR_OP binary_expression\n     cast_expression : unary_expression   \n        comment : COMMENT1\n                | COMMENT2\n     cpp_advanced : ASM\n    | BUILT_IN_FUNCTION\n    | CATCH\n    | CLASS\n    | COMMENT2\n    | CONST_CAST\n    | DELETE\n    | DYNAMIC_CAST\n    | EXPLICIT\n    | EXPORT\n    | FRIEND\n    | MUTABLE\n    | NAMESPACE\n    | NEW\n    | OPERATOR\n    | VIRTUAL\n    | AUTO\n    | CONST\n    | DO\n    | ENUM\n    | EXTERN\n    | FOR\n    | STATIC\n    | UNION\n    | VOLATILE\n    | RESTRICT\n    | REGISTER\n    | INLINE\n    | GOTO\n    | TYPEDEF\n    | SWITCH\n    | CASE\n    | INC_OP\n    | DEC_OP\n    | DEFAULT\n    "
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,27,49,60,184,],[-16,0,-1,-2,-4,-5,-6,-175,-176,-99,-100,-3,-37,-104,-83,]),'COMMENT1':([0,2,4,5,6,7,8,9,10,27,49,60,61,111,112,113,114,115,116,117,118,119,120,184,185,188,191,192,193,233,248,249,259,268,270,271,273,],[7,7,-4,-5,-6,-175,-176,-99,-100,-3,-37,-104,7,7,-79,-76,-77,-78,-124,-125,-126,-127,-128,-83,-80,-103,-47,-48,-49,-50,-117,-119,-118,-120,-121,-122,-123,]),'COMMENT2':([0,2,4,5,6,7,8,9,10,27,49,60,61,111,112,113,114,115,116,117,118,119,120,184,185,188,191,192,193,233,248,249,259,268,270,271,273,],[8,8,-4,-5,-6,-175,-176,-99,-100,-3,-37,-104,8,8,-79,-76,-77,-78,-124,-125,-126,-127,-128,-83,-80,-103,-47,-48,-49,-50,-117,-119,-118,-120,-121,-122,-123,]),'INT':([0,2,4,5,6,7,8,9,10,14,24,25,27,28,30,34,37,38,39,42,47,48,49,51,52,55,56,57,60,61,92,104,106,111,112,113,114,115,116,117,118,119,120,175,176,177,178,182,184,185,188,190,191,192,193,233,248,249,259,268,270,271,273,],[15,15,-4,-5,-6,-175,-176,-99,-100,15,-33,-34,-3,15,-92,-95,-44,-45,-46,15,15,-38,-37,15,-93,15,15,-134,-104,15,-39,15,-135,15,-79,-76,-77,-78,-124,-125,-126,-127,-128,-96,-97,15,-98,-136,-83,-80,-103,15,-47,-48,-49,-50,-117,-119,-118,-120,-121,-122,-123,]),'SHORT':([0,2,4,5,6,7,8,9,10,14,24,25,27,28,30,34,37,38,39,42,47,48,49,51,52,55,56,57,60,61,92,104,106,111,112,113,114,115,116,117,118,119,120,175,176,177,178,182,184,185,188,190,191,192,193,233,248,249,259,268,270,271,273,],[16,16,-4,-5,-6,-175,-176,-99,-100,16,-33,-34,-3,16,-92,-95,-44,-45,-46,16,16,-38,-37,16,-93,16,16,-134,-104,16,-39,16,-135,16,-79,-76,-77,-78,-124,-125,-126,-127,-128,-96,-97,16,-98,-136,-83,-80,-103,16,-47,-48,-49,-50,-117,-119,-118,-120,-121,-122,-123,]),'LONG':([0,2,4,5,6,7,8,9,10,14,24,25,27,28,30,34,37,38,39,42,47,48,49,51,52,55,56,57,60,61,92,104,106,111,112,113,114,115,116,117,118,119,120,175,176,177,178,182,184,185,188,190,191,192,193,233,248,249,259,268,270,271,273,],[17,17,-4,-5,-6,-175,-176,-99,-100,17,-33,-34,-3,17,-92,-95,-44,-45,-46,17,17,-38,-37,17,-93,17,17,-134,-104,17,-39,17,-135,17,-79,-76,-77,-78,-124,-125,-126,-127,-128,-96,-97,17,-98,-136,-83,-80,-103,17,-47,-48,-49,-50,-117,-119,-118,-120,-121,-122,-123,]),'CHAR':([0,2,4,5,6,7,8,9,10,14,24,25,27,28,30,34,37,38,39,42,47,48,49,51,52,55,56,57,60,61,92,104,106,111,112,113,114,115,116,117,118,119,120,175,176,177,178,182,184,185,188,190,191,192,193,233,248,249,259,268,270,271,273,],[18,18,-4,-5,-6,-175,-176,-99,-100,18,-33,-34,-3,18,-92,-95,-44,-45,-46,18,18,-38,-37,18,-93,18,18,-134,-104,18,-39,18,-135,18,-79,-76,-77,-78,-124,-125,-126,-127,-128,-96,-97,18,-98,-136,-83,-80,-103,18,-47,-48,-49,-50,-117,-119,-118,-120,-121,-122,-123,]),'VOID':([0,2,4,5,6,7,8,9,10,27,28,30,34,37,38,39,42,47,48,49,51,52,55,56,57,60,61,92,104,106,111,112,113,114,115,116,117,118,119,120,175,176,177,178,182,184,185,188,190,191,192,193,233,248,249,259,268,270,271,273,],[19,19,-4,-5,-6,-175,-176,-99,-100,-3,19,-92,-95,-44,-45,-46,19,19,-38,-37,19,-93,19,19,-134,-104,19,-39,19,-135,19,-79,-76,-77,-78,-124,-125,-126,-127,-128,-96,-97,19,-98,-136,-83,-80,-103,19,-47,-48,-49,-50,-117,-119,-118,-120,-121,-122,-123,]),'FLOAT':([0,2,4,5,6,7,8,9,10,27,28,30,34,37,38,39,42,47,48,49,51,52,55,56,57,60,61,92,104,106,111,112,113,114,115,116,117,118,119,120,175,176,177,178,182,184,185,188,190,191,192,193,233,248,249,259,268,270,271,273,],[20,20,-4,-5,-6,-175,-176,-99,-100,-3,20,-92,-95,-44,-45,-46,20,20,-38,-37,20,-93,20,20,-134,-104,20,-39,20,-135,20,-79,-76,-77,-78,-124,-125,-126,-127,-128,-96,-97,20,-98,-136,-83,-80,-103,20,-47,-48,-49,-50,-117,-119,-118,-120,-121,-122,-123,]),'DOUBLE':([0,2,4,5,6,7,8,9,10,27,28,30,34,37,38,39,42,47,48,49,51,52,55,56,57,60,61,92,104,106,111,112,113,114,115,116,117,118,119,120,175,176,177,178,182,184,185,188,190,191,192,193,233,248,249,259,268,270,271,273,],[21,21,-4,-5,-6,-175,-176,-99,-100,-3,21,-92,-95,-44,-45,-46,21,21,-38,-37,21,-93,21,21,-134,-104,21,-39,21,-135,21,-79,-76,-77,-78,-124,-125,-126,-127,-128,-96,-97,21,-98,-136,-83,-80,-103,21,-47,-48,-49,-50,-117,-119,-118,-120,-121,-122,-123,]),'BOOL':([0,2,4,5,6,7,8,9,10,27,28,30,34,37,38,39,42,47,48,49,51,52,55,56,57,60,61,92,104,106,111,112,113,114,115,116,117,118,119,120,175,176,177,178,182,184,185,188,190,191,192,193,233,248,249,259,268,270,271,273,],[22,22,-4,-5,-6,-175,-176,-99,-100,-3,22,-92,-95,-44,-45,-46,22,22,-38,-37,22,-93,22,22,-134,-104,22,-39,22,-135,22,-79,-76,-77,-78,-124,-125,-126,-127,-128,-96,-97,22,-98,-136,-83,-80,-103,22,-47,-48,-49,-50,-117,-119,-118,-120,-121,-122,-123,]),'SIGNED':([0,2,4,5,6,7,8,9,10,27,28,30,34,37,38,39,42,47,48,49,51,52,55,56,57,60,61,92,104,106,111,112,113,114,115,116,117,118,119,120,175,176,177,178,182,184,185,188,190,191,192,193,233,248,249,259,268,270,271,273,],[24,24,-4,-5,-6,-175,-176,-99,-100,-3,24,-92,-95,-44,-45,-46,24,24,-38,-37,24,-93,24,24,-134,-104,24,-39,24,-135,24,-79,-76,-77,-78,-124,-125,-126,-127,-128,-96,-97,24,-98,-136,-83,-80,-103,24,-47,-48,-49,-50,-117,-119,-118,-120,-121,-122,-123,]),'UNSIGNED':([0,2,4,5,6,7,8,9,10,27,28,30,34,37,38,39,42,47,48,49,51,52,55,56,57,60,61,92,104,106,111,112,113,114,115,116,117,118,119,120,175,176,177,178,182,184,185,188,190,191,192,193,233,248,249,259,268,270,271,273,],[25,25,-4,-5,-6,-175,-176,-99,-100,-3,25,-92,-95,-44,-45,-46,25,25,-38,-37,25,-93,25,25,-134,-104,25,-39,25,-135,25,-79,-76,-77,-78,-124,-125,-126,-127,-128,-96,-97,25,-98,-136,-83,-80,-103,25,-47,-48,-49,-50,-117,-119,-118,-120,-121,-122,-123,]),'STRUCT':([0,2,4,5,6,7,8,9,10,27,28,30,34,37,38,39,42,47,48,49,51,52,55,56,57,60,61,92,104,106,111,112,113,114,115,116,117,118,119,120,175,176,177,178,182,184,185,188,190,191,192,193,233,248,249,259,268,270,271,273,],[26,26,-4,-5,-6,-175,-176,-99,-100,-3,26,-92,-95,-44,-45,-46,26,26,-38,-37,26,-93,26,26,-134,-104,26,-39,26,-135,26,-79,-76,-77,-78,-124,-125,-126,-127,-128,-96,-97,26,-98,-136,-83,-80,-103,26,-47,-48,-49,-50,-117,-119,-118,-120,-121,-122,-123,]),'{':([7,8,26,28,30,34,37,38,39,41,44,45,46,47,48,49,52,61,64,92,111,112,113,114,115,116,117,118,119,120,175,176,178,184,185,188,191,192,193,196,233,240,241,248,249,254,259,264,266,267,268,270,271,272,273,],[-175,-176,42,-16,-92,-95,-44,-45,-46,55,61,64,-35,-36,-38,-37,-93,61,64,-39,61,-79,-76,-77,-78,-124,-125,-126,-127,-128,-96,-97,-98,-83,-80,-103,-47,-48,-49,64,-50,61,61,-117,-119,61,-118,61,61,61,-120,-121,-122,61,-123,]),'IF':([7,8,49,61,111,112,113,114,115,116,117,118,119,120,184,185,188,191,192,193,233,240,241,248,249,254,259,264,266,267,268,270,271,272,273,],[-175,-176,-37,121,121,-79,-76,-77,-78,-124,-125,-126,-127,-128,-83,-80,-103,-47,-48,-49,-50,121,121,-117,-119,121,-118,121,121,121,-120,-121,-122,121,-123,]),'WHILE':([7,8,49,61,111,112,113,114,115,116,117,118,119,120,184,185,188,191,192,193,233,240,241,248,249,254,259,264,266,267,268,270,271,272,273,],[-175,-176,-37,124,124,-79,-76,-77,-78,-124,-125,-126,-127,-128,-83,-80,-103,-47,-48,-49,-50,124,124,-117,-119,124,-118,124,124,124,-120,-121,-122,124,-123,]),'FOR':([7,8,49,61,111,112,113,114,115,116,117,118,119,120,184,185,188,191,192,193,233,240,241,248,249,254,259,264,266,267,268,270,271,272,273,],[-175,-176,-37,125,125,-79,-76,-77,-78,-124,-125,-126,-127,-128,-83,-80,-103,-47,-48,-49,-50,125,125,-117,-119,125,-118,125,125,125,-120,-121,-122,125,-123,]),'BREAK':([7,8,49,61,111,112,113,114,115,116,117,118,119,120,184,185,188,191,192,193,233,240,241,248,249,254,259,264,266,267,268,270,271,272,273,],[-175,-176,-37,126,126,-79,-76,-77,-78,-124,-125,-126,-127,-128,-83,-80,-103,-47,-48,-49,-50,126,126,-117,-119,126,-118,126,126,126,-120,-121,-122,126,-123,]),'CONTINUE':([7,8,49,61,111,112,113,114,115,116,117,118,119,120,184,185,188,191,192,193,233,240,241,248,249,254,259,264,266,267,268,270,271,272,273,],[-175,-176,-37,127,127,-79,-76,-77,-78,-124,-125,-126,-127,-128,-83,-80,-103,-47,-48,-49,-50,127,127,-117,-119,127,-118,127,127,127,-120,-121,-122,127,-123,]),'RETURN':([7,8,49,61,111,112,113,114,115,116,117,118,119,120,184,185,188,191,192,193,233,240,241,248,249,254,259,264,266,267,268,270,271,272,273,],[-175,-176,-37,128,128,-79,-76,-77,-78,-124,-125,-126,-127,-128,-83,-80,-103,-47,-48,-49,-50,128,128,-117,-119,128,-118,128,128,128,-120,-121,-122,128,-123,]),'&':([7,8,37,38,39,45,49,50,61,64,66,67,69,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,111,112,113,114,115,116,117,118,119,120,128,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,167,168,169,170,171,172,174,184,185,187,188,189,190,191,192,193,196,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,221,224,233,236,237,238,239,240,241,242,243,244,245,248,249,254,255,256,257,258,259,264,265,266,267,268,270,271,272,273,],[-175,-176,-44,-45,-46,76,-37,76,76,76,-174,159,-149,76,-155,76,-142,-143,-144,-141,-108,76,-113,-145,-146,-147,-148,-114,-115,-87,-88,-89,-90,-153,76,-79,-76,-77,-78,-124,-125,-126,-127,-128,76,76,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-150,-174,-152,-151,76,76,-154,-83,-80,76,-103,76,76,-47,-48,-49,76,159,-155,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,-111,-112,-116,-50,-109,-110,76,76,76,76,76,76,76,76,-117,-119,76,76,76,76,76,-118,76,76,76,76,-120,-121,-122,76,-123,]),'*':([7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,35,37,38,39,40,41,43,45,49,50,53,58,61,64,66,67,69,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,101,105,111,112,113,114,115,116,117,118,119,120,128,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,167,168,169,170,171,172,174,181,183,184,185,187,188,189,190,191,192,193,196,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,221,224,233,236,237,238,239,240,241,242,243,244,245,248,249,254,255,256,257,258,259,264,265,266,267,268,270,271,272,273,],[-175,-176,35,-17,-18,-19,-29,-30,-31,-32,-24,-25,-26,-27,-28,-33,-34,35,-44,-45,-46,-20,-129,35,73,-37,73,35,35,73,73,-174,146,-149,73,-155,73,-142,-143,-144,-141,-108,73,-113,-145,-146,-147,-148,-114,-115,-87,-88,-89,-90,-153,35,-130,73,-79,-76,-77,-78,-124,-125,-126,-127,-128,73,73,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-150,-174,-152,-151,73,73,-154,-133,35,-83,-80,73,-103,73,73,-47,-48,-49,73,146,-155,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,-111,-112,-116,-50,-109,-110,73,73,73,73,73,73,73,73,-117,-119,73,73,73,73,73,-118,73,73,73,73,-120,-121,-122,73,-123,]),'+':([7,8,37,38,39,45,49,50,61,64,66,67,69,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,111,112,113,114,115,116,117,118,119,120,128,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,167,168,169,170,171,172,174,184,185,187,188,189,190,191,192,193,196,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,221,224,233,236,237,238,239,240,241,242,243,244,245,248,249,254,255,256,257,258,259,264,265,266,267,268,270,271,272,273,],[-175,-176,-44,-45,-46,74,-37,74,74,74,-174,149,-149,74,-155,74,-142,-143,-144,-141,-108,74,-113,-145,-146,-147,-148,-114,-115,-87,-88,-89,-90,-153,74,-79,-76,-77,-78,-124,-125,-126,-127,-128,74,74,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-150,-174,-152,-151,74,74,-154,-83,-80,74,-103,74,74,-47,-48,-49,74,149,-155,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,-111,-112,-116,-50,-109,-110,74,74,74,74,74,74,74,74,-117,-119,74,74,74,74,74,-118,74,74,74,74,-120,-121,-122,74,-123,]),'-':([7,8,37,38,39,45,49,50,61,64,66,67,69,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,111,112,113,114,115,116,117,118,119,120,128,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,167,168,169,170,171,172,174,184,185,187,188,189,190,191,192,193,196,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,221,224,233,236,237,238,239,240,241,242,243,244,245,248,249,254,255,256,257,258,259,264,265,266,267,268,270,271,272,273,],[-175,-176,-44,-45,-46,75,-37,75,75,75,-174,150,-149,75,-155,75,-142,-143,-144,-141,-108,75,-113,-145,-146,-147,-148,-114,-115,-87,-88,-89,-90,-153,75,-79,-76,-77,-78,-124,-125,-126,-127,-128,75,75,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-150,-174,-152,-151,75,75,-154,-83,-80,75,-103,75,75,-47,-48,-49,75,150,-155,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,-111,-112,-116,-50,-109,-110,75,75,75,75,75,75,75,75,-117,-119,75,75,75,75,75,-118,75,75,75,75,-120,-121,-122,75,-123,]),'~':([7,8,45,49,50,61,64,70,72,73,74,75,76,79,81,82,83,84,111,112,113,114,115,116,117,118,119,120,128,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,171,172,184,185,187,188,189,190,191,192,193,196,233,238,239,240,241,242,243,244,245,248,249,254,255,256,257,258,259,264,265,266,267,268,270,271,272,273,],[-175,-176,81,-37,81,81,81,81,81,-142,-143,-144,-141,81,-145,-146,-147,-148,81,-79,-76,-77,-78,-124,-125,-126,-127,-128,81,81,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-83,-80,81,-103,81,81,-47,-48,-49,81,-50,81,81,81,81,81,81,81,81,-117,-119,81,81,81,81,81,-118,81,81,81,81,-120,-121,-122,81,-123,]),'!':([7,8,45,49,50,61,64,70,72,73,74,75,76,79,81,82,83,84,111,112,113,114,115,116,117,118,119,120,128,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,171,172,184,185,187,188,189,190,191,192,193,196,233,238,239,240,241,242,243,244,245,248,249,254,255,256,257,258,259,264,265,266,267,268,270,271,272,273,],[-175,-176,82,-37,82,82,82,82,82,-142,-143,-144,-141,82,-145,-146,-147,-148,82,-79,-76,-77,-78,-124,-125,-126,-127,-128,82,82,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-83,-80,82,-103,82,82,-47,-48,-49,82,-50,82,82,82,82,82,82,82,82,-117,-119,82,82,82,82,82,-118,82,82,82,82,-120,-121,-122,82,-123,]),'INC_OP':([7,8,37,38,39,45,49,50,61,64,66,69,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,111,112,113,114,115,116,117,118,119,120,128,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,167,168,169,170,171,172,174,184,185,187,188,189,190,191,192,193,196,199,219,221,224,233,236,237,238,239,240,241,242,243,244,245,248,249,254,255,256,257,258,259,264,265,266,267,268,270,271,272,273,],[-175,-176,-44,-45,-46,83,-37,83,83,83,-174,-149,83,83,83,-142,-143,-144,-141,-108,83,-113,-145,-146,-147,-148,-114,-115,-87,-88,-89,-90,-153,83,-79,-76,-77,-78,-124,-125,-126,-127,-128,83,83,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-174,-152,83,83,83,-154,-83,-80,83,-103,83,83,-47,-48,-49,83,83,-111,-112,-116,-50,-109,-110,83,83,83,83,83,83,83,83,-117,-119,83,83,83,83,83,-118,83,83,83,83,-120,-121,-122,83,-123,]),'DEC_OP':([7,8,37,38,39,45,49,50,61,64,66,69,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,111,112,113,114,115,116,117,118,119,120,128,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,167,168,169,170,171,172,174,184,185,187,188,189,190,191,192,193,196,199,219,221,224,233,236,237,238,239,240,241,242,243,244,245,248,249,254,255,256,257,258,259,264,265,266,267,268,270,271,272,273,],[-175,-176,-44,-45,-46,84,-37,84,84,84,-174,-149,84,84,84,-142,-143,-144,-141,-108,84,-113,-145,-146,-147,-148,-114,-115,-87,-88,-89,-90,-153,84,-79,-76,-77,-78,-124,-125,-126,-127,-128,84,84,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-174,-152,84,84,84,-154,-83,-80,84,-103,84,84,-47,-48,-49,84,84,-111,-112,-116,-50,-109,-110,84,84,84,84,84,84,84,84,-117,-119,84,84,84,84,84,-118,84,84,84,84,-120,-121,-122,84,-123,]),'(':([7,8,30,34,37,38,39,45,49,50,52,61,64,69,70,72,73,74,75,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,111,112,113,114,115,116,117,118,119,120,121,124,125,128,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,171,172,174,175,176,178,184,185,187,188,189,190,191,192,193,196,219,221,224,233,236,237,238,239,240,241,242,243,244,245,248,249,254,255,256,257,258,259,264,265,266,267,268,270,271,272,273,],[-175,-176,51,-95,-44,-45,-46,79,-37,79,51,79,79,165,79,79,-142,-143,-144,-141,-108,79,-113,-145,-146,-147,-148,-114,-115,-87,-88,-89,-90,-153,79,-79,-76,-77,-78,-124,-125,-126,-127,-128,187,189,190,79,79,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-154,-96,-97,-98,-83,-80,79,-103,79,79,-47,-48,-49,79,-111,-112,-116,-50,-109,-110,79,79,79,79,79,79,79,79,-117,-119,79,79,79,79,79,-118,79,79,79,79,-120,-121,-122,79,-123,]),'ID':([7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,31,35,37,38,39,40,41,43,45,49,50,51,53,54,58,61,64,70,72,73,74,75,76,79,81,82,83,84,101,105,111,112,113,114,115,116,117,118,119,120,128,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,179,181,183,184,185,187,188,189,190,191,192,193,196,233,238,239,240,241,242,243,244,245,248,249,254,255,256,257,258,259,264,265,266,267,268,270,271,272,273,],[-175,-176,37,-17,-18,-19,-29,-30,-31,-32,-24,-25,-26,-27,-28,-33,-34,37,37,-139,-44,-45,-46,-20,-129,37,37,-37,37,37,37,-140,37,37,37,37,37,-142,-143,-144,-141,37,-145,-146,-147,-148,37,-130,37,-79,-76,-77,-78,-124,-125,-126,-127,-128,37,37,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-133,37,-83,-80,37,-103,37,37,-47,-48,-49,37,-50,37,37,37,37,37,37,37,37,-117,-119,37,37,37,37,37,-118,37,37,37,37,-120,-121,-122,37,-123,]),'INTEGER_CONST':([7,8,45,49,50,61,64,70,72,73,74,75,76,79,81,82,83,84,111,112,113,114,115,116,117,118,119,120,128,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,171,172,184,185,187,188,189,190,191,192,193,196,233,238,239,240,241,242,243,244,245,248,249,254,255,256,257,258,259,264,265,266,267,268,270,271,272,273,],[-175,-176,87,-37,87,87,87,87,87,-142,-143,-144,-141,87,-145,-146,-147,-148,87,-79,-76,-77,-78,-124,-125,-126,-127,-128,87,87,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,-83,-80,87,-103,87,87,-47,-48,-49,87,-50,87,87,87,87,87,87,87,87,-117,-119,87,87,87,87,87,-118,87,87,87,87,-120,-121,-122,87,-123,]),'CHAR_CONST':([7,8,45,49,50,61,64,70,72,73,74,75,76,79,81,82,83,84,111,112,113,114,115,116,117,118,119,120,128,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,171,172,184,185,187,188,189,190,191,192,193,196,233,238,239,240,241,242,243,244,245,248,249,254,255,256,257,258,259,264,265,266,267,268,270,271,272,273,],[-175,-176,88,-37,88,88,88,88,88,-142,-143,-144,-141,88,-145,-146,-147,-148,88,-79,-76,-77,-78,-124,-125,-126,-127,-128,88,88,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,-83,-80,88,-103,88,88,-47,-48,-49,88,-50,88,88,88,88,88,88,88,88,-117,-119,88,88,88,88,88,-118,88,88,88,88,-120,-121,-122,88,-123,]),'FLOAT_CONST':([7,8,45,49,50,61,64,70,72,73,74,75,76,79,81,82,83,84,111,112,113,114,115,116,117,118,119,120,128,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,171,172,184,185,187,188,189,190,191,192,193,196,233,238,239,240,241,242,243,244,245,248,249,254,255,256,257,258,259,264,265,266,267,268,270,271,272,273,],[-175,-176,89,-37,89,89,89,89,89,-142,-143,-144,-141,89,-145,-146,-147,-148,89,-79,-76,-77,-78,-124,-125,-126,-127,-128,89,89,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-83,-80,89,-103,89,89,-47,-48,-49,89,-50,89,89,89,89,89,89,89,89,-117,-119,89,89,89,89,89,-118,89,89,89,89,-120,-121,-122,89,-123,]),'BOOL_CONST':([7,8,45,49,50,61,64,70,72,73,74,75,76,79,81,82,83,84,111,112,113,114,115,116,117,118,119,120,128,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,171,172,184,185,187,188,189,190,191,192,193,196,233,238,239,240,241,242,243,244,245,248,249,254,255,256,257,258,259,264,265,266,267,268,270,271,272,273,],[-175,-176,90,-37,90,90,90,90,90,-142,-143,-144,-141,90,-145,-146,-147,-148,90,-79,-76,-77,-78,-124,-125,-126,-127,-128,90,90,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-83,-80,90,-103,90,90,-47,-48,-49,90,-50,90,90,90,90,90,90,90,90,-117,-119,90,90,90,90,90,-118,90,90,90,90,-120,-121,-122,90,-123,]),'STRING_CONST':([7,8,45,49,50,61,64,70,72,73,74,75,76,79,81,82,83,84,86,91,111,112,113,114,115,116,117,118,119,120,128,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,171,172,174,184,185,187,188,189,190,191,192,193,196,233,238,239,240,241,242,243,244,245,248,249,254,255,256,257,258,259,264,265,266,267,268,270,271,272,273,],[-175,-176,91,-37,91,91,91,91,91,-142,-143,-144,-141,91,-145,-146,-147,-148,174,-153,91,-79,-76,-77,-78,-124,-125,-126,-127,-128,91,91,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-154,-83,-80,91,-103,91,91,-47,-48,-49,91,-50,91,91,91,91,91,91,91,91,-117,-119,91,91,91,91,91,-118,91,91,91,91,-120,-121,-122,91,-123,]),'SIZEOF':([7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,31,35,37,38,39,40,41,43,45,49,50,51,53,54,58,61,64,70,72,73,74,75,76,79,81,82,83,84,101,105,111,112,113,114,115,116,117,118,119,120,128,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,179,181,183,184,185,187,188,189,190,191,192,193,196,233,238,239,240,241,242,243,244,245,248,249,254,255,256,257,258,259,264,265,266,267,268,270,271,272,273,],[-175,-176,39,-17,-18,-19,-29,-30,-31,-32,-24,-25,-26,-27,-28,-33,-34,39,39,-139,-44,-45,-46,-20,-129,39,39,-37,39,39,39,-140,39,39,39,39,39,-142,-143,-144,-141,39,-145,-146,-147,-148,39,-130,39,-79,-76,-77,-78,-124,-125,-126,-127,-128,39,39,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-133,39,-83,-80,39,-103,39,39,-47,-48,-49,39,-50,39,39,39,39,39,39,39,39,-117,-119,39,39,39,39,39,-118,39,39,39,39,-120,-121,-122,39,-123,]),';':([7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,28,29,30,32,33,34,36,37,38,39,40,41,43,49,52,59,61,62,63,65,66,67,68,69,71,78,80,83,84,85,86,87,88,89,90,91,103,105,107,108,110,111,112,113,114,115,116,117,118,119,120,122,123,126,127,128,129,167,168,169,170,174,175,176,178,180,181,184,185,186,188,190,191,192,193,194,195,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,221,223,224,227,230,231,232,233,234,236,237,240,241,242,244,245,247,248,249,250,251,252,253,254,256,259,261,264,266,267,268,270,271,272,273,],[-175,-176,-16,-17,-18,-19,-29,-30,-31,-32,-24,-25,-26,-27,-28,-33,-34,-12,49,-92,-53,-54,-95,-14,-44,-45,-46,-20,-129,-16,-37,-93,-12,-16,-13,-7,-68,-174,-84,-85,-149,-155,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-15,-130,182,-137,-81,-16,-79,-76,-77,-78,-124,-125,-126,-127,-128,-82,188,191,192,193,-101,-150,-174,-152,-151,-154,-96,-97,-98,-107,-133,-83,-80,-81,-103,-16,-47,-48,-49,233,-8,-69,-156,-155,-157,-158,-159,-160,-161,-162,-163,-164,-165,-166,-167,-168,-169,-170,-171,-172,-173,-111,-112,-102,-116,-138,242,244,245,-50,-9,-109,-110,-16,-16,-16,-16,-16,-86,-117,-119,255,256,257,258,-16,-16,-118,265,-16,-16,-16,-120,-121,-122,-16,-123,]),'}':([7,8,37,38,39,49,56,57,61,63,64,65,66,67,68,69,71,78,80,83,84,85,86,87,88,89,90,91,104,106,109,110,111,112,113,114,115,116,117,118,119,120,129,130,131,132,133,167,168,169,170,174,182,184,185,188,191,192,193,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,221,223,224,233,234,235,236,237,247,248,249,259,268,270,271,273,],[-175,-176,-44,-45,-46,-37,105,-134,-16,-7,-16,-68,-174,-84,-85,-149,-155,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,181,-135,184,-70,-71,-79,-76,-77,-78,-124,-125,-126,-127,-128,-101,195,-132,-131,-10,-150,-174,-152,-151,-154,-136,-83,-80,-103,-47,-48,-49,-8,234,-69,-156,-155,-157,-158,-159,-160,-161,-162,-163,-164,-165,-166,-167,-168,-169,-170,-171,-172,-173,-111,-112,-102,-116,-50,-9,-11,-109,-110,-86,-117,-119,-118,-120,-121,-122,-123,]),',':([28,30,33,34,36,37,38,39,52,59,62,63,65,66,67,68,69,71,77,78,80,83,84,85,86,87,88,89,90,91,95,96,98,100,102,103,107,108,122,129,131,133,167,168,169,170,173,174,175,176,178,180,194,195,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,231,234,235,236,237,246,247,251,],[-12,-92,53,-95,-14,-44,-45,-46,-93,-12,-13,-7,-68,-174,-84,-85,-149,-155,172,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-101,177,-105,179,-42,-15,183,-137,172,-101,196,-10,-150,-174,-152,-151,172,-154,-96,-97,-98,-107,172,-8,-69,-156,-155,-157,-158,-159,-160,-161,-162,-163,-164,-165,-166,-167,-168,-169,-170,-171,-172,-173,172,238,-111,-66,-112,172,-101,-116,-106,-43,-138,172,172,172,-9,-11,-109,-110,-67,172,172,]),'=':([28,30,34,37,38,39,52,59,66,69,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,175,176,178,180,219,221,224,230,236,237,],[45,-92,-95,-44,-45,-46,-93,45,135,-149,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,-96,-97,-98,-107,-111,-112,-116,243,-109,-110,]),')':([30,34,37,38,39,51,52,65,66,67,68,69,71,78,80,83,84,85,86,87,88,89,90,91,96,97,98,99,100,102,122,129,165,167,168,169,170,173,174,175,176,178,180,186,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,218,219,220,221,223,224,225,226,228,229,236,237,246,247,255,257,258,260,262,263,265,269,],[-92,-95,-44,-45,-46,-16,-93,-68,-174,-84,-85,-149,-155,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,176,178,-105,-40,-41,-42,-82,-101,219,-150,-174,-152,-151,224,-154,-96,-97,-98,-107,-81,-69,-156,-155,-157,-158,-159,-160,-161,-162,-163,-164,-165,-166,-167,-168,-169,-170,-171,-172,-173,237,-111,-66,-112,-102,-116,-106,-43,240,241,-109,-110,-67,-86,-16,-16,-16,264,266,267,-16,272,]),'[':([30,34,37,38,39,52,69,78,80,85,86,87,88,89,90,91,174,175,176,178,219,221,224,236,237,],[50,-95,-44,-45,-46,50,164,-108,-113,-114,-115,-87,-88,-89,-90,-153,-154,-96,-97,-98,-111,-112,-116,-109,-110,]),'PTR_OP':([37,38,39,69,78,80,85,86,87,88,89,90,91,174,219,221,224,236,237,],[-44,-45,-46,166,-108,-113,-114,-115,-87,-88,-89,-90,-153,-154,-111,-112,-116,-109,-110,]),'MUL_ASG':([37,38,39,66,69,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,219,221,224,236,237,],[-44,-45,-46,136,-149,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,-111,-112,-116,-109,-110,]),'DIV_ASG':([37,38,39,66,69,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,219,221,224,236,237,],[-44,-45,-46,137,-149,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,-111,-112,-116,-109,-110,]),'MOD_ASG':([37,38,39,66,69,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,219,221,224,236,237,],[-44,-45,-46,138,-149,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,-111,-112,-116,-109,-110,]),'ADD_ASG':([37,38,39,66,69,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,219,221,224,236,237,],[-44,-45,-46,139,-149,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,-111,-112,-116,-109,-110,]),'SUB_ASG':([37,38,39,66,69,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,219,221,224,236,237,],[-44,-45,-46,140,-149,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,-111,-112,-116,-109,-110,]),'LEFT_ASG':([37,38,39,66,69,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,219,221,224,236,237,],[-44,-45,-46,141,-149,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,-111,-112,-116,-109,-110,]),'RIGHT_ASG':([37,38,39,66,69,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,219,221,224,236,237,],[-44,-45,-46,142,-149,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,-111,-112,-116,-109,-110,]),'AND_ASG':([37,38,39,66,69,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,219,221,224,236,237,],[-44,-45,-46,143,-149,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,-111,-112,-116,-109,-110,]),'XOR_ASG':([37,38,39,66,69,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,219,221,224,236,237,],[-44,-45,-46,144,-149,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,-111,-112,-116,-109,-110,]),'OR_ASG':([37,38,39,66,69,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,219,221,224,236,237,],[-44,-45,-46,145,-149,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,-111,-112,-116,-109,-110,]),'/':([37,38,39,66,67,69,71,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,221,224,236,237,],[-44,-45,-46,-174,147,-149,-155,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,147,-155,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,-111,-112,-116,-109,-110,]),'%':([37,38,39,66,67,69,71,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,221,224,236,237,],[-44,-45,-46,-174,148,-149,-155,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,148,-155,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,-111,-112,-116,-109,-110,]),'RIGHT_OP':([37,38,39,66,67,69,71,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,221,224,236,237,],[-44,-45,-46,-174,151,-149,-155,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,151,-155,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,-111,-112,-116,-109,-110,]),'LEFT_OP':([37,38,39,66,67,69,71,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,221,224,236,237,],[-44,-45,-46,-174,152,-149,-155,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,152,-155,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,-111,-112,-116,-109,-110,]),'<':([37,38,39,66,67,69,71,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,221,224,236,237,],[-44,-45,-46,-174,153,-149,-155,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,153,-155,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,-111,-112,-116,-109,-110,]),'LTE':([37,38,39,66,67,69,71,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,221,224,236,237,],[-44,-45,-46,-174,154,-149,-155,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,154,-155,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,-111,-112,-116,-109,-110,]),'GTE':([37,38,39,66,67,69,71,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,221,224,236,237,],[-44,-45,-46,-174,155,-149,-155,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,155,-155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,-111,-112,-116,-109,-110,]),'>':([37,38,39,66,67,69,71,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,221,224,236,237,],[-44,-45,-46,-174,156,-149,-155,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,156,-155,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,-111,-112,-116,-109,-110,]),'EQ_OP':([37,38,39,66,67,69,71,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,221,224,236,237,],[-44,-45,-46,-174,157,-149,-155,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,157,-155,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,-111,-112,-116,-109,-110,]),'NEQ_OP':([37,38,39,66,67,69,71,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,221,224,236,237,],[-44,-45,-46,-174,158,-149,-155,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,158,-155,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,-111,-112,-116,-109,-110,]),'|':([37,38,39,66,67,69,71,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,221,224,236,237,],[-44,-45,-46,-174,160,-149,-155,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,160,-155,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,-111,-112,-116,-109,-110,]),'^':([37,38,39,66,67,69,71,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,221,224,236,237,],[-44,-45,-46,-174,161,-149,-155,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,161,-155,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,-111,-112,-116,-109,-110,]),'AND_OP':([37,38,39,66,67,69,71,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,221,224,236,237,],[-44,-45,-46,-174,162,-149,-155,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,162,-155,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,-111,-112,-116,-109,-110,]),'OR_OP':([37,38,39,66,67,69,71,78,80,83,84,85,86,87,88,89,90,91,167,168,169,170,174,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,221,224,236,237,],[-44,-45,-46,-174,163,-149,-155,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-150,-174,-152,-151,-154,163,-155,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,-111,-112,-116,-109,-110,]),'?':([37,38,39,63,65,66,67,68,69,71,77,78,80,83,84,85,86,87,88,89,90,91,95,122,129,167,168,169,170,173,174,194,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,219,220,221,222,223,224,228,229,231,236,237,246,247,251,],[-44,-45,-46,-101,-68,-174,-84,-85,-149,-155,171,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-101,171,-101,-150,-174,-152,-151,171,-154,171,-69,-156,-155,-157,-158,-159,-160,-161,-162,-163,-164,-165,-166,-167,-168,-169,-170,-171,-172,-173,171,-111,-101,-112,171,-101,-116,171,171,171,-109,-110,-101,171,171,]),']':([37,38,39,50,65,66,67,68,69,71,78,80,83,84,85,86,87,88,89,90,91,93,94,95,129,167,168,169,170,174,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,219,221,223,224,236,237,247,],[-44,-45,-46,-16,-68,-174,-84,-85,-149,-155,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,175,-51,-52,-101,-150,-174,-152,-151,-154,-69,-156,-155,-157,-158,-159,-160,-161,-162,-163,-164,-165,-166,-167,-168,-169,-170,-171,-172,-173,236,-111,-112,-102,-116,-109,-110,-86,]),':':([37,38,39,65,66,67,68,69,71,78,80,83,84,85,86,87,88,89,90,91,129,167,168,169,170,174,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,221,222,223,224,236,237,247,],[-44,-45,-46,-68,-174,-84,-85,-149,-155,-108,-113,-147,-148,-114,-115,-87,-88,-89,-90,-153,-101,-150,-174,-152,-151,-154,-69,-156,-155,-157,-158,-159,-160,-161,-162,-163,-164,-165,-166,-167,-168,-169,-170,-171,-172,-173,-111,-112,239,-102,-116,-109,-110,-86,]),'ELSE':([116,117,118,119,120,184,188,191,192,193,233,248,249,259,268,270,271,273,],[-124,-125,-126,-127,-128,-83,-103,-47,-48,-49,-50,254,-119,-118,-120,-121,-122,-123,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'part':([0,],[2,]),'empty':([0,11,28,43,50,51,61,64,111,190,240,241,242,244,245,254,255,256,257,258,264,265,266,267,272,],[3,32,46,32,94,99,110,132,186,232,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,]),'declorcom':([0,2,],[4,27,]),'comment':([0,2,61,111,],[5,5,115,115,]),'external_declaration':([0,2,],[6,6,]),'function_definition':([0,2,],[9,9,]),'declaration':([0,2,28,47,61,111,],[10,10,48,92,113,113,]),'type':([0,2,28,42,47,51,55,56,61,104,111,177,190,],[11,11,43,58,43,101,58,58,43,58,43,101,101,]),'type_specifier_can_unsigned':([0,2,14,28,42,47,51,55,56,61,104,111,177,190,],[12,12,40,12,12,12,12,12,12,12,12,12,12,12,]),'type_specifier_cannot_unsigned':([0,2,28,42,47,51,55,56,61,104,111,177,190,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'uorus':([0,2,28,42,47,51,55,56,61,104,111,177,190,],[14,14,14,14,14,14,14,14,14,14,14,14,14,]),'struct_specifier':([0,2,28,42,47,51,55,56,61,104,111,177,190,],[23,23,23,23,23,23,23,23,23,23,23,23,23,]),'variable':([11,43,53,58,101,183,],[28,59,59,108,180,227,]),'variable_initable_list_orempty':([11,43,],[29,29,]),'direct_variable':([11,31,43,53,58,101,183,],[30,52,30,30,30,30,30,]),'pointer':([11,35,43,53,58,101,183,],[31,54,31,31,31,31,31,]),'variable_initable_list':([11,43,],[33,33,]),'identifier':([11,26,31,43,45,50,51,53,58,61,64,70,72,79,101,111,128,134,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,179,183,187,189,190,196,238,239,240,241,242,243,244,245,254,255,256,257,258,264,265,266,267,272,],[34,41,34,34,80,80,102,34,34,80,80,80,80,80,34,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,221,80,80,226,34,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'variable_initable':([11,43,53,],[36,36,103,]),'inlinefunc':([11,26,31,43,45,50,51,53,58,61,64,70,72,79,101,111,128,134,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,179,183,187,189,190,196,238,239,240,241,242,243,244,245,254,255,256,257,258,264,265,266,267,272,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'declaration_list_orempty':([28,],[44,]),'declaration_list':([28,],[47,]),'struct_declaration_list':([42,55,],[56,104,]),'struct_declaration':([42,55,56,104,],[57,57,106,106,]),'funcbody_statement':([44,61,111,240,241,254,264,266,267,272,],[60,116,116,116,116,116,116,116,116,116,]),'initializer':([45,64,196,],[62,133,235,]),'assignable_expression':([45,50,61,64,79,111,128,134,164,165,171,172,187,189,190,196,238,239,240,241,242,243,244,245,254,255,256,257,258,264,265,266,267,272,],[63,95,129,63,129,129,129,197,129,220,129,223,129,129,129,63,246,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,]),'conditional_expression':([45,50,61,64,79,111,128,134,164,165,171,172,187,189,190,196,238,239,240,241,242,243,244,245,254,255,256,257,258,264,265,266,267,272,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'unary_expression':([45,50,61,64,70,72,79,111,128,134,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,171,172,187,189,190,196,238,239,240,241,242,243,244,245,254,255,256,257,258,264,265,266,267,272,],[66,66,66,66,168,168,66,66,66,66,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'binary_expression':([45,50,61,64,79,111,128,134,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,171,172,187,189,190,196,238,239,240,241,242,243,244,245,254,255,256,257,258,264,265,266,267,272,],[67,67,67,67,67,67,67,67,198,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'ternary_expression':([45,50,61,64,79,111,128,134,164,165,171,172,187,189,190,196,238,239,240,241,242,243,244,245,254,255,256,257,258,264,265,266,267,272,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'uscd_expression':([45,50,61,64,70,72,79,111,128,134,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,171,172,187,189,190,196,238,239,240,241,242,243,244,245,254,255,256,257,258,264,265,266,267,272,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'unary_operator':([45,50,61,64,70,72,79,111,128,134,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,171,172,187,189,190,196,238,239,240,241,242,243,244,245,254,255,256,257,258,264,265,266,267,272,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'cast_expression':([45,50,61,64,70,72,79,111,128,134,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,171,172,187,189,190,196,238,239,240,241,242,243,244,245,254,255,256,257,258,264,265,266,267,272,],[71,71,71,71,167,170,71,71,71,71,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'self_incdec':([45,50,61,64,70,71,72,79,111,128,134,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,167,170,171,172,187,189,190,196,199,238,239,240,241,242,243,244,245,254,255,256,257,258,264,265,266,267,272,],[72,72,72,72,72,169,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,169,169,72,72,72,72,72,72,169,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'expression':([45,50,61,64,79,111,128,134,164,165,171,172,187,189,190,196,238,239,240,241,242,243,244,245,254,255,256,257,258,264,265,266,267,272,],[77,77,122,77,173,122,194,77,217,77,222,77,228,229,231,77,77,247,122,122,122,251,122,122,122,122,122,122,122,122,122,122,122,122,]),'unit_expression':([45,50,61,64,70,72,79,111,128,134,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,171,172,187,189,190,196,238,239,240,241,242,243,244,245,254,255,256,257,258,264,265,266,267,272,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'constant':([45,50,61,64,70,72,79,111,128,134,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,171,172,187,189,190,196,238,239,240,241,242,243,244,245,254,255,256,257,258,264,265,266,267,272,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'multiple_string':([45,50,61,64,70,72,79,111,128,134,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,171,172,187,189,190,196,238,239,240,241,242,243,244,245,254,255,256,257,258,264,265,266,267,272,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'assignable_expression_orempty':([50,],[93,]),'parameter_list':([51,],[96,]),'identifier_list_orempty':([51,],[97,]),'parameter_declaration':([51,177,190,],[98,225,230,]),'identifier_list':([51,],[100,]),'struct_variable_list':([58,],[107,]),'block_item_list_orempty':([61,],[109,]),'block_item_list':([61,],[111,]),'block_item':([61,111,],[112,185,]),'statement':([61,111,240,241,254,264,266,267,272,],[114,114,248,249,259,268,270,271,273,]),'branch_statement':([61,111,240,241,254,264,266,267,272,],[117,117,117,117,117,117,117,117,117,]),'expression_statement':([61,111,240,241,254,264,266,267,272,],[118,118,118,118,118,118,118,118,118,]),'loop_statement':([61,111,240,241,254,264,266,267,272,],[119,119,119,119,119,119,119,119,119,]),'back_statement':([61,111,240,241,254,264,266,267,272,],[120,120,120,120,120,120,120,120,120,]),'expression_orempty':([61,111,240,241,242,244,245,254,255,256,257,258,264,265,266,267,272,],[123,123,123,123,250,252,253,123,260,261,262,263,123,269,123,123,123,]),'initializer_list_orempty':([64,],[130,]),'initializer_list':([64,],[131,]),'assign_operator':([66,],[134,]),'arg_value_exp_list':([165,],[218,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> part','start',1,'p_starter','Parser.py',11),
  ('start -> empty','start',1,'p_starter','Parser.py',12),
  ('part -> part declorcom','part',2,'p_part','Parser.py',18),
  ('part -> declorcom','part',1,'p_part','Parser.py',19),
  ('declorcom -> comment','declorcom',1,'p_decl_or_comment_1','Parser.py',27),
  ('declorcom -> external_declaration','declorcom',1,'p_decl_or_comment_2','Parser.py',32),
  ('initializer -> assignable_expression','initializer',1,'p_initializer_ass','Parser.py',38),
  ('initializer -> { initializer_list_orempty }','initializer',3,'p_initializer_in','Parser.py',43),
  ('initializer -> { initializer_list , }','initializer',4,'p_initializer_in','Parser.py',44),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','Parser.py',53),
  ('initializer_list -> initializer_list , initializer','initializer_list',3,'p_initializer_list','Parser.py',54),
  ('variable_initable -> variable','variable_initable',1,'p_variable_initable','Parser.py',63),
  ('variable_initable -> variable = initializer','variable_initable',3,'p_variable_initable','Parser.py',64),
  ('variable_initable_list -> variable_initable','variable_initable_list',1,'p_variable_initable_list_idec','Parser.py',70),
  ('variable_initable_list -> variable_initable_list , variable_initable','variable_initable_list',3,'p_variable_initable_list_idec','Parser.py',71),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',81),
  ('type -> type_specifier_can_unsigned','type',1,'p_type','Parser.py',87),
  ('type -> type_specifier_cannot_unsigned','type',1,'p_type','Parser.py',88),
  ('type -> uorus','type',1,'p_type','Parser.py',89),
  ('type -> uorus type_specifier_can_unsigned','type',2,'p_type','Parser.py',90),
  ('type_specifier -> type_specifier_cannot_unsigned','type_specifier',1,'p_type_specifier','Parser.py',102),
  ('type_specifier -> type_specifier_can_unsigned','type_specifier',1,'p_type_specifier','Parser.py',103),
  ('type_specifier -> uorus','type_specifier',1,'p_type_specifier','Parser.py',104),
  ('type_specifier_cannot_unsigned -> VOID','type_specifier_cannot_unsigned',1,'p_type_specifier_cannot_unsigned','Parser.py',109),
  ('type_specifier_cannot_unsigned -> FLOAT','type_specifier_cannot_unsigned',1,'p_type_specifier_cannot_unsigned','Parser.py',110),
  ('type_specifier_cannot_unsigned -> DOUBLE','type_specifier_cannot_unsigned',1,'p_type_specifier_cannot_unsigned','Parser.py',111),
  ('type_specifier_cannot_unsigned -> BOOL','type_specifier_cannot_unsigned',1,'p_type_specifier_cannot_unsigned','Parser.py',112),
  ('type_specifier_cannot_unsigned -> struct_specifier','type_specifier_cannot_unsigned',1,'p_type_specifier_cannot_unsigned','Parser.py',113),
  ('type_specifier_can_unsigned -> INT','type_specifier_can_unsigned',1,'p_type_specifier_can_unsigned','Parser.py',118),
  ('type_specifier_can_unsigned -> SHORT','type_specifier_can_unsigned',1,'p_type_specifier_can_unsigned','Parser.py',119),
  ('type_specifier_can_unsigned -> LONG','type_specifier_can_unsigned',1,'p_type_specifier_can_unsigned','Parser.py',120),
  ('type_specifier_can_unsigned -> CHAR','type_specifier_can_unsigned',1,'p_type_specifier_can_unsigned','Parser.py',121),
  ('uorus -> SIGNED','uorus',1,'p_uorus','Parser.py',126),
  ('uorus -> UNSIGNED','uorus',1,'p_uorus','Parser.py',127),
  ('declaration_list_orempty -> empty','declaration_list_orempty',1,'p_declaration_list_orempty','Parser.py',131),
  ('declaration_list_orempty -> declaration_list','declaration_list_orempty',1,'p_declaration_list_orempty','Parser.py',132),
  ('declaration -> type variable_initable_list_orempty ;','declaration',3,'p_declaration','Parser.py',137),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser.py',190),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','Parser.py',191),
  ('identifier_list_orempty -> empty','identifier_list_orempty',1,'p_identifier_list_orempty','Parser.py',198),
  ('identifier_list_orempty -> identifier_list','identifier_list_orempty',1,'p_identifier_list_orempty','Parser.py',199),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','Parser.py',204),
  ('identifier_list -> identifier_list , identifier','identifier_list',3,'p_identifier_list','Parser.py',205),
  ('identifier -> ID','identifier',1,'p_identifier','Parser.py',215),
  ('identifier -> inlinefunc','identifier',1,'p_identifier','Parser.py',216),
  ('inlinefunc -> SIZEOF','inlinefunc',1,'p_inclinefunc','Parser.py',223),
  ('back_statement -> BREAK ;','back_statement',2,'p_back_statement_break','Parser.py',228),
  ('back_statement -> CONTINUE ;','back_statement',2,'p_back_statement_continue','Parser.py',232),
  ('back_statement -> RETURN ;','back_statement',2,'p_back_statement_return','Parser.py',236),
  ('back_statement -> RETURN expression ;','back_statement',3,'p_back_statement_return','Parser.py',237),
  ('assignable_expression_orempty -> empty','assignable_expression_orempty',1,'p_assignable_expression_orempty','Parser.py',250),
  ('assignable_expression_orempty -> assignable_expression','assignable_expression_orempty',1,'p_assignable_expression_orempty','Parser.py',251),
  ('variable_initable_list_orempty -> empty','variable_initable_list_orempty',1,'p_variable_initable_list_orempty','Parser.py',257),
  ('variable_initable_list_orempty -> variable_initable_list','variable_initable_list_orempty',1,'p_variable_initable_list_orempty','Parser.py',258),
  ('assign_operator -> =','assign_operator',1,'p_assign_operator','Parser.py',266),
  ('assign_operator -> MUL_ASG','assign_operator',1,'p_assign_operator','Parser.py',267),
  ('assign_operator -> DIV_ASG','assign_operator',1,'p_assign_operator','Parser.py',268),
  ('assign_operator -> MOD_ASG','assign_operator',1,'p_assign_operator','Parser.py',269),
  ('assign_operator -> ADD_ASG','assign_operator',1,'p_assign_operator','Parser.py',270),
  ('assign_operator -> SUB_ASG','assign_operator',1,'p_assign_operator','Parser.py',271),
  ('assign_operator -> LEFT_ASG','assign_operator',1,'p_assign_operator','Parser.py',272),
  ('assign_operator -> RIGHT_ASG','assign_operator',1,'p_assign_operator','Parser.py',273),
  ('assign_operator -> AND_ASG','assign_operator',1,'p_assign_operator','Parser.py',274),
  ('assign_operator -> XOR_ASG','assign_operator',1,'p_assign_operator','Parser.py',275),
  ('assign_operator -> OR_ASG','assign_operator',1,'p_assign_operator','Parser.py',276),
  ('arg_value_exp_list -> assignable_expression','arg_value_exp_list',1,'p_arg_value_exp_list','Parser.py',280),
  ('arg_value_exp_list -> arg_value_exp_list , assignable_expression','arg_value_exp_list',3,'p_arg_value_exp_list','Parser.py',281),
  ('assignable_expression -> conditional_expression','assignable_expression',1,'p_assignable_expression','Parser.py',292),
  ('assignable_expression -> unary_expression assign_operator assignable_expression','assignable_expression',3,'p_assignable_expression','Parser.py',293),
  ('block_item_list_orempty -> empty','block_item_list_orempty',1,'p_block_item_list_orempty','Parser.py',302),
  ('block_item_list_orempty -> block_item_list','block_item_list_orempty',1,'p_block_item_list_orempty','Parser.py',303),
  ('constant_expression_orempty -> empty','constant_expression_orempty',1,'p_constant_expression_orempty','Parser.py',308),
  ('constant_expression_orempty -> constant_expression','constant_expression_orempty',1,'p_constant_expression_orempty','Parser.py',309),
  ('specifier_qualifier_list_orempty -> empty','specifier_qualifier_list_orempty',1,'p_specifier_qualifier_list_orempty','Parser.py',314),
  ('specifier_qualifier_list_orempty -> specifier_qualifier_list','specifier_qualifier_list_orempty',1,'p_specifier_qualifier_list_orempty','Parser.py',315),
  ('block_item -> declaration','block_item',1,'p_block_item','Parser.py',321),
  ('block_item -> statement','block_item',1,'p_block_item','Parser.py',322),
  ('block_item -> comment','block_item',1,'p_block_item','Parser.py',323),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','Parser.py',329),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','Parser.py',330),
  ('expression_orempty -> empty','expression_orempty',1,'p_expression_orempty','Parser.py',342),
  ('expression_orempty -> expression','expression_orempty',1,'p_expression_orempty','Parser.py',343),
  ('funcbody_statement -> { block_item_list_orempty }','funcbody_statement',3,'p_funcbody_statement','Parser.py',348),
  ('conditional_expression -> binary_expression','conditional_expression',1,'p_conditional_expression','Parser.py',353),
  ('conditional_expression -> ternary_expression','conditional_expression',1,'p_conditional_expression','Parser.py',354),
  ('ternary_expression -> expression ? expression : expression','ternary_expression',5,'p_ternary_expression','Parser.py',360),
  ('constant -> INTEGER_CONST','constant',1,'p_constant_int','Parser.py',370),
  ('constant -> CHAR_CONST','constant',1,'p_constant_char','Parser.py',376),
  ('constant -> FLOAT_CONST','constant',1,'p_constant_float','Parser.py',382),
  ('constant -> BOOL_CONST','constant',1,'p_bool_constant','Parser.py',388),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','Parser.py',394),
  ('variable -> direct_variable','variable',1,'p_variable_direct','Parser.py',398),
  ('variable -> pointer direct_variable','variable',2,'p_variable_pd','Parser.py',403),
  ('specifier_qualifier_list -> type specifier_qualifier_list_orempty','specifier_qualifier_list',2,'p_specifier_qualifier_list_ts','Parser.py',408),
  ('direct_variable -> identifier','direct_variable',1,'p_direct_variable_1','Parser.py',419),
  ('direct_variable -> direct_variable [ assignable_expression_orempty ]','direct_variable',4,'p_direct_variable_3','Parser.py',424),
  ('direct_variable -> direct_variable ( parameter_list )','direct_variable',4,'p_direct_variable_6','Parser.py',433),
  ('direct_variable -> direct_variable ( identifier_list_orempty )','direct_variable',4,'p_direct_variable_6','Parser.py',434),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration_1','Parser.py',442),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration_2','Parser.py',447),
  ('expression -> assignable_expression','expression',1,'p_expression','Parser.py',456),
  ('expression -> expression , assignable_expression','expression',3,'p_expression','Parser.py',457),
  ('expression_statement -> expression_orempty ;','expression_statement',2,'p_expression_statement','Parser.py',470),
  ('function_definition -> type variable declaration_list_orempty funcbody_statement','function_definition',4,'p_function_definition','Parser.py',477),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','Parser.py',513),
  ('parameter_list -> parameter_list , parameter_declaration','parameter_list',3,'p_parameter_list','Parser.py',514),
  ('parameter_declaration -> type variable','parameter_declaration',2,'p_parameter_declaration','Parser.py',523),
  ('uscd_expression -> unit_expression','uscd_expression',1,'p_uscd_expression_1','Parser.py',559),
  ('uscd_expression -> uscd_expression [ expression ]','uscd_expression',4,'p_uscd_expression_2','Parser.py',563),
  ('uscd_expression -> uscd_expression ( arg_value_exp_list )','uscd_expression',4,'p_uscd_expression_3','Parser.py',569),
  ('uscd_expression -> uscd_expression ( )','uscd_expression',3,'p_uscd_expression_3','Parser.py',570),
  ('uscd_expression -> uscd_expression PTR_OP identifier','uscd_expression',3,'p_uscd_expression_4','Parser.py',579),
  ('unit_expression -> identifier','unit_expression',1,'p_unit_expression_id','Parser.py',587),
  ('unit_expression -> constant','unit_expression',1,'p_unit_expression_const','Parser.py',591),
  ('unit_expression -> multiple_string','unit_expression',1,'p_unit_expression_mstring','Parser.py',595),
  ('unit_expression -> ( expression )','unit_expression',3,'p_unit_expression_bracket','Parser.py',600),
  ('branch_statement -> IF ( expression ) statement','branch_statement',5,'p_branch_statement_if','Parser.py',610),
  ('branch_statement -> IF ( expression ) statement ELSE statement','branch_statement',7,'p_branch_statement_ifelse','Parser.py',615),
  ('loop_statement -> WHILE ( expression ) statement','loop_statement',5,'p_loop_statement','Parser.py',621),
  ('loop_statement -> FOR ( parameter_declaration ; expression_orempty ; expression_orempty ) statement','loop_statement',9,'p_loop_statement_2','Parser.py',626),
  ('loop_statement -> FOR ( expression ; expression_orempty ; expression_orempty ) statement','loop_statement',9,'p_loop_statement_2','Parser.py',627),
  ('loop_statement -> FOR ( empty ; expression_orempty ; expression_orempty ) statement','loop_statement',9,'p_loop_statement_2','Parser.py',628),
  ('loop_statement -> FOR ( parameter_declaration = expression ; expression_orempty ; expression_orempty ) statement','loop_statement',11,'p_loop_statement_3','Parser.py',634),
  ('statement -> funcbody_statement','statement',1,'p_statement','Parser.py',641),
  ('statement -> branch_statement','statement',1,'p_statement','Parser.py',642),
  ('statement -> expression_statement','statement',1,'p_statement','Parser.py',643),
  ('statement -> loop_statement','statement',1,'p_statement','Parser.py',644),
  ('statement -> back_statement','statement',1,'p_statement','Parser.py',645),
  ('struct_specifier -> STRUCT identifier','struct_specifier',2,'p_struct_specifier_1','Parser.py',650),
  ('struct_specifier -> STRUCT { struct_declaration_list }','struct_specifier',4,'p_struct_specifier_2','Parser.py',657),
  ('initializer_list_orempty -> empty','initializer_list_orempty',1,'p_initializer_list_orempty','Parser.py',664),
  ('initializer_list_orempty -> initializer_list','initializer_list_orempty',1,'p_initializer_list_orempty','Parser.py',665),
  ('struct_specifier -> STRUCT identifier { struct_declaration_list }','struct_specifier',5,'p_struct_specifier_3','Parser.py',669),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','Parser.py',678),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','Parser.py',679),
  ('struct_declaration -> type struct_variable_list ;','struct_declaration',3,'p_struct_declaration','Parser.py',687),
  ('struct_variable_list -> variable','struct_variable_list',1,'p_struct_variable_list','Parser.py',714),
  ('struct_variable_list -> struct_variable_list , variable','struct_variable_list',3,'p_struct_variable_list','Parser.py',715),
  ('pointer -> *','pointer',1,'p_pointer','Parser.py',721),
  ('pointer -> * pointer','pointer',2,'p_pointer','Parser.py',722),
  ('unary_operator -> &','unary_operator',1,'p_unary_operator','Parser.py',737),
  ('unary_operator -> *','unary_operator',1,'p_unary_operator','Parser.py',738),
  ('unary_operator -> +','unary_operator',1,'p_unary_operator','Parser.py',739),
  ('unary_operator -> -','unary_operator',1,'p_unary_operator','Parser.py',740),
  ('unary_operator -> ~','unary_operator',1,'p_unary_operator','Parser.py',741),
  ('unary_operator -> !','unary_operator',1,'p_unary_operator','Parser.py',742),
  ('self_incdec -> INC_OP','self_incdec',1,'p_self_incdec_op','Parser.py',748),
  ('self_incdec -> DEC_OP','self_incdec',1,'p_self_incdec_op','Parser.py',749),
  ('unary_expression -> uscd_expression','unary_expression',1,'p_unary_expression_1','Parser.py',754),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','Parser.py',758),
  ('unary_expression -> self_incdec cast_expression','unary_expression',2,'p_unary_expression_2','Parser.py',759),
  ('unary_expression -> cast_expression self_incdec','unary_expression',2,'p_unary_expression_3','Parser.py',765),
  ('multiple_string -> STRING_CONST','multiple_string',1,'p_multiple_string','Parser.py',772),
  ('multiple_string -> multiple_string STRING_CONST','multiple_string',2,'p_multiple_string','Parser.py',773),
  ('binary_expression -> cast_expression','binary_expression',1,'p_binary_expression','Parser.py',783),
  ('binary_expression -> binary_expression * binary_expression','binary_expression',3,'p_binary_expression','Parser.py',784),
  ('binary_expression -> binary_expression / binary_expression','binary_expression',3,'p_binary_expression','Parser.py',785),
  ('binary_expression -> binary_expression % binary_expression','binary_expression',3,'p_binary_expression','Parser.py',786),
  ('binary_expression -> binary_expression + binary_expression','binary_expression',3,'p_binary_expression','Parser.py',787),
  ('binary_expression -> binary_expression - binary_expression','binary_expression',3,'p_binary_expression','Parser.py',788),
  ('binary_expression -> binary_expression RIGHT_OP binary_expression','binary_expression',3,'p_binary_expression','Parser.py',789),
  ('binary_expression -> binary_expression LEFT_OP binary_expression','binary_expression',3,'p_binary_expression','Parser.py',790),
  ('binary_expression -> binary_expression < binary_expression','binary_expression',3,'p_binary_expression','Parser.py',791),
  ('binary_expression -> binary_expression LTE binary_expression','binary_expression',3,'p_binary_expression','Parser.py',792),
  ('binary_expression -> binary_expression GTE binary_expression','binary_expression',3,'p_binary_expression','Parser.py',793),
  ('binary_expression -> binary_expression > binary_expression','binary_expression',3,'p_binary_expression','Parser.py',794),
  ('binary_expression -> binary_expression EQ_OP binary_expression','binary_expression',3,'p_binary_expression','Parser.py',795),
  ('binary_expression -> binary_expression NEQ_OP binary_expression','binary_expression',3,'p_binary_expression','Parser.py',796),
  ('binary_expression -> binary_expression & binary_expression','binary_expression',3,'p_binary_expression','Parser.py',797),
  ('binary_expression -> binary_expression | binary_expression','binary_expression',3,'p_binary_expression','Parser.py',798),
  ('binary_expression -> binary_expression ^ binary_expression','binary_expression',3,'p_binary_expression','Parser.py',799),
  ('binary_expression -> binary_expression AND_OP binary_expression','binary_expression',3,'p_binary_expression','Parser.py',800),
  ('binary_expression -> binary_expression OR_OP binary_expression','binary_expression',3,'p_binary_expression','Parser.py',801),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression_1','Parser.py',810),
  ('comment -> COMMENT1','comment',1,'p_comment','Parser.py',815),
  ('comment -> COMMENT2','comment',1,'p_comment','Parser.py',816),
  ('cpp_advanced -> ASM','cpp_advanced',1,'p_cpp_advanced','Parser.py',825),
  ('cpp_advanced -> BUILT_IN_FUNCTION','cpp_advanced',1,'p_cpp_advanced','Parser.py',826),
  ('cpp_advanced -> CATCH','cpp_advanced',1,'p_cpp_advanced','Parser.py',827),
  ('cpp_advanced -> CLASS','cpp_advanced',1,'p_cpp_advanced','Parser.py',828),
  ('cpp_advanced -> COMMENT2','cpp_advanced',1,'p_cpp_advanced','Parser.py',829),
  ('cpp_advanced -> CONST_CAST','cpp_advanced',1,'p_cpp_advanced','Parser.py',830),
  ('cpp_advanced -> DELETE','cpp_advanced',1,'p_cpp_advanced','Parser.py',831),
  ('cpp_advanced -> DYNAMIC_CAST','cpp_advanced',1,'p_cpp_advanced','Parser.py',832),
  ('cpp_advanced -> EXPLICIT','cpp_advanced',1,'p_cpp_advanced','Parser.py',833),
  ('cpp_advanced -> EXPORT','cpp_advanced',1,'p_cpp_advanced','Parser.py',834),
  ('cpp_advanced -> FRIEND','cpp_advanced',1,'p_cpp_advanced','Parser.py',835),
  ('cpp_advanced -> MUTABLE','cpp_advanced',1,'p_cpp_advanced','Parser.py',836),
  ('cpp_advanced -> NAMESPACE','cpp_advanced',1,'p_cpp_advanced','Parser.py',837),
  ('cpp_advanced -> NEW','cpp_advanced',1,'p_cpp_advanced','Parser.py',838),
  ('cpp_advanced -> OPERATOR','cpp_advanced',1,'p_cpp_advanced','Parser.py',839),
  ('cpp_advanced -> VIRTUAL','cpp_advanced',1,'p_cpp_advanced','Parser.py',840),
  ('cpp_advanced -> AUTO','cpp_advanced',1,'p_cpp_advanced','Parser.py',841),
  ('cpp_advanced -> CONST','cpp_advanced',1,'p_cpp_advanced','Parser.py',842),
  ('cpp_advanced -> DO','cpp_advanced',1,'p_cpp_advanced','Parser.py',843),
  ('cpp_advanced -> ENUM','cpp_advanced',1,'p_cpp_advanced','Parser.py',844),
  ('cpp_advanced -> EXTERN','cpp_advanced',1,'p_cpp_advanced','Parser.py',845),
  ('cpp_advanced -> FOR','cpp_advanced',1,'p_cpp_advanced','Parser.py',846),
  ('cpp_advanced -> STATIC','cpp_advanced',1,'p_cpp_advanced','Parser.py',847),
  ('cpp_advanced -> UNION','cpp_advanced',1,'p_cpp_advanced','Parser.py',848),
  ('cpp_advanced -> VOLATILE','cpp_advanced',1,'p_cpp_advanced','Parser.py',849),
  ('cpp_advanced -> RESTRICT','cpp_advanced',1,'p_cpp_advanced','Parser.py',850),
  ('cpp_advanced -> REGISTER','cpp_advanced',1,'p_cpp_advanced','Parser.py',851),
  ('cpp_advanced -> INLINE','cpp_advanced',1,'p_cpp_advanced','Parser.py',852),
  ('cpp_advanced -> GOTO','cpp_advanced',1,'p_cpp_advanced','Parser.py',853),
  ('cpp_advanced -> TYPEDEF','cpp_advanced',1,'p_cpp_advanced','Parser.py',854),
  ('cpp_advanced -> SWITCH','cpp_advanced',1,'p_cpp_advanced','Parser.py',855),
  ('cpp_advanced -> CASE','cpp_advanced',1,'p_cpp_advanced','Parser.py',856),
  ('cpp_advanced -> INC_OP','cpp_advanced',1,'p_cpp_advanced','Parser.py',857),
  ('cpp_advanced -> DEC_OP','cpp_advanced',1,'p_cpp_advanced','Parser.py',858),
  ('cpp_advanced -> DEFAULT','cpp_advanced',1,'p_cpp_advanced','Parser.py',859),
]
